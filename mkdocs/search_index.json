{
    "docs": [
        {
            "location": "/", 
            "text": "PyMdown\n\n\nA Python Markdown Preview and Converter Tool\n\n\n\n\n\n\nUnder Construction\n\n\nThis documentation is currently under construction, and things are subject to change.\n\n\n\n\nOverview\n\n\nPyMdown is a CLI tool to convert or even batch convert Markdown files to HTML.  It can also generate HTML previews of Markdown and auto-open them in a web browser. It allows for specifying simple HTML templates for the Markdown where you can include CSS and JavaScript.  PyMdown is built on top of \nPython Markdown\n and \nPygments\n.\n\n\n\n\n\n\n\n\nBasic Markdown Syntax\n\n\nas laid out by \nMark Gruber\n\n\n\n\nPython Markdown Differences\n\n\nout of the box differences (no extensions)\n\n\n\n\nPyMdown Extensions\n\n\nextensions made specifically for PyMdown\n\n\n\n\nPython Markdown Extensions\n\n\nextensions that come with Python Markdown\n\n\n\n\nPyMdown Usage\n\n\nhow to use the PyMdown application\n\n\n\n\nPyMdown Build/Installation\n\n\nhow to build and install PyMdown\n\n\n\n\nSublime Plugin\n\n\nplugin for Sublime Text 3\n\n\n\n\nCustom Lexers and Styles\n\n\nhow to include custom lexers and styes", 
            "title": "Home"
        }, 
        {
            "location": "/#pymdown", 
            "text": "A Python Markdown Preview and Converter Tool    Under Construction  This documentation is currently under construction, and things are subject to change.", 
            "title": "PyMdown"
        }, 
        {
            "location": "/#overview", 
            "text": "PyMdown is a CLI tool to convert or even batch convert Markdown files to HTML.  It can also generate HTML previews of Markdown and auto-open them in a web browser. It allows for specifying simple HTML templates for the Markdown where you can include CSS and JavaScript.  PyMdown is built on top of  Python Markdown  and  Pygments .     Basic Markdown Syntax  as laid out by  Mark Gruber   Python Markdown Differences  out of the box differences (no extensions)   PyMdown Extensions  extensions made specifically for PyMdown   Python Markdown Extensions  extensions that come with Python Markdown   PyMdown Usage  how to use the PyMdown application   PyMdown Build/Installation  how to build and install PyMdown   Sublime Plugin  plugin for Sublime Text 3   Custom Lexers and Styles  how to include custom lexers and styes", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/installation/", 
            "text": "Installation\n\n\nInstallation of PyMdown.\n\n\n\n\nOverview\n\n\nPymdown is built on top of a few requirements.  If installing, the requirements will be installed automatically.\n\n\nRequirements\n\n\nIn order for PyMdown to work, there are a couple of prerequisites.\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nPython Markdown 2.6.0+\n\n\nYes\n\n\nPython Markdown must be installed as it is the Markdown parser that is being used.\n\n\n\n\n\n\nPyMdown Extensions\n\n\nYes\n\n\nExtensions for PyMdown.\n\n\n\n\n\n\nPyYaml 3.10+\n\n\nYes\n\n\nOlder versions may work, but I am arbitrarily specifying 3.10 as the earliest I am aware of that works.\n\n\n\n\n\n\nPygments 2.0.1+ (optional)\n\n\nNo\n\n\nIf Pygments Syntax highlighting is desired, Pygments must be installed.  This can be omitted, and code blocks (if using the CodeHilite extension) will be formatter for use with JavaScript code highlighters.\n\n\n\n\n\n\nPyMdown Styles\n\n\nNo\n\n\nOptional package that adds a couple of custom Pygments styles. This is not required, but is a great example if you want to create your own style package.\n\n\n\n\n\n\nPyMdown Lexers\n\n\nNo\n\n\nOptional package that adds a couple of non-standard lexers, but nothing of substantial interest. This is a great example for adding your own custom lexers.\n\n\n\n\n\n\n\n\nInstallation\n\n\nYou can download PyMdown and run it as a script bundle.  To install, run \npython setup.py build\n and \npython setup.py install\n.  You should be able to access PyMdown from the command line via \npymdown\n or \npymdownX.X\n where \nX.X\n is your python version.  PyMdown on the first run will unpack user files to \n~\\.PyMdown\n on Windows, \n~/.PyMdown\n on OSX and \n~/.config/PyMdown\n on Linux.\n\n\nIf you would like to modify the code, you install it via: \npip install --editable .\n.  This method will allow you to instantly see your changes without reinstalling.  If you want to do this in a virtual machine, you can.", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/installation/#installation", 
            "text": "Installation of PyMdown.", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/installation/#overview", 
            "text": "Pymdown is built on top of a few requirements.  If installing, the requirements will be installed automatically.", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/installation/#requirements", 
            "text": "In order for PyMdown to work, there are a couple of prerequisites.     Name  Required  Details      Python Markdown 2.6.0+  Yes  Python Markdown must be installed as it is the Markdown parser that is being used.    PyMdown Extensions  Yes  Extensions for PyMdown.    PyYaml 3.10+  Yes  Older versions may work, but I am arbitrarily specifying 3.10 as the earliest I am aware of that works.    Pygments 2.0.1+ (optional)  No  If Pygments Syntax highlighting is desired, Pygments must be installed.  This can be omitted, and code blocks (if using the CodeHilite extension) will be formatter for use with JavaScript code highlighters.    PyMdown Styles  No  Optional package that adds a couple of custom Pygments styles. This is not required, but is a great example if you want to create your own style package.    PyMdown Lexers  No  Optional package that adds a couple of non-standard lexers, but nothing of substantial interest. This is a great example for adding your own custom lexers.", 
            "title": "Requirements"
        }, 
        {
            "location": "/user-guide/installation/#installation_1", 
            "text": "You can download PyMdown and run it as a script bundle.  To install, run  python setup.py build  and  python setup.py install .  You should be able to access PyMdown from the command line via  pymdown  or  pymdownX.X  where  X.X  is your python version.  PyMdown on the first run will unpack user files to  ~\\.PyMdown  on Windows,  ~/.PyMdown  on OSX and  ~/.config/PyMdown  on Linux.  If you would like to modify the code, you install it via:  pip install --editable . .  This method will allow you to instantly see your changes without reinstalling.  If you want to do this in a virtual machine, you can.", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/markdown-syntax/", 
            "text": "Markdown Syntax\n\n\nMark Gruber\ns Markdown syntax.\n\n\n\n\n\n\nNote\n\n\nThis documentation lays out the syntax of Mark Gruber\ns Markdown specifications.  It is taken from his \nsite\n.  The content and info is his words, but it is here for convenience.\n\n\n\n\nOverview\n\n\nPhilosophy\n\n\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.\n\n\nReadability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it\ns been marked up with tags or formatting instructions. While Markdown\ns syntax has been influenced by several existing text-to-HTML filters \n including \nSetext\n, \natx\n, \nTextile\n, \nreStructuredText\n,\n\n\nGrutatext\n, and \nEtText\n \n the single biggest source of inspiration for Markdown\ns syntax is the format of plain text email.\n\n\nTo this end, Markdown\ns syntax is comprised entirely of punctuation characters, which punctuation characters have been carefully chosen so as to look like what they mean. E.g., asterisks around a word actually look like *emphasis*. Markdown lists look like, well, lists. Even blockquotes look like quoted passages of text, assuming you\nve ever used email.\n\n\nInline HTML\n\n\nMarkdown\ns syntax is intended for one purpose: to be used as a format for \nwriting\n for the web.\n\n\nMarkdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags. The idea is \nnot\n to create a syntax that makes it easier to insert HTML tags. In my opinion, HTML tags are already easy to insert. The idea for Markdown is to make it easy to read, write, and edit prose. HTML is a \npublishing\n format; Markdown is a \nwriting\n format. Thus, Markdown\ns formatting syntax only addresses issues that can be conveyed in plain text.\n\n\nFor any markup that is not covered by Markdown\ns syntax, you simply use HTML itself. There\ns no need to preface it or delimit it to indicate that you\nre switching from Markdown to HTML; you just use the tags.\n\n\nThe only restrictions are that block-level HTML elements \n e.g. \ndiv\n, \ntable\n, \npre\n, \np\n, etc. \n must be separated from surrounding content by blank lines, and the start and end tags of the block should not be indented with tabs or spaces. Markdown is smart enough not to add extra (unwanted) \np\n tags around HTML block-level tags.\n\n\nFor example, to add an HTML table to a Markdown article:\n\n\nThis is a regular paragraph.\n\n\ntable\n\n    \ntr\n\n        \ntd\nFoo\n/td\n\n    \n/tr\n\n\n/table\n\n\nThis is another regular paragraph.\n\n\n\n\n\nNote that Markdown formatting syntax is not processed within block-level HTML tags. E.g., you can\nt use Markdown-style \n*emphasis*\n inside an HTML block.\n\n\nSpan-level HTML tags \n e.g. \nspan\n, \ncite\n, or \ndel\n \n can be used anywhere in a Markdown paragraph, list item, or header. If you want, you can even use HTML tags instead of Markdown formatting; e.g. if you\nd prefer to use HTML \na\n or \nimg\n tags instead of Markdown\ns link or image syntax, go right ahead.\n\n\nUnlike block-level HTML tags, Markdown syntax \nis\n processed within span-level tags.\n\n\nAutomatic Escaping for Special Characters\n\n\nIn HTML, there are two characters that demand special treatment: \n and \n. Left angle brackets are used to start tags; ampersands are used to denote HTML entities. If you want to use them as literal characters, you must escape them as entities, e.g. \nlt;\n, and \namp;\n.\n\n\nAmpersands in particular are bedeviling for web writers. If you want to write about \nAT\nT\n, you need to write \nAT\namp;T\n. You even need to escape ampersands within URLs. Thus, if you want to link to:\n\n\nhttp://images.google.com/images?num=30\nq=larry+bird\n\n\n\n\n\nyou need to encode the URL as:\n\n\nhttp://images.google.com/images?num=30\namp;q=larry+bird\n\n\n\n\n\nin your anchor tag \nhref\n attribute. Needless to say, this is easy to forget, and is probably the single most common source of HTML validation errors in otherwise well-marked-up web sites.\n\n\nMarkdown allows you to use these characters naturally, taking care of all the necessary escaping for you. If you use an ampersand as part of an HTML entity, it remains unchanged; otherwise it will be translated into \namp;\n.\n\n\nSo, if you want to include a copyright symbol in your article, you can write:\n\n\ncopy;\n\n\n\n\n\nand Markdown will leave it alone. But if you write:\n\n\nAT\nT\n\n\n\n\n\nMarkdown will translate it to:\n\n\nAT\namp;T\n\n\n\n\n\nSimilarly, because Markdown supports \ninline HTML\n, if you use angle brackets as delimiters for HTML tags, Markdown will treat them as such. But if you write:\n\n\n4 \n 5\n\n\n\n\n\nMarkdown will translate it to:\n\n\n4 \nlt; 5\n\n\n\n\n\nHowever, inside Markdown code spans and blocks, angle brackets and ampersands are \nalways\n encoded automatically. This makes it easy to use Markdown to write about HTML code. (As opposed to raw HTML, which is a terrible format for writing about HTML syntax, because every single \n and \n in your example code needs to be escaped.)\n\n\n\n\nBlock Elements\n\n\nParagraphs and Line Breaks\n\n\nA paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line \n a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.\n\n\nThe implication of the \none or more consecutive lines of text\n rule is that Markdown supports \nhard-wrapped\n text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type\ns \nConvert Line Breaks\n option) which translate every line break character in a paragraph into a \nbr /\n tag.\n\n\nWhen you \ndo\n want to insert a \nbr /\n break tag using Markdown, you end a line with two or more spaces, then type return.\n\n\nYes, this takes a tad more effort to create a \nbr /\n, but a simplistic \nevery line break is a \nbr /\n rule wouldn\nt work for Markdown. Markdown\ns email-style \nblockquoting\n and multi-paragraph \nlist items\n work best \n and look better \n when you format them with hard breaks.\n\n\nHeaders\n\n\nMarkdown supports two styles of headers, \nSetext\n and \natx\n.\n\n\nSetext-style headers are \nunderlined\n using equal signs (for first-level headers) and dashes (for second-level headers). For example:\n\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n\n\n\n\nAny number of underlining \n=\ns or \n-\ns will work.\n\n\nAtx-style headers use 1-6 hash characters at the start of the line, corresponding to header levels 1-6. For example:\n\n\n# This is an H1\n\n## This is an H2\n\n###### This is an H6\n\n\n\n\n\nOptionally, you may \nclose\n atx-style headers. This is purely cosmetic \n you can use this if you think it looks better. The closing hashes don\nt even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.) :\n\n\n# This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######\n\n\n\n\n\nBlockquotes\n\n\nMarkdown uses email-style \n characters for blockquoting. If you\nre familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a \n before every line:\n\n\n This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n \n\n Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nMarkdown allows you to be lazy and only put the \n before the first line of a hard-wrapped paragraph:\n\n\n This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n\n Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of \n:\n\n\n This is the first level of quoting.\n\n\n\n \n This is nested blockquote.\n\n\n\n Back to the first level.\n\n\n\n\n\nBlockquotes can contain other Markdown elements, including headers, lists, and code blocks:\n\n\n ## This is a header.\n\n \n\n 1.   This is the first list item.\n\n 2.   This is the second list item.\n\n \n\n Here\ns some example code:\n\n \n\n     return shell_exec(\necho $input | $markdown_script\n);\n\n\n\n\n\nAny decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.\n\n\nLists\n\n\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.\n\n\nUnordered lists use asterisks, pluses, and hyphens \n interchangably\n\n\n as list markers:\n\n\n*   Red\n*   Green\n*   Blue\n\n\n\n\n\nis equivalent to:\n\n\n+   Red\n+   Green\n+   Blue\n\n\n\n\n\nand:\n\n\n-   Red\n-   Green\n-   Blue\n\n\n\n\n\nOrdered lists use numbers followed by periods:\n\n\n1.  Bird\n2.  McHale\n3.  Parish\n\n\n\n\n\nIt\ns important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:\n\n\nol\n\n\nli\nBird\n/li\n\n\nli\nMcHale\n/li\n\n\nli\nParish\n/li\n\n\n/ol\n\n\n\n\n\n\nIf you instead wrote the list in Markdown like this:\n\n\n1.  Bird\n1.  McHale\n1.  Parish\n\n\n\n\n\nor even:\n\n\n3. Bird\n1. McHale\n8. Parish\n\n\n\n\n\nyou\nd get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don\nt have to.\n\n\nIf you do use lazy list numbering, however, you should still start the list with the number 1. At some point in the future, Markdown may support starting ordered lists at an arbitrary number.\n\n\nList markers typically start at the left margin, but may be indented by up to three spaces. List markers must be followed by one or more spaces or a tab.\n\n\nTo make lists look nice, you can wrap items with hanging indents:\n\n\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nBut if you want to be lazy, you don\nt have to:\n\n\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nIf list items are separated by blank lines, Markdown will wrap the\n\nitems in \np\n tags in the HTML output. For example, this input:\n\n\n*   Bird\n*   Magic\n\n\n\n\n\nwill turn into:\n\n\nul\n\n\nli\nBird\n/li\n\n\nli\nMagic\n/li\n\n\n/ul\n\n\n\n\n\n\nBut this:\n\n\n*   Bird\n\n*   Magic\n\n\n\n\n\nwill turn into:\n\n\nul\n\n\nli\np\nBird\n/p\n/li\n\n\nli\np\nMagic\n/p\n/li\n\n\n/ul\n\n\n\n\n\n\nList items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:\n\n\n1.  This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nIt looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:\n\n\n*   This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You\nre only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n\n*   Another item in the same list.\n\n\n\n\n\nTo put a blockquote within a list item, the blockquote\ns \n delimiters need to be indented:\n\n\n*   A list item with a blockquote:\n\n    \n This is a blockquote\n    \n inside a list item.\n\n\n\n\n\nTo put a code block within a list item, the code block needs to be indented \ntwice\n \n 8 spaces or two tabs:\n\n\n*   A list item with a code block:\n\n        \ncode goes here\n\n\n\n\n\n\nIt\ns worth noting that it\ns possible to trigger an ordered list by accident, by writing something like this:\n\n\n1986. What a great season.\n\n\n\n\n\nIn other words, a \nnumber-period-space\n sequence at the beginning of a line. To avoid this, you can backslash-escape the period:\n\n\n1986\\. What a great season.\n\n\n\n\n\nCode Blocks\n\n\nPre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both \npre\n and \ncode\n tags.\n\n\nTo produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab. For example, given this input:\n\n\nThis is a normal paragraph:\n\n    This is a code block.\n\n\n\n\n\nMarkdown will generate:\n\n\np\nThis is a normal paragraph:\n/p\n\n\n\npre\ncode\nThis is a code block.\n\n/code\n/pre\n\n\n\n\n\n\nOne level of indentation \n 4 spaces or 1 tab \n is removed from each line of the code block. For example, this:\n\n\nHere is an example of AppleScript:\n\n    tell application \nFoo\n\n        beep\n    end tell\n\n\n\n\n\nwill turn into:\n\n\np\nHere is an example of AppleScript:\n/p\n\n\n\npre\ncode\ntell application \nFoo\n\n    beep\nend tell\n\n/code\n/pre\n\n\n\n\n\n\nA code block continues until it reaches a line that is not indented (or the end of the article).\n\n\nWithin a code block, ampersands (\n) and angle brackets (\n and \n) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown \n just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:\n\n\n    \ndiv class=\nfooter\n\n        \ncopy; 2004 Foo Corporation\n    \n/div\n\n\n\n\n\n\nwill turn into:\n\n\npre\ncode\nlt;div class=\nfooter\ngt;\n    \namp;copy; 2004 Foo Corporation\n\nlt;/div\ngt;\n\n/code\n/pre\n\n\n\n\n\n\nRegular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it\ns also easy to use Markdown to write about Markdown\ns own syntax.\n\n\nHorizontal Rules\n\n\nYou can produce a horizontal rule tag (\nhr /\n) by placing three or more hyphens, asterisks, or underscores on a line by themselves. If you wish, you may use spaces between the hyphens or asterisks. Each of the following lines will produce a horizontal rule:\n\n\n* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n\n\n\n\n\n\n\nSpan Elements\n\n\nLinks\n\n\nMarkdown supports two style of links: \ninline\n and \nreference\n.\n\n\nIn both styles, the link text is delimited by [square brackets].\n\n\nTo create an inline link, use a set of regular parentheses immediately after the link text\ns closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an \noptional\n title for the link, surrounded in quotes. For example:\n\n\nThis is [an example](http://example.com/ \nTitle\n) inline link.\n\n[This link](http://example.net/) has no title attribute.\n\n\n\n\n\nWill produce:\n\n\np\nThis is \na href=\nhttp://example.com/\n title=\nTitle\n\nan example\n/a\n inline link.\n/p\n\n\n\np\na href=\nhttp://example.net/\nThis link\n/a\n has no\ntitle attribute.\n/p\n\n\n\n\n\n\nIf you\nre referring to a local resource on the same server, you can use relative paths:\n\n\nSee my [About](/about/) page for details.\n\n\n\n\n\nReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:\n\n\nThis is [an example][id] reference-style link.\n\n\n\n\n\nYou can optionally use a space to separate the sets of brackets:\n\n\nThis is [an example] [id] reference-style link.\n\n\n\n\n\nThen, anywhere in the document, you define your link label like this, on a line by itself:\n\n\n[id]: http://example.com/  \nOptional Title Here\n\n\n\n\n\n\nThat is:\n\n\n\n\nSquare brackets containing the link identifier (optionally indented from the left margin using up to three spaces);\n\n\nfollowed by a colon;\n\n\nfollowed by one or more spaces (or tabs);\n\n\nfollowed by the URL for the link;\n\n\noptionally followed by a title attribute for the link, enclosed in double or single quotes, or enclosed in parentheses.\n\n\n\n\nThe following three link definitions are equivalent:\n\n\n[foo]: http://example.com/  \nOptional Title Here\n\n[foo]: http://example.com/  \nOptional Title Here\n\n[foo]: http://example.com/  (Optional Title Here)\n\n\n\n\n\nNote:\n There is a known bug in Markdown.pl 1.0.1 which prevents single quotes from being used to delimit link titles.\n\n\nThe link URL may, optionally, be surrounded by angle brackets:\n\n\n[id]: \nhttp://example.com/\n  \nOptional Title Here\n\n\n\n\n\n\nYou can put the title attribute on the next line and use extra spaces or tabs for padding, which tends to look better with longer URLs:\n\n\n[id]: http://example.com/longish/path/to/resource/here\n    \nOptional Title Here\n\n\n\n\n\n\nLink definitions are only used for creating links during Markdown processing, and are stripped from your document in the HTML output.\n\n\nLink definition names may consist of letters, numbers, spaces, and punctuation \n but they are \nnot\n case sensitive. E.g. these two links:\n\n\n[link text][a]\n[link text][A]\n\n\n\n\n\nare equivalent.\n\n\nThe \nimplicit link name\n shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets \n e.g., to link the word \nGoogle\n to the google.com web site, you could simply write:\n\n\n[Google][]\n\n\n\n\n\nAnd then define the link:\n\n\n[Google]: http://google.com/\n\n\n\n\n\nBecause link names may contain spaces, this shortcut even works for multiple words in the link text:\n\n\nVisit [Daring Fireball][] for more information.\n\n\n\n\n\nAnd then define the link:\n\n\n[Daring Fireball]: http://daringfireball.net/\n\n\n\n\n\nLink definitions can be placed anywhere in your Markdown document. I tend to put them immediately after each paragraph in which they\nre used, but if you want, you can put them all at the end of your document, sort of like footnotes.\n\n\nHere\ns an example of reference links in action:\n\n\nI get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        \nGoogle\n\n  [2]: http://search.yahoo.com/  \nYahoo Search\n\n  [3]: http://search.msn.com/    \nMSN Search\n\n\n\n\n\n\nUsing the implicit link name shortcut, you could instead write:\n\n\nI get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/        \nGoogle\n\n  [yahoo]:  http://search.yahoo.com/  \nYahoo Search\n\n  [msn]:    http://search.msn.com/    \nMSN Search\n\n\n\n\n\n\nBoth of the above examples will produce the following HTML output:\n\n\np\nI get 10 times more traffic from \na href=\nhttp://google.com/\n\ntitle=\nGoogle\nGoogle\n/a\n than from\n\na href=\nhttp://search.yahoo.com/\n title=\nYahoo Search\nYahoo\n/a\n\nor \na href=\nhttp://search.msn.com/\n title=\nMSN Search\nMSN\n/a\n.\n/p\n\n\n\n\n\n\nFor comparison, here is the same paragraph written using Markdown\ns inline link style:\n\n\nI get 10 times more traffic from [Google](http://google.com/ \nGoogle\n)\nthan from [Yahoo](http://search.yahoo.com/ \nYahoo Search\n) or\n[MSN](http://search.msn.com/ \nMSN Search\n).\n\n\n\n\n\nThe point of reference-style links is not that they\nre easier to write. The point is that with reference-style links, your document source is vastly more readable. Compare the above examples: using reference-style links, the paragraph itself is only 81 characters long; with inline-style links, it\ns 176 characters; and as raw HTML, it\ns 234 characters. In the raw HTML, there\ns more markup than there is text.\n\n\nWith Markdown\ns reference-style links, a source document much more closely resembles the final output, as rendered in a browser. By allowing you to move the markup-related metadata out of the paragraph, you can add links without interrupting the narrative flow of your prose.\n\n\nEmphasis\n\n\nMarkdown treats asterisks (\n*\n) and underscores (\n_\n) as indicators of emphasis. Text wrapped with one \n*\n or \n_\n will be wrapped with an HTML \nem\n tag; double \n*\ns or \n_\ns will be wrapped with an HTML \nstrong\n tag. E.g., this input:\n\n\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n\n\n\n\n\nwill produce:\n\n\nem\nsingle asterisks\n/em\n\n\n\nem\nsingle underscores\n/em\n\n\n\nstrong\ndouble asterisks\n/strong\n\n\n\nstrong\ndouble underscores\n/strong\n\n\n\n\n\n\nYou can use whichever style you prefer; the lone restriction is that the same character must be used to open and close an emphasis span.\n\n\nEmphasis can be used in the middle of a word:\n\n\nun*frigging*believable\n\n\n\n\n\nBut if you surround an \n*\n or \n_\n with spaces, it\nll be treated as a literal asterisk or underscore.\n\n\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\n\n\\*this text is surrounded by literal asterisks\\*\n\n\n\n\n\nCode\n\n\nTo indicate a span of code, wrap it with backtick quotes (\n`\n). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\n\n\nUse the `printf()` function.\n\n\n\n\n\nwill produce:\n\n\np\nUse the \ncode\nprintf()\n/code\n function.\n/p\n\n\n\n\n\n\nTo include a literal backtick character within a code span, you can use multiple backticks as the opening and closing delimiters:\n\n\n``There is a literal backtick (`) here.``\n\n\n\n\n\nwhich will produce this:\n\n\np\ncode\nThere is a literal backtick (`) here.\n/code\n/p\n\n\n\n\n\n\nThe backtick delimiters surrounding a code span may include spaces \n one after the opening, one before the closing. This allows you to place literal backtick characters at the beginning or end of a code span:\n\n\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n\n\n\n\n\nwill produce:\n\n\np\nA single backtick in a code span: \ncode\n`\n/code\n/p\n\n\n\np\nA backtick-delimited string in a code span: \ncode\n`foo`\n/code\n/p\n\n\n\n\n\n\nWith a code span, ampersands and angle brackets are encoded as HTML entities automatically, which makes it easy to include example HTML tags. Markdown will turn this:\n\n\nPlease don\nt use any `\nblink\n` tags.\n\n\n\n\n\ninto:\n\n\np\nPlease don\nt use any \ncode\nlt;blink\ngt;\n/code\n tags.\n/p\n\n\n\n\n\n\nYou can write this:\n\n\n`\n#8212;` is the decimal-encoded equivalent of `\nmdash;`.\n\n\n\n\n\nto produce:\n\n\np\ncode\namp;#8212;\n/code\n is the decimal-encoded\nequivalent of \ncode\namp;mdash;\n/code\n.\n/p\n\n\n\n\n\n\nImages\n\n\nAdmittedly, it\ns fairly difficult to devise a \nnatural\n syntax for placing images into a plain text document format.\n\n\nMarkdown uses an image syntax that is intended to resemble the syntax for links, allowing for two styles: \ninline\n and \nreference\n.\n\n\nInline image syntax looks like this:\n\n\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \nOptional title\n)\n\n\n\n\n\nThat is:\n\n\n\n\nAn exclamation mark: \n!\n;\n\n\nfollowed by a set of square brackets, containing the \nalt\n attribute text for the image;\n\n\nfollowed by a set of parentheses, containing the URL or path to the image, and an optional \ntitle\n attribute enclosed in double or single quotes.\n\n\n\n\nReference-style image syntax looks like this:\n\n\n![Alt text][id]\n\n\n\n\n\nWhere \nid\n is the name of a defined image reference. Image references are defined using syntax identical to link references:\n\n\n[id]: url/to/image  \nOptional title attribute\n\n\n\n\n\n\nAs of this writing, Markdown has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML \nimg\n tags.\n\n\n\n\nMiscellaneous\n\n\nAutomatic Links\n\n\nMarkdown supports a shortcut style for creating \nautomatic\n links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:\n\n\nhttp://example.com/\n\n\n\n\n\n\nMarkdown will turn this into:\n\n\na href=\nhttp://example.com/\nhttp://example.com/\n/a\n\n\n\n\n\n\nAutomatic links for email addresses work similarly, except that Markdown will also perform a bit of randomized decimal and hex entity-encoding to help obscure your address from address-harvesting spambots. For example, Markdown will turn this:\n\n\naddress@example.com\n\n\n\n\n\n\ninto something like this:\n\n\na href=\n#x6D;\n#x61;i\n#x6C;\n#x74;\n#x6F;:\n#x61;\n#x64;\n#x64;\n#x72;\n#x65;\n\n#115;\n#115;\n#64;\n#101;\n#120;\n#x61;\n#109;\n#x70;\n#x6C;e\n#x2E;\n#99;\n#111;\n\n#109;\n#x61;\n#x64;\n#x64;\n#x72;\n#x65;\n#115;\n#115;\n#64;\n#101;\n#120;\n#x61;\n\n#109;\n#x70;\n#x6C;e\n#x2E;\n#99;\n#111;\n#109;\n/a\n\n\n\n\n\n\nwhich will render in a browser as a clickable link to \naddress@example.com\n.\n\n\n(This sort of entity-encoding trick will indeed fool many, if not most, address-harvesting bots, but it definitely won\nt fool all of them. It\ns better than nothing, but an address published in this way will probably eventually start receiving spam.)\n\n\nBackslash Escapes\n\n\nMarkdown allows you to use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown\ns formatting syntax. For example, if you wanted to surround a word with literal asterisks (instead of an HTML \nem\n tag), you can use backslashes before the asterisks, like this:\n\n\n\\*literal asterisks\\*\n\n\n\n\n\nMarkdown provides backslash escapes for the following characters:\n\n\n\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+   plus sign\n-   minus sign (hyphen)\n.   dot\n!   exclamation mark", 
            "title": "Markdown Syntax"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#markdown-syntax", 
            "text": "Mark Gruber s Markdown syntax.    Note  This documentation lays out the syntax of Mark Gruber s Markdown specifications.  It is taken from his  site .  The content and info is his words, but it is here for convenience.", 
            "title": "Markdown Syntax"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#philosophy", 
            "text": "Markdown is intended to be as easy-to-read and easy-to-write as is feasible.  Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it s been marked up with tags or formatting instructions. While Markdown s syntax has been influenced by several existing text-to-HTML filters   including  Setext ,  atx ,  Textile ,  reStructuredText ,  Grutatext , and  EtText    the single biggest source of inspiration for Markdown s syntax is the format of plain text email.  To this end, Markdown s syntax is comprised entirely of punctuation characters, which punctuation characters have been carefully chosen so as to look like what they mean. E.g., asterisks around a word actually look like *emphasis*. Markdown lists look like, well, lists. Even blockquotes look like quoted passages of text, assuming you ve ever used email.", 
            "title": "Philosophy"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#html", 
            "text": "Markdown s syntax is intended for one purpose: to be used as a format for  writing  for the web.  Markdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags. The idea is  not  to create a syntax that makes it easier to insert HTML tags. In my opinion, HTML tags are already easy to insert. The idea for Markdown is to make it easy to read, write, and edit prose. HTML is a  publishing  format; Markdown is a  writing  format. Thus, Markdown s formatting syntax only addresses issues that can be conveyed in plain text.  For any markup that is not covered by Markdown s syntax, you simply use HTML itself. There s no need to preface it or delimit it to indicate that you re switching from Markdown to HTML; you just use the tags.  The only restrictions are that block-level HTML elements   e.g.  div ,  table ,  pre ,  p , etc.   must be separated from surrounding content by blank lines, and the start and end tags of the block should not be indented with tabs or spaces. Markdown is smart enough not to add extra (unwanted)  p  tags around HTML block-level tags.  For example, to add an HTML table to a Markdown article:  This is a regular paragraph. table \n     tr \n         td Foo /td \n     /tr  /table \n\nThis is another regular paragraph.  Note that Markdown formatting syntax is not processed within block-level HTML tags. E.g., you can t use Markdown-style  *emphasis*  inside an HTML block.  Span-level HTML tags   e.g.  span ,  cite , or  del    can be used anywhere in a Markdown paragraph, list item, or header. If you want, you can even use HTML tags instead of Markdown formatting; e.g. if you d prefer to use HTML  a  or  img  tags instead of Markdown s link or image syntax, go right ahead.  Unlike block-level HTML tags, Markdown syntax  is  processed within span-level tags.", 
            "title": "Inline HTML"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#autoescape", 
            "text": "In HTML, there are two characters that demand special treatment:   and  . Left angle brackets are used to start tags; ampersands are used to denote HTML entities. If you want to use them as literal characters, you must escape them as entities, e.g.  lt; , and  amp; .  Ampersands in particular are bedeviling for web writers. If you want to write about  AT T , you need to write  AT amp;T . You even need to escape ampersands within URLs. Thus, if you want to link to:  http://images.google.com/images?num=30 q=larry+bird  you need to encode the URL as:  http://images.google.com/images?num=30 amp;q=larry+bird  in your anchor tag  href  attribute. Needless to say, this is easy to forget, and is probably the single most common source of HTML validation errors in otherwise well-marked-up web sites.  Markdown allows you to use these characters naturally, taking care of all the necessary escaping for you. If you use an ampersand as part of an HTML entity, it remains unchanged; otherwise it will be translated into  amp; .  So, if you want to include a copyright symbol in your article, you can write:  copy;  and Markdown will leave it alone. But if you write:  AT T  Markdown will translate it to:  AT amp;T  Similarly, because Markdown supports  inline HTML , if you use angle brackets as delimiters for HTML tags, Markdown will treat them as such. But if you write:  4   5  Markdown will translate it to:  4  lt; 5  However, inside Markdown code spans and blocks, angle brackets and ampersands are  always  encoded automatically. This makes it easy to use Markdown to write about HTML code. (As opposed to raw HTML, which is a terrible format for writing about HTML syntax, because every single   and   in your example code needs to be escaped.)", 
            "title": "Automatic Escaping for Special Characters"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#block", 
            "text": "", 
            "title": "Block Elements"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#p", 
            "text": "A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line   a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.  The implication of the  one or more consecutive lines of text  rule is that Markdown supports  hard-wrapped  text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type s  Convert Line Breaks  option) which translate every line break character in a paragraph into a  br /  tag.  When you  do  want to insert a  br /  break tag using Markdown, you end a line with two or more spaces, then type return.  Yes, this takes a tad more effort to create a  br / , but a simplistic  every line break is a  br /  rule wouldn t work for Markdown. Markdown s email-style  blockquoting  and multi-paragraph  list items  work best   and look better   when you format them with hard breaks.", 
            "title": "Paragraphs and Line Breaks"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#header", 
            "text": "Markdown supports two styles of headers,  Setext  and  atx .  Setext-style headers are  underlined  using equal signs (for first-level headers) and dashes (for second-level headers). For example:  This is an H1\n=============\n\nThis is an H2\n-------------  Any number of underlining  = s or  - s will work.  Atx-style headers use 1-6 hash characters at the start of the line, corresponding to header levels 1-6. For example:  # This is an H1\n\n## This is an H2\n\n###### This is an H6  Optionally, you may  close  atx-style headers. This is purely cosmetic   you can use this if you think it looks better. The closing hashes don t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.) :  # This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######", 
            "title": "Headers"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#blockquote", 
            "text": "Markdown uses email-style   characters for blockquoting. If you re familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a   before every line:   This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.    Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  Markdown allows you to be lazy and only put the   before the first line of a hard-wrapped paragraph:   This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.  Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of  :   This is the first level of quoting.     This is nested blockquote.   Back to the first level.  Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:   ## This is a header.    1.   This is the first list item.  2.   This is the second list item.    Here s some example code:        return shell_exec( echo $input | $markdown_script );  Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.", 
            "title": "Blockquotes"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#list", 
            "text": "Markdown supports ordered (numbered) and unordered (bulleted) lists.  Unordered lists use asterisks, pluses, and hyphens   interchangably   as list markers:  *   Red\n*   Green\n*   Blue  is equivalent to:  +   Red\n+   Green\n+   Blue  and:  -   Red\n-   Green\n-   Blue  Ordered lists use numbers followed by periods:  1.  Bird\n2.  McHale\n3.  Parish  It s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:  ol  li Bird /li  li McHale /li  li Parish /li  /ol   If you instead wrote the list in Markdown like this:  1.  Bird\n1.  McHale\n1.  Parish  or even:  3. Bird\n1. McHale\n8. Parish  you d get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don t have to.  If you do use lazy list numbering, however, you should still start the list with the number 1. At some point in the future, Markdown may support starting ordered lists at an arbitrary number.  List markers typically start at the left margin, but may be indented by up to three spaces. List markers must be followed by one or more spaces or a tab.  To make lists look nice, you can wrap items with hanging indents:  *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  But if you want to be lazy, you don t have to:  *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  If list items are separated by blank lines, Markdown will wrap the \nitems in  p  tags in the HTML output. For example, this input:  *   Bird\n*   Magic  will turn into:  ul  li Bird /li  li Magic /li  /ul   But this:  *   Bird\n\n*   Magic  will turn into:  ul  li p Bird /p /li  li p Magic /p /li  /ul   List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:  1.  This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.  It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:  *   This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You re only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n\n*   Another item in the same list.  To put a blockquote within a list item, the blockquote s   delimiters need to be indented:  *   A list item with a blockquote:\n\n      This is a blockquote\n      inside a list item.  To put a code block within a list item, the code block needs to be indented  twice    8 spaces or two tabs:  *   A list item with a code block:\n\n         code goes here   It s worth noting that it s possible to trigger an ordered list by accident, by writing something like this:  1986. What a great season.  In other words, a  number-period-space  sequence at the beginning of a line. To avoid this, you can backslash-escape the period:  1986\\. What a great season.", 
            "title": "Lists"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#precode", 
            "text": "Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both  pre  and  code  tags.  To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab. For example, given this input:  This is a normal paragraph:\n\n    This is a code block.  Markdown will generate:  p This is a normal paragraph: /p  pre code This is a code block. /code /pre   One level of indentation   4 spaces or 1 tab   is removed from each line of the code block. For example, this:  Here is an example of AppleScript:\n\n    tell application  Foo \n        beep\n    end tell  will turn into:  p Here is an example of AppleScript: /p  pre code tell application  Foo \n    beep\nend tell /code /pre   A code block continues until it reaches a line that is not indented (or the end of the article).  Within a code block, ampersands ( ) and angle brackets (  and  ) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown   just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:       div class= footer \n         copy; 2004 Foo Corporation\n     /div   will turn into:  pre code lt;div class= footer gt;\n     amp;copy; 2004 Foo Corporation lt;/div gt; /code /pre   Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it s also easy to use Markdown to write about Markdown s own syntax.", 
            "title": "Code Blocks"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#hr", 
            "text": "You can produce a horizontal rule tag ( hr / ) by placing three or more hyphens, asterisks, or underscores on a line by themselves. If you wish, you may use spaces between the hyphens or asterisks. Each of the following lines will produce a horizontal rule:  * * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------", 
            "title": "Horizontal Rules"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#span", 
            "text": "", 
            "title": "Span Elements"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#link", 
            "text": "Markdown supports two style of links:  inline  and  reference .  In both styles, the link text is delimited by [square brackets].  To create an inline link, use a set of regular parentheses immediately after the link text s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an  optional  title for the link, surrounded in quotes. For example:  This is [an example](http://example.com/  Title ) inline link.\n\n[This link](http://example.net/) has no title attribute.  Will produce:  p This is  a href= http://example.com/  title= Title \nan example /a  inline link. /p  p a href= http://example.net/ This link /a  has no\ntitle attribute. /p   If you re referring to a local resource on the same server, you can use relative paths:  See my [About](/about/) page for details.  Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:  This is [an example][id] reference-style link.  You can optionally use a space to separate the sets of brackets:  This is [an example] [id] reference-style link.  Then, anywhere in the document, you define your link label like this, on a line by itself:  [id]: http://example.com/   Optional Title Here   That is:   Square brackets containing the link identifier (optionally indented from the left margin using up to three spaces);  followed by a colon;  followed by one or more spaces (or tabs);  followed by the URL for the link;  optionally followed by a title attribute for the link, enclosed in double or single quotes, or enclosed in parentheses.   The following three link definitions are equivalent:  [foo]: http://example.com/   Optional Title Here \n[foo]: http://example.com/   Optional Title Here \n[foo]: http://example.com/  (Optional Title Here)  Note:  There is a known bug in Markdown.pl 1.0.1 which prevents single quotes from being used to delimit link titles.  The link URL may, optionally, be surrounded by angle brackets:  [id]:  http://example.com/    Optional Title Here   You can put the title attribute on the next line and use extra spaces or tabs for padding, which tends to look better with longer URLs:  [id]: http://example.com/longish/path/to/resource/here\n     Optional Title Here   Link definitions are only used for creating links during Markdown processing, and are stripped from your document in the HTML output.  Link definition names may consist of letters, numbers, spaces, and punctuation   but they are  not  case sensitive. E.g. these two links:  [link text][a]\n[link text][A]  are equivalent.  The  implicit link name  shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets   e.g., to link the word  Google  to the google.com web site, you could simply write:  [Google][]  And then define the link:  [Google]: http://google.com/  Because link names may contain spaces, this shortcut even works for multiple words in the link text:  Visit [Daring Fireball][] for more information.  And then define the link:  [Daring Fireball]: http://daringfireball.net/  Link definitions can be placed anywhere in your Markdown document. I tend to put them immediately after each paragraph in which they re used, but if you want, you can put them all at the end of your document, sort of like footnotes.  Here s an example of reference links in action:  I get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/         Google \n  [2]: http://search.yahoo.com/   Yahoo Search \n  [3]: http://search.msn.com/     MSN Search   Using the implicit link name shortcut, you could instead write:  I get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/         Google \n  [yahoo]:  http://search.yahoo.com/   Yahoo Search \n  [msn]:    http://search.msn.com/     MSN Search   Both of the above examples will produce the following HTML output:  p I get 10 times more traffic from  a href= http://google.com/ \ntitle= Google Google /a  than from a href= http://search.yahoo.com/  title= Yahoo Search Yahoo /a \nor  a href= http://search.msn.com/  title= MSN Search MSN /a . /p   For comparison, here is the same paragraph written using Markdown s inline link style:  I get 10 times more traffic from [Google](http://google.com/  Google )\nthan from [Yahoo](http://search.yahoo.com/  Yahoo Search ) or\n[MSN](http://search.msn.com/  MSN Search ).  The point of reference-style links is not that they re easier to write. The point is that with reference-style links, your document source is vastly more readable. Compare the above examples: using reference-style links, the paragraph itself is only 81 characters long; with inline-style links, it s 176 characters; and as raw HTML, it s 234 characters. In the raw HTML, there s more markup than there is text.  With Markdown s reference-style links, a source document much more closely resembles the final output, as rendered in a browser. By allowing you to move the markup-related metadata out of the paragraph, you can add links without interrupting the narrative flow of your prose.", 
            "title": "Links"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#em", 
            "text": "Markdown treats asterisks ( * ) and underscores ( _ ) as indicators of emphasis. Text wrapped with one  *  or  _  will be wrapped with an HTML  em  tag; double  * s or  _ s will be wrapped with an HTML  strong  tag. E.g., this input:  *single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__  will produce:  em single asterisks /em  em single underscores /em  strong double asterisks /strong  strong double underscores /strong   You can use whichever style you prefer; the lone restriction is that the same character must be used to open and close an emphasis span.  Emphasis can be used in the middle of a word:  un*frigging*believable  But if you surround an  *  or  _  with spaces, it ll be treated as a literal asterisk or underscore.  To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:  \\*this text is surrounded by literal asterisks\\*", 
            "title": "Emphasis"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#code", 
            "text": "To indicate a span of code, wrap it with backtick quotes ( ` ). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:  Use the `printf()` function.  will produce:  p Use the  code printf() /code  function. /p   To include a literal backtick character within a code span, you can use multiple backticks as the opening and closing delimiters:  ``There is a literal backtick (`) here.``  which will produce this:  p code There is a literal backtick (`) here. /code /p   The backtick delimiters surrounding a code span may include spaces   one after the opening, one before the closing. This allows you to place literal backtick characters at the beginning or end of a code span:  A single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``  will produce:  p A single backtick in a code span:  code ` /code /p  p A backtick-delimited string in a code span:  code `foo` /code /p   With a code span, ampersands and angle brackets are encoded as HTML entities automatically, which makes it easy to include example HTML tags. Markdown will turn this:  Please don t use any ` blink ` tags.  into:  p Please don t use any  code lt;blink gt; /code  tags. /p   You can write this:  ` #8212;` is the decimal-encoded equivalent of ` mdash;`.  to produce:  p code amp;#8212; /code  is the decimal-encoded\nequivalent of  code amp;mdash; /code . /p", 
            "title": "Code"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#img", 
            "text": "Admittedly, it s fairly difficult to devise a  natural  syntax for placing images into a plain text document format.  Markdown uses an image syntax that is intended to resemble the syntax for links, allowing for two styles:  inline  and  reference .  Inline image syntax looks like this:  ![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg  Optional title )  That is:   An exclamation mark:  ! ;  followed by a set of square brackets, containing the  alt  attribute text for the image;  followed by a set of parentheses, containing the URL or path to the image, and an optional  title  attribute enclosed in double or single quotes.   Reference-style image syntax looks like this:  ![Alt text][id]  Where  id  is the name of a defined image reference. Image references are defined using syntax identical to link references:  [id]: url/to/image   Optional title attribute   As of this writing, Markdown has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML  img  tags.", 
            "title": "Images"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#misc", 
            "text": "", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#autolink", 
            "text": "Markdown supports a shortcut style for creating  automatic  links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:  http://example.com/   Markdown will turn this into:  a href= http://example.com/ http://example.com/ /a   Automatic links for email addresses work similarly, except that Markdown will also perform a bit of randomized decimal and hex entity-encoding to help obscure your address from address-harvesting spambots. For example, Markdown will turn this:  address@example.com   into something like this:  a href= #x6D; #x61;i #x6C; #x74; #x6F;: #x61; #x64; #x64; #x72; #x65; #115; #115; #64; #101; #120; #x61; #109; #x70; #x6C;e #x2E; #99; #111; #109; #x61; #x64; #x64; #x72; #x65; #115; #115; #64; #101; #120; #x61; #109; #x70; #x6C;e #x2E; #99; #111; #109; /a   which will render in a browser as a clickable link to  address@example.com .  (This sort of entity-encoding trick will indeed fool many, if not most, address-harvesting bots, but it definitely won t fool all of them. It s better than nothing, but an address published in this way will probably eventually start receiving spam.)", 
            "title": "Automatic Links"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#backslash", 
            "text": "Markdown allows you to use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown s formatting syntax. For example, if you wanted to surround a word with literal asterisks (instead of an HTML  em  tag), you can use backslashes before the asterisks, like this:  \\*literal asterisks\\*  Markdown provides backslash escapes for the following characters:  \\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+   plus sign\n-   minus sign (hyphen)\n.   dot\n!   exclamation mark", 
            "title": "Backslash Escapes"
        }, 
        {
            "location": "/user-guide/general-usage/", 
            "text": "General Usage\n\n\nUsing PyMdown.\n\n\n\n\nUsing PyMdown\n\n\nPyMdown was written to aid in batch processing Markdown files with Python Markdown and Pygments (but a JavaScript highlighter can just as easily be used).  It also adds a number of optional extensions.\n\n\nPyMdown can also optionally use a template with CSS and JavaScript for styling the Markdown outputs.  Templates, CSS, JavaScript, and extensions are all setup in a configuration file.  If for certain batches specific settings need to be tweaked, PyMdown can accept paths to specific settings file via the CLI.  The settings files is in the YAML format.  PyMdown also supports input sources with a YAML frontmatter where settings can be configured along with general meta data.\n\n\nThough PyMdown could be used to generate a site, it was mainly designed to generate static documents from Markdown for general use or previewing.  If you are looking to generate document sites, there are plenty of good tools that already do this (\nmkdocs\n is one suggestion).  But even if you don\nt directly use PyMdown, you may still find the \nPyMdown extensions\n as useful additions in other Python Markdown related projects as they can be installed and used independently.\n\n\nCommand Line Interface\n\n\nInput Files\n\n\nIn its most basic usage, PyMdown accepts a markdown file:\n\n\npymdown file.md\n\n\n\n\n\nor a file stream:\n\n\npymdown \n file.md\n\n\n\n\n\nSpecifying Output\n\n\nPyMdown allows the output to be specified with the \n--output\n or \n-o\n option:\n\n\npymdown -o file.html file.md\n\n\n\n\n\nAlternatively you can redirect the output:\n\n\npymdown -o file.md \n file.html\n\n\n\n\n\nBatch Processing\n\n\nPyMdown has a batch processing mode (\n--batch\n or \n-b\n). When the batch flag is set, PyMdown will accept multiple paths and wild-card patterns.\n\n\npymdown -b *.md documents/*md\n\n\n\n\n\nWhen in batch mode, PyMdown will simply transform the input file name: \nfile.md\n -\n \nfile.html\n. It will then save the output file in the same location as the input.\n\n\nPreviewing Markdown\n\n\nWith the \n--preview\n or \n-p\n option, PyMdown will generate a temp HTML file and open it in the default web browser.  Preview mode will work in normal and batch mode.\n\n\npymdown -p file.md\n\n\n\n\n\nBasepath\n\n\nPyMdown in various circumstances (particularly in conjunction with specific PyMdown extensions) will try and resolve image, CSS, and JS asset paths for previews, base64 encoding, and other scenarios.  In order for this to work, a base path may be required and can be specified using the \n--basepath\n option.  If no base path is given, the base path will be that of the source file or \nNone\n if the source is a file stream.\n\n\npymdown --basepath ../assets file.md\n\n\n\n\n\nRelpath\n\n\nPyMdown in various circumstances (particularly in conjunction with specific PyMdown extensions) will try to create relative paths to assets or sources such as images, CSS, and JS.  In order for this to work, a relative path is needed.  The \n--relpath\n option is used to set this.  If \n--relpath\n is not set, it defaults to the output directory.  If the output directory is also not set (when output is dumped to stdout), the relative path will not be set.\n\n\npymdown --relpath ../somedirectory file.md\n\n\n\n\n\nSettings\n\n\nPyMdown will normally look in the location of the \nconfiguration directory\n to find the settings file, but the filename and path can be redirected with the \n--settings\n or \n-s\n option.\n\n\npymdown -s ../my_settings.yml file.md\n\n\n\n\n\nEncoding\n\n\nPyMdown can be configured to read the Markdown file(s) with a different encoding than the default \nUTF-8\n.  This is done with the \n--encoding\n or \n-e\n option.\n\n\npymdown -e utf-8 file.md\n\n\n\n\n\nBy default, the output encoding will be the same as the input, but if greater control is needed, the user can set the output encoding via the \n--output_encoding\n or \n-E\n option.\n\n\npymdown -E utf-8 file.md\n\n\n\n\n\nTitle\n\n\nPyMdown, by default, will use the source file\ns name as the title, or if the input is a file stream, it will use \nUntitled\n.  But this can be set/overridden with the \n--title\n option.  This probably isn\nt practical for batch processing.  When batch processing, it may make more sense to utilize the \nfrontmatter\n to set the title per file.\n\n\npymdown --title \nMy Awesome File\n file.md\n\n\n\n\n\nCritic\n\n\nPyMdown has a couple options from CriticMarkup.  By using the \n--accept\n or \n-a\n option, when the Markdown is parsed, the suggested changes will be accepted.\n\n\nWhen using the \n--reject\n or \n-r\n option when Markdown is parsed, the suggested changes will be rejected and the original content will be used instead.\n\n\nIf both \n--accept\n and \n--reject\n are set at the same time, PyMdown will use the view mode and convert the file to HTML and will attempt to highlight the blocks targeted with the CriticMarkup.\n\n\nLastly, the \n--critic-dump\n option, when used with either the \n--accept\n or \n--reject\n option, will take the source and output it accepting or rejecting respectively the CriticMarkup edits that were made (essentially removing the CriticMarkup from the file).\n\n\nPlain HTML\n\n\nIf a stripped down HTML output is preferred, the \n--plain-html\n or \n-P\n option will return a stripped down output with no templates, no HTML comments, and no id, style, class, or on* attributes.\n\n\npymdown -P file.md\n\n\n\n\n\nForce No Template\n\n\nIf by default the configuration file has defined a template, but it is desired to do an output without the template, the \n--force-no-template\n option can be used to disable template use.\n\n\npymdown --force-no-template file.md\n\n\n\n\n\nForce Stdout\n\n\nSometimes a file may have frontmatter that redirects its output to a file, but it may be desirable to send the output to stdout.  In this case, the \n--force-stdout\n option can be used to force a redirect to stdout.\n\n\npymdown --force-stdout file.md\n\n\n\n\n\nQuiet\n\n\nIn some situations it may be desired to hide error messages and general info from the stdout.  In this case, the \n--quiet\n or \n-q\n option may be used.\n\n\npymdown -q file.md\n\n\n\n\n\nConfiguration File\n\n\nThe configuration file is used to specify general Python Markdown settings, optional template, CSS and JS resources for templates, and extensions that will be used.\n\n\nPyMdown on the first run will unpack user files to \n~\\.PyMdown\n on Windows, \n~/.PyMdown\n on OSX and \n~/.config/PyMdown\n on Linux.  The global configuration file can found here at the root of the folder along with default CSS, JavaScript, and other resources which would be under another sub-folder called \ndefault\n.  Files under \ndefault\n will be auto-upgraded when necessary by newer versions of PyMdown and should be left unaltered.  Default files can be copied and altered outside of the \ndefault\n location for personal tweaking and usage.\n\n\nPython Markdown Settings\n\n\nPython Markdown has a number of settings that can be configured:\n\n\n# Length of tabs in source files\n\n\ntab_length\n:\n \n4\n\n\n\n# Ignore number of first item in ordered list.\n\n\n# Setting this to false will force the list to start with the\n\n\n# first specified number in the list.\n\n\nlazy_ol\n:\n \ntrue\n\n\n\n# Python Markdown by default enables smart logic for _connected_words_\n\n\n# but only on italic with the underscore character.  I find this behavior odd\n\n\n# and disable it by default for a more traditional markdown feel by default.\n\n\n# Extensions can override this.\n\n\nsmart_emphasis\n:\n \nfalse\n\n\n\n# Enable/disable attributes\n\n\nenable_attributes\n:\n \ntrue\n\n\n\n# Output format (html|html5|html5|xhtml|xhtml1|xhtml5)\n\n\n# It is recommend to use more specific versions such as: html5 or xhtml1 than\n\n\n# general html or xhtml\n\n\noutput_format\n:\n \nxhtml1\n\n\n\n\n\n\nSafe mode setting is omitted as it is pending deprecation in Python Markdown.\n\n\nPygment Settings\n\n\nThe following setting determines if a one of the installed Pygments CSS themes will be injected into your template.  This can be turned off if you are applying your own, or you are configured to use a JavaScript syntax highlighter.\n\n\n# Include the pygments css when using codehilite extension\n\n\nuse_pygments_css\n:\n \ntrue,\n\n\n\n\n\n\n\n\nNote\n\n\nIf any of the following reasons are true, Pygments CSS will not be injected regardless of whether \nuse_pygments_css\n is enabled or not:\n\n\n\n\nCodeHilite and/or InlineHilite extension are not being used.\n\n\nCodeHilite and/or InlineHilite have \nuse_pygments\n set to \nFalse\n or \nnoclasses\n set to \nTrue\n.\n\n\nPygments is not installed on the system.\n\n\n\n\n\n\nThis setting is used to configure which installed Pygments theme PyMdown should insert into your HTML template.\n\n\n# Name of installed Pygments style to use.\n\n\npygments_style\n:\n \ndefault\n\n\n\n\n\n\nThis determines what class will be prepended to all of the Pygment\ns CSS theme.\n\n\n# Pygments class to use.  This applies a class to the Pygments CSS\n\n\n# so that only elements with the class below will be syntax highlighted.\n\n\n# If using this, make sure you\nve configured CodeHilite and/or InlineHilite\n\n\n# to use the same name.\n\n\npygments_class\n:\n \nhighlight\n\n\n\n\n\n\n\n\nTip\n\n\nIf you want to use a JavaScript highlighter such as \nhighlight.js\n, you should disable \nuse_pygments_css\n, and set \nuse_pygments\n to \nFalse\n in CodeHilite and/or InlineHilite.\n\n\n\n\nTemplate\n\n\nPyMdown allows for specifying a simple HTML template that can be used for the output.  Template files can be specified in the settings file via the \ntemplate\n keyword.\n\n\n# Your HTML template\n\n\n# PyMdown will look relative to the binary if it can\nt find the file.\n\n\ntemplate\n:\n \ndefault/template.html\n\n\n\n\n\n\nTemplate files in the settings or frontmatter can be followed by \n;encoding\n to cause the file to be opened and read with the specified encoding.\n\n\nThe template file uses Jinja2 to handle template variables.  Please see \nTemplating\n for more info on how to access page data in a template.\n\n\nJavascript and CSS\n\n\nJavascript and CSS can be included in the template by adding them to the following arrays:\n\n\n# Select your CSS for you output html\n\n\n# or you can have it all contained in your HTML template\n\n\n#\n\n\n# Is an array of stylesheets (path or link).\n\n\n# If it points to a physical file, it will be included.\n\n\n# PyMdown will look relative to the binary if it can\nt find the file.\n\n\n#\n\n\n# This can be overridden in a file\ns frontmatter via the \nsettings\n key word:\n\n\n#\n\n\n# ---\n\n\n# settings:\n\n\n#   css:\n\n\n#     - somefile.css\n\n\n# ---\n\n\n#\n\n\n# but if you want to append to the list, you can use just the \ncss\n keyword in the\n\n\n# frontmatter:\n\n\n#\n\n\n# ---\n\n\n# css:\n\n\n#   - somefile.css\n\n\n# ---\n\n\n#\n\n\ncss\n:\n\n\n-\n \n^default/markdown.css\n\n\n\n# Load up js scripts (in head)\n\n\n#\n\n\n# Is an array of scripts (path or link).\n\n\n# If it points to a physical file, it will be included.\n\n\n# PyMdown will look relative to the binary if it can\nt find the file.\n\n\n#\n\n\n# This can be overridden in a file\ns frontmatter via the \nsettings\n key word:\n\n\n#\n\n\n# ---\n\n\n# settings:\n\n\n#   js:\n\n\n#     - somefile.js\n\n\n# ---\n\n\n#\n\n\n# but if you want to append to the list, you can use just the \njs\n keyword in the\n\n\n# frontmatter:\n\n\n#\n\n\n# ---\n\n\n# js:\n\n\n#   - somefile.js\n\n\n# ---\n\n\n#\n\n\njs\n:\n \n[]\n\n\n\n\n\n\nCSS files and JavaScript files can be URLs or file paths.  When specifying a file path, a \n!\n can be used to precede the path so that PyMdown will just link the file and skip converting the file to an absolute or relative path.  If the file path is preceded by a \n^\n, the file content will be embedded in the HTML under a style or script tag depending on the source type.\n\n\nCSS and JavaScript files can also be followed by \n;encoding\n to read in the file with the specified encoding.\n\n\nEnabling Jinja2 Templating in Markdown Content\n\n\nIf desired, Jinja2 templating can be enabled in Markdown content.  While Jinja2 usage in Markdown content can be enabled globally, it is recommended to enable it in specific pages via the YAML frontmatter.\n\n\n# Enable Jinja2 Template support inside of Markdown content\n\n\nuse_jinja2\n:\n \nfalse\n\n\n\n\n\n\nYou can also control the tag style if you find the default difficult to use within your content either globally in your settings file, or in your page\ns YAML frontmatter.\n\n\n# By default, Jinja2 uses {% block %} for blocks. You can change that here\n\n\n# or change it per file in your frontmatter. Only affects Markdown content template tags.\n\n\njinja2_block\n:\n \n[\n{%\n,\n \n%}\n]\n\n\n\n# By default, Jinja2 uses {{ variable }} for variables. You can change that here\n\n\n# or change it per file in your frontmatter. Only affects Markdown content template tags.\n\n\njinja2_variable\n:\n \n[\n{{\n,\n \n}}\n]\n\n\n\n# By default, Jinja2 uses {# comment #} for comments. You can change that here\n\n\n# or change it per file in your frontmatter. Only affects Markdown content template tags.\n\n\njinja2_comment\n:\n \n[\n{#\n,\n \n#}\n]\n\n\n\n\n\n\nSee \nTemplating\n to learn more about accessing these template variables.\n\n\nPath Conversions\n\n\nBy default, PyMdown converts paths to be relative to the output location.  If desired, this can be changed to an absolute path:\n\n\n# By default resource paths are converted to relative file paths when possible;\n\n\n# this disables conversion.\n\n\npath_conversion_absolute\n:\n \nfalse\n\n\n\n\n\n\nIf path conversion is not wanted, and disabling the conversion inline with the \n!\n token is not acceptable, path conversion can be completely disabled with the following setting:\n\n\n# By default resource paths are converted to relative file paths when possible;\n\n\n# this disables conversion.  Previews will still convert paths to render preview proper.\n\n\ndisable_path_conversion\n:\n \nfalse\n\n\n\n\n\n\n\n\nNote\n\n\nPyMdown utilizes the \npathconverter\n extension to convert links and references in the actual markdown content.  If \npathconverter\n is manually configured instead of letting PyMdown handle it, these settings will have no effect.\n\n\nThe other exception is with previews.  In order for links and references to work in previews, they must be paths that are relative to the preview\ns temp directory or they must be absolute paths.  For this reason, PyMdown will always enable path conversions for previews.  If you have manually set up the \npathconverter\n extension, preview\ns will overwrite the \nrelative_path\n argument to ensure it is set to \n${OUTPUT}\n which will allow the preview to display content properly by making asset paths relative to the previews location.  By default, the \nrelative_path\n is set to \n${REL_PATH}\n which is the output path by default, but can be altered via the command line option \n--relpath\n or the \nrelpath\n frontmatter option.\n\n\n\n\nPython Markdown Extensions\n\n\nExtensions to be used are defined under the \nmarkdown_extensions\n keyword.  \nmarkdown_extensions\n is an ordered key/value pair. An extension has a name followed by \n:\n in yaml format.  If you want to include settings parameters, you can include those as the extension value.  All parameters should be done as key/value pairs as shown below.\n\n\nmarkdown_extensions\n:\n\n  \nmarkdown.extensions.extra\n:\n\n  \nmarkdown.extensions.toc\n:\n\n    \ntitle\n:\n \nTable of Contents\n\n    \nslugify\n:\n \n${SLUGIFY}\n\n  \nmarkdown.extensions.codehilite\n:\n\n    \nguess_lang\n:\n \nfalse\n\n  \nmarkdown.extensions.smarty\n:\n\n  \nmarkdown.extensions.wikilinks\n:\n\n  \nmarkdown.extensions.admonition\n:\n\n  \nmarkdown.extensions.nl2br\n:\n\n  \npymdown.pymdown\n:\n\n  \npymdown.b64\n:\n\n    \nbase_path\n:\n \n${BASE_PATH}\n\n  \npymdown.critic\n:\n\n\n\n\n\n\nThere are a couple of special variables you can use in extension settings:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n${BASE_PATH}\n\n\nInsert the base path from command line or frontmatter.\n\n\n\n\n\n\n${REL_PATH}\n\n\nInsert the relative path from command line or frontmatter.\n\n\n\n\n\n\n${OUTPUT}\n\n\nInsert the output path (or destination) from command line or frontmatter.\n\n\n\n\n\n\n${SLUGIFY}\n\n\nUse PyMdown\ns internal slugify method which provides a more unique header id for headers that have Unicode characters.  Python Markdown\ns internal slugify just strips them out, while PyMdown will give a percent encoding of the Unicode characters.\n\n\n\n\n\n\n\n\nFrontmatter\n\n\nFrontmatter can be used at the very beginning of a Markdown file.  Frontmatter blocks begin with \n---\n and end with \n---\n.  Frontmatter must be the very beginning of the file and start on the very first line.\n\n\nPyMdown frontmatter content must be in the YAML format.  The frontmatter is a dictionary of key value pairs which will either be available in templates and/or used to set some functionality or setting per page.\n\n\n---\ntitle: My Title\nauthor: My Name\netc: You get the idea\n---\n### Markdown Header\nMarkdown content.\n\n\n\n\n\nPyMdown has a few special keywords that can be defined to alter the output.  All other keys will be counted as user variables.\n\n\n\n\n\n\n\n\nKeyword\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nThis item is used in the HTML\ns title tag.\n\n\n\n\n\n\ndestination\n\n\nThis keyword is the location and file name were the output should be placed.\n\n\n\n\n\n\nbasepath\n\n\nThis is used to specify the path that PyMdown should use to look for reference material like CSS or JS files and even \nreferences\n defined in the frontmatter. It is also used in plugins such as \npathconverter\n and \nb64\n.  This can override the \nbasepath\n fed in at the command line.\n\n\n\n\n\n\nrelpath\n\n\nThis is used to specify the path that images and paths are relative to. It is used in plugins such as \npathconverter\n.  This can override the \nrelpath\n fed in at the command line.\n\n\n\n\n\n\ncss\n\n\nThis keyword\ns value is an array of strings denoting additional single CSS files to include.  They follow the same convention as CSS defined in the settings file: \n;encoding\n at tail will define the encoding used to access the file, paths starting with \n!\n will not have their path converted to absolute or relative paths, and \n^\n will directly embed the content in the HTML file.\n\n\n\n\n\n\njs\n\n\nThis keyword\ns value is an array of strings denoting additional single JavaScript files to include.  They follow the same convention as JavaScript defined in the settings file: \n;encoding\n at tail will define the encoding used to access the file, paths starting with \n!\n will not have their path converted to absolute or relative paths, and \n^\n will directly embed the content in the HTML file.\n\n\n\n\n\n\nsettings\n\n\nThis is a dictionary and allows the overriding of any of the settings found in the original configuration file.\n\n\n\n\n\n\n\n\nSee \nTemplating\n to learn more about accessing these values in your HTML template.\n\n\nCustom Frontmatter\n\n\nIf the keyword is not one of the special keywords defined above, they will automatically be available in the template variables under \nextra\n\n\nTemplating\n\n\nTemplates are HTML files that use \nJinja2\n templating syntax.  Template variables and logic is used in the HTML templates.  If desired, Jinja2 templating can be enabled in the Markdown content by with the following syntax:\n\n\nsettings\n:\n\n  \nuse_jinja2\n\n\n\n\n\n\nIt is up to the user to escape content that must be escaped. If desired, the brackets for a given page can be changed with the following frontmatter:\n\n\nsettings\n:\n\n  \njinja2_block\n:\n \n[\n{%\n,\n \n%}\n]\n\n  \njinja2_variable\n:\n \n[\n{{\n,\n \n}}\n]\n\n  \njinja2_comment\n:\n \n[\n{#\n,\n \n#}\n]\n\n\n\n\n\n\nTemplate data is found under three variables:\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npage\n\n\nData related to the specific page.\n\n\n\n\n\n\nextra\n\n\nThis contains user defined variables.  These can come from the settings file under the \nextra\n keyword, or any non-default keyword found in the frontmatter. Extra can contain any content and structure the user specifies.\n\n\n\n\n\n\nsettings\n\n\nThis is the the settings used for the page.  It contains the merged state of the settings from the settings file and frontmatter.  The values will also contained final adjusted states if any had to be made.\n\n\n\n\n\n\n\n\nPage Variables\n\n\nThe page variable contains the page specific variables.\n\n\n\n\n\n\n\n\nVariables\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npage.title\n\n\nThe title for the page (escaped).\n\n\n\n\n\n\npage.encoding\n\n\nThe specified encoding for the HTML page.\n\n\n\n\n\n\npage.content\n\n\nThe HTML content from the markdown source.\n\n\n\n\n\n\npage.js\n\n\nAn array of JavaScript files or links that were specified to be include.  File paths may contain special markers such as \n^\n and \n!\n at the beginning to specify to embed the content directly or not to convert path respectively. File paths may also include encoding specifiers at the end in the form \n;encoding\n. Special \ntemplate filters\n have been provided to process these files and links and return either the links or contents as intended. Returns will be wrapped in their appropriate tags.\n\n\n\n\n\n\npage.css\n\n\nAn array of CSS files or links that were specified to be include.  File paths may contain special markers such as \n^\n and \n!\n at the beginning to specify to embed the content directly or not to convert path respectively. File paths may also include encoding specifiers at the end in the form \n;encoding\n. Special \ntemplate filters\n have been provided to process these files and links and return either the links or contents as intended. Returns will be wrapped in their appropriate tags.\n\n\n\n\n\n\npage.basepath\n\n\nBasepath used as a reference point to find other files.\n\n\n\n\n\n\npage.relpath\n\n\nRelative path that the page may have used to calculate paths for links etc.\n\n\n\n\n\n\npage.destination\n\n\nThe output location for the file.\n\n\n\n\n\n\npage.pygments_style\n\n\nWill contain the Pygments style CSS content to embed in the page. If this option has been disabled for any reason, it will be null.\n\n\n\n\n\n\n\n\nTemplate Filters\n\n\nThe template environment contains all the normal default Jinja2 filters and a couple of extras.\n\n\nEmbedding Images\n\n\n\n\nembedimage(image_path)\n\n\n\n\nGiven the path, embed the image directly into the HTML with base64 encoding.  Image paths are resolved relative to the base path.\n\n\nExample\n\n\n{{\n \npath\n/\nto\n/\nimage.png\n|\nembedimage\n \n}}\n\n\n\n\n\n\n\n\n\n\nGet CSS\n\n\n\n\ngetcss([files])\n\n\n\n\nGiven a single file or array of files, resolve the file path and either embed the content of the file(s) or provide a link(s) as specified in the settings, frontmatter, or inline with appropriate PyMdown notation.\n\n\nExample\n\n\n{# Include css link #}\n\n\n{{\n \npage.css\n|\ngetcss\n \n}}\n\n\n\n\n\n\n{# Do not convert path for CSS link #}\n\n\n{{\n \n!path/to/css/file.css\n|\ngetcss\n \n}}\n\n\n\n\n\n\n{# Embed file content #}\n\n\n{{\n \n^path/to/css/file.css\n|\ngetcss\n \n}}\n\n\n\n\n\n\n\n\n\n\nGet JavaScript\n\n\n\n\ngetjs([files])\n\n\n\n\nGiven a single file or array of files, resolve the file path and either embed the content of the file(s) or provide a link(s) as specified in the settings, frontmatter, or inline with appropriate PyMdown notation.\n\n\nExample\n\n\n{# Include JS link #}\n\n\n{{\n \npage.js\n|\ngetjs\n \n}}\n\n\n\n\n\n\n{# Do not convert path for JS link #}\n\n\n{{\n \n!path/to/js/file.js;utf-8\n|\ngetjs\n \n}}\n\n\n\n\n\n\n{# Embed file content #}\n\n\n{{\n \n^path/to/js/file.js;utf-8\n|\ngetjs\n \n}}\n\n\n\n\n\n\n\n\n\n\nGet Text\n\n\n\n\ngettxt([files])\n\n\n\n\nGiven a single file or array of files, resolve the file path and embed the content of the file(s).\n\n\nExample\n\n\n{# Embed text content #}\n\n\n{{\n \nsome/path/to.txt\n|\ngettxt\n \n}}\n\n\n\n\n\n\n\n\n\n\nGet Path\n\n\n\n\ngetpath(path)\n\n\n\n\nGiven a path, adjust with internal base path and relative path settings to return the desired path.\n\n\nExample\n\n\n{{\n \npath/to/something\n|\ngetpath\n}}\n\n\n\n\n\n\n\n\n\n\nGet Path URL\n\n\n\n\ngetpathurl(path)\n\n\n\n\nGiven a path, adjust with the internal base path and relative path settings to return the desired path, but also encode it for a URL; path will be quoted (quotes converted for placement in an HTML attribute).\n\n\nExample\n\n\nimg\n \nsrc=\n{{\n \nassets/some/image.png\n|\ngetpathurl\n \n}}\n/\n\n\n\n\n\n\n\n\n\n\nGet Meta\n\n\n\n\ngetmeta(value, name=\nname\n)\n\n\n\n\nGiven the value and name, return a simple meta tag: \nmeta\n \nname=\nname\n \nvalue=\nvalue\n.  \nvalue\n can be either a single string or array of strings; if an array, the values will be joined with \n,\n.\n\n\nExample\n\n\n{{\n \nextra.author\n|\ngetmeta\n(\nname\n=\nauthor\n)\n \n}}", 
            "title": "General Usage"
        }, 
        {
            "location": "/user-guide/general-usage/#general-usage", 
            "text": "Using PyMdown.", 
            "title": "General Usage"
        }, 
        {
            "location": "/user-guide/general-usage/#using-pymdown", 
            "text": "PyMdown was written to aid in batch processing Markdown files with Python Markdown and Pygments (but a JavaScript highlighter can just as easily be used).  It also adds a number of optional extensions.  PyMdown can also optionally use a template with CSS and JavaScript for styling the Markdown outputs.  Templates, CSS, JavaScript, and extensions are all setup in a configuration file.  If for certain batches specific settings need to be tweaked, PyMdown can accept paths to specific settings file via the CLI.  The settings files is in the YAML format.  PyMdown also supports input sources with a YAML frontmatter where settings can be configured along with general meta data.  Though PyMdown could be used to generate a site, it was mainly designed to generate static documents from Markdown for general use or previewing.  If you are looking to generate document sites, there are plenty of good tools that already do this ( mkdocs  is one suggestion).  But even if you don t directly use PyMdown, you may still find the  PyMdown extensions  as useful additions in other Python Markdown related projects as they can be installed and used independently.", 
            "title": "Using PyMdown"
        }, 
        {
            "location": "/user-guide/general-usage/#command-line-interface", 
            "text": "Input Files  In its most basic usage, PyMdown accepts a markdown file:  pymdown file.md  or a file stream:  pymdown   file.md  Specifying Output  PyMdown allows the output to be specified with the  --output  or  -o  option:  pymdown -o file.html file.md  Alternatively you can redirect the output:  pymdown -o file.md   file.html  Batch Processing  PyMdown has a batch processing mode ( --batch  or  -b ). When the batch flag is set, PyMdown will accept multiple paths and wild-card patterns.  pymdown -b *.md documents/*md  When in batch mode, PyMdown will simply transform the input file name:  file.md  -   file.html . It will then save the output file in the same location as the input.  Previewing Markdown  With the  --preview  or  -p  option, PyMdown will generate a temp HTML file and open it in the default web browser.  Preview mode will work in normal and batch mode.  pymdown -p file.md  Basepath  PyMdown in various circumstances (particularly in conjunction with specific PyMdown extensions) will try and resolve image, CSS, and JS asset paths for previews, base64 encoding, and other scenarios.  In order for this to work, a base path may be required and can be specified using the  --basepath  option.  If no base path is given, the base path will be that of the source file or  None  if the source is a file stream.  pymdown --basepath ../assets file.md  Relpath  PyMdown in various circumstances (particularly in conjunction with specific PyMdown extensions) will try to create relative paths to assets or sources such as images, CSS, and JS.  In order for this to work, a relative path is needed.  The  --relpath  option is used to set this.  If  --relpath  is not set, it defaults to the output directory.  If the output directory is also not set (when output is dumped to stdout), the relative path will not be set.  pymdown --relpath ../somedirectory file.md  Settings  PyMdown will normally look in the location of the  configuration directory  to find the settings file, but the filename and path can be redirected with the  --settings  or  -s  option.  pymdown -s ../my_settings.yml file.md  Encoding  PyMdown can be configured to read the Markdown file(s) with a different encoding than the default  UTF-8 .  This is done with the  --encoding  or  -e  option.  pymdown -e utf-8 file.md  By default, the output encoding will be the same as the input, but if greater control is needed, the user can set the output encoding via the  --output_encoding  or  -E  option.  pymdown -E utf-8 file.md  Title  PyMdown, by default, will use the source file s name as the title, or if the input is a file stream, it will use  Untitled .  But this can be set/overridden with the  --title  option.  This probably isn t practical for batch processing.  When batch processing, it may make more sense to utilize the  frontmatter  to set the title per file.  pymdown --title  My Awesome File  file.md  Critic  PyMdown has a couple options from CriticMarkup.  By using the  --accept  or  -a  option, when the Markdown is parsed, the suggested changes will be accepted.  When using the  --reject  or  -r  option when Markdown is parsed, the suggested changes will be rejected and the original content will be used instead.  If both  --accept  and  --reject  are set at the same time, PyMdown will use the view mode and convert the file to HTML and will attempt to highlight the blocks targeted with the CriticMarkup.  Lastly, the  --critic-dump  option, when used with either the  --accept  or  --reject  option, will take the source and output it accepting or rejecting respectively the CriticMarkup edits that were made (essentially removing the CriticMarkup from the file).  Plain HTML  If a stripped down HTML output is preferred, the  --plain-html  or  -P  option will return a stripped down output with no templates, no HTML comments, and no id, style, class, or on* attributes.  pymdown -P file.md  Force No Template  If by default the configuration file has defined a template, but it is desired to do an output without the template, the  --force-no-template  option can be used to disable template use.  pymdown --force-no-template file.md  Force Stdout  Sometimes a file may have frontmatter that redirects its output to a file, but it may be desirable to send the output to stdout.  In this case, the  --force-stdout  option can be used to force a redirect to stdout.  pymdown --force-stdout file.md  Quiet  In some situations it may be desired to hide error messages and general info from the stdout.  In this case, the  --quiet  or  -q  option may be used.  pymdown -q file.md", 
            "title": "Command Line Interface"
        }, 
        {
            "location": "/user-guide/general-usage/#configuration-file", 
            "text": "The configuration file is used to specify general Python Markdown settings, optional template, CSS and JS resources for templates, and extensions that will be used.  PyMdown on the first run will unpack user files to  ~\\.PyMdown  on Windows,  ~/.PyMdown  on OSX and  ~/.config/PyMdown  on Linux.  The global configuration file can found here at the root of the folder along with default CSS, JavaScript, and other resources which would be under another sub-folder called  default .  Files under  default  will be auto-upgraded when necessary by newer versions of PyMdown and should be left unaltered.  Default files can be copied and altered outside of the  default  location for personal tweaking and usage.  Python Markdown Settings  Python Markdown has a number of settings that can be configured:  # Length of tabs in source files  tab_length :   4  # Ignore number of first item in ordered list.  # Setting this to false will force the list to start with the  # first specified number in the list.  lazy_ol :   true  # Python Markdown by default enables smart logic for _connected_words_  # but only on italic with the underscore character.  I find this behavior odd  # and disable it by default for a more traditional markdown feel by default.  # Extensions can override this.  smart_emphasis :   false  # Enable/disable attributes  enable_attributes :   true  # Output format (html|html5|html5|xhtml|xhtml1|xhtml5)  # It is recommend to use more specific versions such as: html5 or xhtml1 than  # general html or xhtml  output_format :   xhtml1   Safe mode setting is omitted as it is pending deprecation in Python Markdown.  Pygment Settings  The following setting determines if a one of the installed Pygments CSS themes will be injected into your template.  This can be turned off if you are applying your own, or you are configured to use a JavaScript syntax highlighter.  # Include the pygments css when using codehilite extension  use_pygments_css :   true,    Note  If any of the following reasons are true, Pygments CSS will not be injected regardless of whether  use_pygments_css  is enabled or not:   CodeHilite and/or InlineHilite extension are not being used.  CodeHilite and/or InlineHilite have  use_pygments  set to  False  or  noclasses  set to  True .  Pygments is not installed on the system.    This setting is used to configure which installed Pygments theme PyMdown should insert into your HTML template.  # Name of installed Pygments style to use.  pygments_style :   default   This determines what class will be prepended to all of the Pygment s CSS theme.  # Pygments class to use.  This applies a class to the Pygments CSS  # so that only elements with the class below will be syntax highlighted.  # If using this, make sure you ve configured CodeHilite and/or InlineHilite  # to use the same name.  pygments_class :   highlight    Tip  If you want to use a JavaScript highlighter such as  highlight.js , you should disable  use_pygments_css , and set  use_pygments  to  False  in CodeHilite and/or InlineHilite.   Template  PyMdown allows for specifying a simple HTML template that can be used for the output.  Template files can be specified in the settings file via the  template  keyword.  # Your HTML template  # PyMdown will look relative to the binary if it can t find the file.  template :   default/template.html   Template files in the settings or frontmatter can be followed by  ;encoding  to cause the file to be opened and read with the specified encoding.  The template file uses Jinja2 to handle template variables.  Please see  Templating  for more info on how to access page data in a template.  Javascript and CSS  Javascript and CSS can be included in the template by adding them to the following arrays:  # Select your CSS for you output html  # or you can have it all contained in your HTML template  #  # Is an array of stylesheets (path or link).  # If it points to a physical file, it will be included.  # PyMdown will look relative to the binary if it can t find the file.  #  # This can be overridden in a file s frontmatter via the  settings  key word:  #  # ---  # settings:  #   css:  #     - somefile.css  # ---  #  # but if you want to append to the list, you can use just the  css  keyword in the  # frontmatter:  #  # ---  # css:  #   - somefile.css  # ---  #  css :  -   ^default/markdown.css  # Load up js scripts (in head)  #  # Is an array of scripts (path or link).  # If it points to a physical file, it will be included.  # PyMdown will look relative to the binary if it can t find the file.  #  # This can be overridden in a file s frontmatter via the  settings  key word:  #  # ---  # settings:  #   js:  #     - somefile.js  # ---  #  # but if you want to append to the list, you can use just the  js  keyword in the  # frontmatter:  #  # ---  # js:  #   - somefile.js  # ---  #  js :   []   CSS files and JavaScript files can be URLs or file paths.  When specifying a file path, a  !  can be used to precede the path so that PyMdown will just link the file and skip converting the file to an absolute or relative path.  If the file path is preceded by a  ^ , the file content will be embedded in the HTML under a style or script tag depending on the source type.  CSS and JavaScript files can also be followed by  ;encoding  to read in the file with the specified encoding.  Enabling Jinja2 Templating in Markdown Content  If desired, Jinja2 templating can be enabled in Markdown content.  While Jinja2 usage in Markdown content can be enabled globally, it is recommended to enable it in specific pages via the YAML frontmatter.  # Enable Jinja2 Template support inside of Markdown content  use_jinja2 :   false   You can also control the tag style if you find the default difficult to use within your content either globally in your settings file, or in your page s YAML frontmatter.  # By default, Jinja2 uses {% block %} for blocks. You can change that here  # or change it per file in your frontmatter. Only affects Markdown content template tags.  jinja2_block :   [ {% ,   %} ]  # By default, Jinja2 uses {{ variable }} for variables. You can change that here  # or change it per file in your frontmatter. Only affects Markdown content template tags.  jinja2_variable :   [ {{ ,   }} ]  # By default, Jinja2 uses {# comment #} for comments. You can change that here  # or change it per file in your frontmatter. Only affects Markdown content template tags.  jinja2_comment :   [ {# ,   #} ]   See  Templating  to learn more about accessing these template variables.  Path Conversions  By default, PyMdown converts paths to be relative to the output location.  If desired, this can be changed to an absolute path:  # By default resource paths are converted to relative file paths when possible;  # this disables conversion.  path_conversion_absolute :   false   If path conversion is not wanted, and disabling the conversion inline with the  !  token is not acceptable, path conversion can be completely disabled with the following setting:  # By default resource paths are converted to relative file paths when possible;  # this disables conversion.  Previews will still convert paths to render preview proper.  disable_path_conversion :   false    Note  PyMdown utilizes the  pathconverter  extension to convert links and references in the actual markdown content.  If  pathconverter  is manually configured instead of letting PyMdown handle it, these settings will have no effect.  The other exception is with previews.  In order for links and references to work in previews, they must be paths that are relative to the preview s temp directory or they must be absolute paths.  For this reason, PyMdown will always enable path conversions for previews.  If you have manually set up the  pathconverter  extension, preview s will overwrite the  relative_path  argument to ensure it is set to  ${OUTPUT}  which will allow the preview to display content properly by making asset paths relative to the previews location.  By default, the  relative_path  is set to  ${REL_PATH}  which is the output path by default, but can be altered via the command line option  --relpath  or the  relpath  frontmatter option.   Python Markdown Extensions  Extensions to be used are defined under the  markdown_extensions  keyword.   markdown_extensions  is an ordered key/value pair. An extension has a name followed by  :  in yaml format.  If you want to include settings parameters, you can include those as the extension value.  All parameters should be done as key/value pairs as shown below.  markdown_extensions : \n   markdown.extensions.extra : \n   markdown.extensions.toc : \n     title :   Table of Contents \n     slugify :   ${SLUGIFY} \n   markdown.extensions.codehilite : \n     guess_lang :   false \n   markdown.extensions.smarty : \n   markdown.extensions.wikilinks : \n   markdown.extensions.admonition : \n   markdown.extensions.nl2br : \n   pymdown.pymdown : \n   pymdown.b64 : \n     base_path :   ${BASE_PATH} \n   pymdown.critic :   There are a couple of special variables you can use in extension settings:     Name  Description      ${BASE_PATH}  Insert the base path from command line or frontmatter.    ${REL_PATH}  Insert the relative path from command line or frontmatter.    ${OUTPUT}  Insert the output path (or destination) from command line or frontmatter.    ${SLUGIFY}  Use PyMdown s internal slugify method which provides a more unique header id for headers that have Unicode characters.  Python Markdown s internal slugify just strips them out, while PyMdown will give a percent encoding of the Unicode characters.", 
            "title": "Configuration File"
        }, 
        {
            "location": "/user-guide/general-usage/#frontmatter", 
            "text": "Frontmatter can be used at the very beginning of a Markdown file.  Frontmatter blocks begin with  ---  and end with  --- .  Frontmatter must be the very beginning of the file and start on the very first line.  PyMdown frontmatter content must be in the YAML format.  The frontmatter is a dictionary of key value pairs which will either be available in templates and/or used to set some functionality or setting per page.  ---\ntitle: My Title\nauthor: My Name\netc: You get the idea\n---\n### Markdown Header\nMarkdown content.  PyMdown has a few special keywords that can be defined to alter the output.  All other keys will be counted as user variables.     Keyword  Description      title  This item is used in the HTML s title tag.    destination  This keyword is the location and file name were the output should be placed.    basepath  This is used to specify the path that PyMdown should use to look for reference material like CSS or JS files and even  references  defined in the frontmatter. It is also used in plugins such as  pathconverter  and  b64 .  This can override the  basepath  fed in at the command line.    relpath  This is used to specify the path that images and paths are relative to. It is used in plugins such as  pathconverter .  This can override the  relpath  fed in at the command line.    css  This keyword s value is an array of strings denoting additional single CSS files to include.  They follow the same convention as CSS defined in the settings file:  ;encoding  at tail will define the encoding used to access the file, paths starting with  !  will not have their path converted to absolute or relative paths, and  ^  will directly embed the content in the HTML file.    js  This keyword s value is an array of strings denoting additional single JavaScript files to include.  They follow the same convention as JavaScript defined in the settings file:  ;encoding  at tail will define the encoding used to access the file, paths starting with  !  will not have their path converted to absolute or relative paths, and  ^  will directly embed the content in the HTML file.    settings  This is a dictionary and allows the overriding of any of the settings found in the original configuration file.     See  Templating  to learn more about accessing these values in your HTML template.  Custom Frontmatter  If the keyword is not one of the special keywords defined above, they will automatically be available in the template variables under  extra", 
            "title": "Frontmatter"
        }, 
        {
            "location": "/user-guide/general-usage/#templating", 
            "text": "Templates are HTML files that use  Jinja2  templating syntax.  Template variables and logic is used in the HTML templates.  If desired, Jinja2 templating can be enabled in the Markdown content by with the following syntax:  settings : \n   use_jinja2   It is up to the user to escape content that must be escaped. If desired, the brackets for a given page can be changed with the following frontmatter:  settings : \n   jinja2_block :   [ {% ,   %} ] \n   jinja2_variable :   [ {{ ,   }} ] \n   jinja2_comment :   [ {# ,   #} ]   Template data is found under three variables:     Variable  Description      page  Data related to the specific page.    extra  This contains user defined variables.  These can come from the settings file under the  extra  keyword, or any non-default keyword found in the frontmatter. Extra can contain any content and structure the user specifies.    settings  This is the the settings used for the page.  It contains the merged state of the settings from the settings file and frontmatter.  The values will also contained final adjusted states if any had to be made.     Page Variables  The page variable contains the page specific variables.     Variables  Description      page.title  The title for the page (escaped).    page.encoding  The specified encoding for the HTML page.    page.content  The HTML content from the markdown source.    page.js  An array of JavaScript files or links that were specified to be include.  File paths may contain special markers such as  ^  and  !  at the beginning to specify to embed the content directly or not to convert path respectively. File paths may also include encoding specifiers at the end in the form  ;encoding . Special  template filters  have been provided to process these files and links and return either the links or contents as intended. Returns will be wrapped in their appropriate tags.    page.css  An array of CSS files or links that were specified to be include.  File paths may contain special markers such as  ^  and  !  at the beginning to specify to embed the content directly or not to convert path respectively. File paths may also include encoding specifiers at the end in the form  ;encoding . Special  template filters  have been provided to process these files and links and return either the links or contents as intended. Returns will be wrapped in their appropriate tags.    page.basepath  Basepath used as a reference point to find other files.    page.relpath  Relative path that the page may have used to calculate paths for links etc.    page.destination  The output location for the file.    page.pygments_style  Will contain the Pygments style CSS content to embed in the page. If this option has been disabled for any reason, it will be null.     Template Filters  The template environment contains all the normal default Jinja2 filters and a couple of extras.  Embedding Images   embedimage(image_path)   Given the path, embed the image directly into the HTML with base64 encoding.  Image paths are resolved relative to the base path.  Example  {{   path / to / image.png | embedimage   }}     Get CSS   getcss([files])   Given a single file or array of files, resolve the file path and either embed the content of the file(s) or provide a link(s) as specified in the settings, frontmatter, or inline with appropriate PyMdown notation.  Example  {# Include css link #}  {{   page.css | getcss   }}   {# Do not convert path for CSS link #}  {{   !path/to/css/file.css | getcss   }}   {# Embed file content #}  {{   ^path/to/css/file.css | getcss   }}     Get JavaScript   getjs([files])   Given a single file or array of files, resolve the file path and either embed the content of the file(s) or provide a link(s) as specified in the settings, frontmatter, or inline with appropriate PyMdown notation.  Example  {# Include JS link #}  {{   page.js | getjs   }}   {# Do not convert path for JS link #}  {{   !path/to/js/file.js;utf-8 | getjs   }}   {# Embed file content #}  {{   ^path/to/js/file.js;utf-8 | getjs   }}     Get Text   gettxt([files])   Given a single file or array of files, resolve the file path and embed the content of the file(s).  Example  {# Embed text content #}  {{   some/path/to.txt | gettxt   }}     Get Path   getpath(path)   Given a path, adjust with internal base path and relative path settings to return the desired path.  Example  {{   path/to/something | getpath }}     Get Path URL   getpathurl(path)   Given a path, adjust with the internal base path and relative path settings to return the desired path, but also encode it for a URL; path will be quoted (quotes converted for placement in an HTML attribute).  Example  img   src= {{   assets/some/image.png | getpathurl   }} /     Get Meta   getmeta(value, name= name )   Given the value and name, return a simple meta tag:  meta   name= name   value= value .   value  can be either a single string or array of strings; if an array, the values will be joined with  , .  Example  {{   extra.author | getmeta ( name = author )   }}", 
            "title": "Templating"
        }, 
        {
            "location": "/user-guide/pygments-customization/", 
            "text": "Pygments Customization\n\n\nAdding Pygments themes.\n\n\n\n\nOverview\n\n\nPygments allows for people to write their own lexers and styles, but they need to have an entry point of \npygments.lexers\n or \npygments.styles\n for the respective plugin type.  This can only be done by either directly adding your plugin to the Pygments package, or creating and installing your own package that defines the entry points as mentioned.  If you know how to create your own package and install it, PyMdown should be able to use it.\n\n\nCreate Your Own Pygments Styles and Lexers\n\n\nPyMdown comes with a couple of optional \nstyles\n and \nlexers\n that can be included.  They don\nt offer anything that is \nneeded\n, but you can use these two repositories as an example.\n\n\nOnce the lexer or style is written, you have to edit the \n__init__.py\n file and expose your module (style example shown below):\n\n\nfrom\n \n.tomorrow\n \nimport\n \nTomorrowStyle\n\n\nfrom\n \n.tomorrownight\n \nimport\n \nTomorrownightStyle\n\n\nfrom\n \n.tomorrownightblue\n \nimport\n \nTomorrownightblueStyle\n\n\nfrom\n \n.tomorrownightbright\n \nimport\n \nTomorrownightbrightStyle\n\n\nfrom\n \n.tomorrownighteighties\n \nimport\n \nTomorrownighteightiesStyle\n\n\nfrom\n \n.github\n \nimport\n \nGithubStyle\n\n\nfrom\n \n.github2\n \nimport\n \nGithub2Style\n\n\n\n\n\n\nThen edit the \nsetup.py\n file and define the entry point (style example shown below):\n\n\nfrom\n \nsetuptools\n \nimport\n \nsetup\n,\n \nfind_packages\n\n\n\nentry_points\n \n=\n \n\n\n[pygments.styles]\n\n\ngithub=pymdown_styles:GithubStyle\n\n\ngithub2=pymdown_styles:Github2Style\n\n\ntomorrow=pymdown_styles:TomorrowStyle\n\n\ntomorrownight=pymdown_styles:TomorrownightStyle\n\n\ntomorrownightblue=pymdown_styles:TomorrownightblueStyle\n\n\ntomorrownightbright=pymdown_styles:TomorrownightbrightStyle\n\n\ntomorrownighteighties=pymdown_styles:TomorrownighteightiesStyle\n\n\n\n\n\nsetup\n(\n\n    \nname\n=\npymdown-styles\n,\n\n    \nversion\n=\n1.0\n,\n\n    \npackages\n=\nfind_packages\n(),\n\n    \nentry_points\n=\nentry_points\n,\n\n    \nzip_safe\n=\nTrue\n\n\n)", 
            "title": "Pygments Customization"
        }, 
        {
            "location": "/user-guide/pygments-customization/#pygments-customization", 
            "text": "Adding Pygments themes.", 
            "title": "Pygments Customization"
        }, 
        {
            "location": "/user-guide/pygments-customization/#overview", 
            "text": "Pygments allows for people to write their own lexers and styles, but they need to have an entry point of  pygments.lexers  or  pygments.styles  for the respective plugin type.  This can only be done by either directly adding your plugin to the Pygments package, or creating and installing your own package that defines the entry points as mentioned.  If you know how to create your own package and install it, PyMdown should be able to use it.", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/pygments-customization/#create-your-own-pygments-styles-and-lexers", 
            "text": "PyMdown comes with a couple of optional  styles  and  lexers  that can be included.  They don t offer anything that is  needed , but you can use these two repositories as an example.  Once the lexer or style is written, you have to edit the  __init__.py  file and expose your module (style example shown below):  from   .tomorrow   import   TomorrowStyle  from   .tomorrownight   import   TomorrownightStyle  from   .tomorrownightblue   import   TomorrownightblueStyle  from   .tomorrownightbright   import   TomorrownightbrightStyle  from   .tomorrownighteighties   import   TomorrownighteightiesStyle  from   .github   import   GithubStyle  from   .github2   import   Github2Style   Then edit the  setup.py  file and define the entry point (style example shown below):  from   setuptools   import   setup ,   find_packages  entry_points   =    [pygments.styles]  github=pymdown_styles:GithubStyle  github2=pymdown_styles:Github2Style  tomorrow=pymdown_styles:TomorrowStyle  tomorrownight=pymdown_styles:TomorrownightStyle  tomorrownightblue=pymdown_styles:TomorrownightblueStyle  tomorrownightbright=pymdown_styles:TomorrownightbrightStyle  tomorrownighteighties=pymdown_styles:TomorrownighteightiesStyle   setup ( \n     name = pymdown-styles , \n     version = 1.0 , \n     packages = find_packages (), \n     entry_points = entry_points , \n     zip_safe = True  )", 
            "title": "Create Your Own Pygments Styles and Lexers"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nVersion being used.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.\n\n\nRunning Validation Tests\n\n\n\n\n\n\nMake sure that \ntox\n is intalled:\n\n\npip install tox\n\n\n\n\n\n\n\n\n\nRun tox:\n\n\ntox\n\n\n\n\n\nTox should install necessary dependencies and run the tests.\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Suppport"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Version being used.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  Running Validation Tests    Make sure that  tox  is intalled:  pip install tox    Run tox:  tox  Tox should install necessary dependencies and run the tests.", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this tool and related extensions, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the tool and/or extensions by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nMIT license.\n\n\nCopyright \n 2014 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n3\nrd\n Party Licenses\n\n\nSee \nlicenses\n.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "MIT license.  Copyright   2014 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#3rd-party-licenses", 
            "text": "See  licenses .", 
            "title": "3rd Party Licenses"
        }
    ]
}