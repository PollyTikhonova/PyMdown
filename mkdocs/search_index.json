{
    "docs": [
        {
            "location": "/", 
            "text": "PyMdown\n\n\nA Python Markdown Preview and Converter Tool\n\n\n\n\n\n\nUnder Construction\n\n\nThis documentation is currently under construction, and things are subject to change.\n\n\n\n\nOverview\n\n\nPyMdown is a CLI tool to convert or even batch convert Markdown files to HTML.  It can also generate HTML previews of Markdown and auto-open them in a web browser. It allows for specifying simple HTML templates for the Markdown where you can include CSS and JavaScript.  PyMdown is built on top of \nPython Markdown\n and \nPygments\n.\n\n\n\n\n\n\n\n\nBasic Markdown Syntax\n\n\nas laid out by \nMark Gruber\n\n\n\n\nPython Markdown Differences\n\n\nout of the box differences (no extensions)\n\n\n\n\nPyMdown Extensions\n\n\nextensions made specifically for PyMdown\n\n\n\n\nPython Markdown Extensions\n\n\nextensions that come with Python Markdown\n\n\n\n\nPyMdown Usage\n\n\nhow to use the PyMdown application\n\n\n\n\nPyMdown Build/Installation\n\n\nhow to build and install PyMdown\n\n\n\n\nSublime Plugin\n\n\nplugin for Sublime Text 3\n\n\n\n\nCustom Lexers and Styles\n\n\nhow to include custom lexers and styes", 
            "title": "Home"
        }, 
        {
            "location": "/#pymdown", 
            "text": "A Python Markdown Preview and Converter Tool    Under Construction  This documentation is currently under construction, and things are subject to change.", 
            "title": "PyMdown"
        }, 
        {
            "location": "/#overview", 
            "text": "PyMdown is a CLI tool to convert or even batch convert Markdown files to HTML.  It can also generate HTML previews of Markdown and auto-open them in a web browser. It allows for specifying simple HTML templates for the Markdown where you can include CSS and JavaScript.  PyMdown is built on top of  Python Markdown  and  Pygments .     Basic Markdown Syntax  as laid out by  Mark Gruber   Python Markdown Differences  out of the box differences (no extensions)   PyMdown Extensions  extensions made specifically for PyMdown   Python Markdown Extensions  extensions that come with Python Markdown   PyMdown Usage  how to use the PyMdown application   PyMdown Build/Installation  how to build and install PyMdown   Sublime Plugin  plugin for Sublime Text 3   Custom Lexers and Styles  how to include custom lexers and styes", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/installation/", 
            "text": "Installation\n\n\nInstallation of PyMdown.\n\n\n\n\nOverview\n\n\nPyMdown can be downloaded and installed via \npython setup.py build\n and \npython setup.py install\n,after which a command line utility (pymdown) will be made available.  You can also use \nPyinstaller\n to build a binary as well; the procedure for this is outlined \nbelow\n.  You can also just run it directly if you have the necessary \nrequirements\n installed.\n\n\nRequirements\n\n\nIn order for PyMdown to work, there are a couple of prerequisites.  If installing via the \npython setup.py install\n method, required dependencies should get installed automatically.\n\n\n\n\n\n\n\n\nName\n\n\nRequired\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nPython Markdown 2.6.0+\n\n\nYes\n\n\nPython Markdown must be installed as it is the Markdown parser that is being used.\n\n\n\n\n\n\nPyMdown Extensions\n\n\nYes\n\n\nExtensions for PyMdown.\n\n\n\n\n\n\nPyYaml 3.10+\n\n\nYes\n\n\nOlder versions may work, but I am arbitrarily specifying 3.10 as the earliest I am aware of that works.\n\n\n\n\n\n\nPygments 2.0.1+ (optional)\n\n\nNo\n\n\nIf Pygments Syntax highlighting is desired, Pygments must be installed.  This can be omitted, and code blocks (if using the CodeHilite extension) will be formatter for use with JavaScript code highlighters.\n\n\n\n\n\n\nPyMdown Styles\n\n\nNo\n\n\nOptional package that adds a couple of custom Pygments styles. This is not required, but is a great example if you want to create your own style package.\n\n\n\n\n\n\nPyMdown Lexers\n\n\nNo\n\n\nOptional package that adds a couple of non-standard lexers, but nothing of substantial interest. This is a great example for adding your own custom lexers.\n\n\n\n\n\n\n\n\nInstallation\n\n\nYou can download PyMdown and run it as a script bundle, or build and copy the binary in your path.  To install the traditional way, run \npython setup.py build\n and \npython setup.py install\n.  You should be able to access PyMdown from the command line via \npymdown\n or \npymdownX.X\n where \nX.X\n is your python version.  PyMdown on the first run will unpack user files to \n~\\.PyMdown\n on Windows, \n~/.PyMdown\n on OSX and \n~/.config/PyMdown\n on Linux.\n\n\nBuild\n\n\nIf building, you will need to download the latest PyInstaller from \nGithub\n.  Just unzip the content into the root of the PyMdown project and ensure the main folder is named \npyinstaller\n.  Then, from PyMdown\ns root directory, run \npython build -c\n.  The binary should be created in the \ndist\n folder.  This is regularly tested on Windows 7 and OSX 10.10.  Linux may require some playing around if it doesn\nt work out of the box.\n\n\n\n\nNote\n\n\nIn the future, I do plan on allowing this run from an installed Pyinstaller opposed to a version copied into the project, but currently I don\nt support it mainly because on Windows I build with a portable Python (WinPython), and I haven\nt spent any time yet to get it running proper without having it copied in the project.", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/installation/#installation", 
            "text": "Installation of PyMdown.", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/installation/#overview", 
            "text": "PyMdown can be downloaded and installed via  python setup.py build  and  python setup.py install ,after which a command line utility (pymdown) will be made available.  You can also use  Pyinstaller  to build a binary as well; the procedure for this is outlined  below .  You can also just run it directly if you have the necessary  requirements  installed.", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/installation/#requirements", 
            "text": "In order for PyMdown to work, there are a couple of prerequisites.  If installing via the  python setup.py install  method, required dependencies should get installed automatically.     Name  Required  Details      Python Markdown 2.6.0+  Yes  Python Markdown must be installed as it is the Markdown parser that is being used.    PyMdown Extensions  Yes  Extensions for PyMdown.    PyYaml 3.10+  Yes  Older versions may work, but I am arbitrarily specifying 3.10 as the earliest I am aware of that works.    Pygments 2.0.1+ (optional)  No  If Pygments Syntax highlighting is desired, Pygments must be installed.  This can be omitted, and code blocks (if using the CodeHilite extension) will be formatter for use with JavaScript code highlighters.    PyMdown Styles  No  Optional package that adds a couple of custom Pygments styles. This is not required, but is a great example if you want to create your own style package.    PyMdown Lexers  No  Optional package that adds a couple of non-standard lexers, but nothing of substantial interest. This is a great example for adding your own custom lexers.", 
            "title": "Requirements"
        }, 
        {
            "location": "/user-guide/installation/#installation_1", 
            "text": "You can download PyMdown and run it as a script bundle, or build and copy the binary in your path.  To install the traditional way, run  python setup.py build  and  python setup.py install .  You should be able to access PyMdown from the command line via  pymdown  or  pymdownX.X  where  X.X  is your python version.  PyMdown on the first run will unpack user files to  ~\\.PyMdown  on Windows,  ~/.PyMdown  on OSX and  ~/.config/PyMdown  on Linux.", 
            "title": "Installation"
        }, 
        {
            "location": "/user-guide/installation/#build", 
            "text": "If building, you will need to download the latest PyInstaller from  Github .  Just unzip the content into the root of the PyMdown project and ensure the main folder is named  pyinstaller .  Then, from PyMdown s root directory, run  python build -c .  The binary should be created in the  dist  folder.  This is regularly tested on Windows 7 and OSX 10.10.  Linux may require some playing around if it doesn t work out of the box.   Note  In the future, I do plan on allowing this run from an installed Pyinstaller opposed to a version copied into the project, but currently I don t support it mainly because on Windows I build with a portable Python (WinPython), and I haven t spent any time yet to get it running proper without having it copied in the project.", 
            "title": "Build"
        }, 
        {
            "location": "/user-guide/markdown-syntax/", 
            "text": "Markdown Syntax\n\n\nMark Gruber\ns Markdown syntax.\n\n\n\n\n\n\nNote\n\n\nThis documentation lays out the syntax of Mark Gruber\ns Markdown specifications.  It is taken from his \nsite\n.  The content and info is his words, but it is here for convenience.\n\n\n\n\nOverview\n\n\nPhilosophy\n\n\nMarkdown is intended to be as easy-to-read and easy-to-write as is feasible.\n\n\nReadability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it\ns been marked up with tags or formatting instructions. While Markdown\ns syntax has been influenced by several existing text-to-HTML filters \n including \nSetext\n, \natx\n, \nTextile\n, \nreStructuredText\n,\n\n\nGrutatext\n, and \nEtText\n \n the single biggest source of inspiration for Markdown\ns syntax is the format of plain text email.\n\n\nTo this end, Markdown\ns syntax is comprised entirely of punctuation characters, which punctuation characters have been carefully chosen so as to look like what they mean. E.g., asterisks around a word actually look like *emphasis*. Markdown lists look like, well, lists. Even blockquotes look like quoted passages of text, assuming you\nve ever used email.\n\n\nInline HTML\n\n\nMarkdown\ns syntax is intended for one purpose: to be used as a format for \nwriting\n for the web.\n\n\nMarkdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags. The idea is \nnot\n to create a syntax that makes it easier to insert HTML tags. In my opinion, HTML tags are already easy to insert. The idea for Markdown is to make it easy to read, write, and edit prose. HTML is a \npublishing\n format; Markdown is a \nwriting\n format. Thus, Markdown\ns formatting syntax only addresses issues that can be conveyed in plain text.\n\n\nFor any markup that is not covered by Markdown\ns syntax, you simply use HTML itself. There\ns no need to preface it or delimit it to indicate that you\nre switching from Markdown to HTML; you just use the tags.\n\n\nThe only restrictions are that block-level HTML elements \n e.g. \ndiv\n, \ntable\n, \npre\n, \np\n, etc. \n must be separated from surrounding content by blank lines, and the start and end tags of the block should not be indented with tabs or spaces. Markdown is smart enough not to add extra (unwanted) \np\n tags around HTML block-level tags.\n\n\nFor example, to add an HTML table to a Markdown article:\n\n\nThis is a regular paragraph.\n\n\ntable\n\n    \ntr\n\n        \ntd\nFoo\n/td\n\n    \n/tr\n\n\n/table\n\n\nThis is another regular paragraph.\n\n\n\n\n\nNote that Markdown formatting syntax is not processed within block-level HTML tags. E.g., you can\nt use Markdown-style \n*emphasis*\n inside an HTML block.\n\n\nSpan-level HTML tags \n e.g. \nspan\n, \ncite\n, or \ndel\n \n can be used anywhere in a Markdown paragraph, list item, or header. If you want, you can even use HTML tags instead of Markdown formatting; e.g. if you\nd prefer to use HTML \na\n or \nimg\n tags instead of Markdown\ns link or image syntax, go right ahead.\n\n\nUnlike block-level HTML tags, Markdown syntax \nis\n processed within span-level tags.\n\n\nAutomatic Escaping for Special Characters\n\n\nIn HTML, there are two characters that demand special treatment: \n and \n. Left angle brackets are used to start tags; ampersands are used to denote HTML entities. If you want to use them as literal characters, you must escape them as entities, e.g. \nlt;\n, and \namp;\n.\n\n\nAmpersands in particular are bedeviling for web writers. If you want to write about \nAT\nT\n, you need to write \nAT\namp;T\n. You even need to escape ampersands within URLs. Thus, if you want to link to:\n\n\nhttp://images.google.com/images?num=30\nq=larry+bird\n\n\n\n\n\nyou need to encode the URL as:\n\n\nhttp://images.google.com/images?num=30\namp;q=larry+bird\n\n\n\n\n\nin your anchor tag \nhref\n attribute. Needless to say, this is easy to forget, and is probably the single most common source of HTML validation errors in otherwise well-marked-up web sites.\n\n\nMarkdown allows you to use these characters naturally, taking care of all the necessary escaping for you. If you use an ampersand as part of an HTML entity, it remains unchanged; otherwise it will be translated into \namp;\n.\n\n\nSo, if you want to include a copyright symbol in your article, you can write:\n\n\ncopy;\n\n\n\n\n\nand Markdown will leave it alone. But if you write:\n\n\nAT\nT\n\n\n\n\n\nMarkdown will translate it to:\n\n\nAT\namp;T\n\n\n\n\n\nSimilarly, because Markdown supports \ninline HTML\n, if you use angle brackets as delimiters for HTML tags, Markdown will treat them as such. But if you write:\n\n\n4 \n 5\n\n\n\n\n\nMarkdown will translate it to:\n\n\n4 \nlt; 5\n\n\n\n\n\nHowever, inside Markdown code spans and blocks, angle brackets and ampersands are \nalways\n encoded automatically. This makes it easy to use Markdown to write about HTML code. (As opposed to raw HTML, which is a terrible format for writing about HTML syntax, because every single \n and \n in your example code needs to be escaped.)\n\n\n\n\nBlock Elements\n\n\nParagraphs and Line Breaks\n\n\nA paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line \n a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.\n\n\nThe implication of the \none or more consecutive lines of text\n rule is that Markdown supports \nhard-wrapped\n text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type\ns \nConvert Line Breaks\n option) which translate every line break character in a paragraph into a \nbr /\n tag.\n\n\nWhen you \ndo\n want to insert a \nbr /\n break tag using Markdown, you end a line with two or more spaces, then type return.\n\n\nYes, this takes a tad more effort to create a \nbr /\n, but a simplistic \nevery line break is a \nbr /\n rule wouldn\nt work for Markdown. Markdown\ns email-style \nblockquoting\n and multi-paragraph \nlist items\n work best \n and look better \n when you format them with hard breaks.\n\n\nHeaders\n\n\nMarkdown supports two styles of headers, \nSetext\n and \natx\n.\n\n\nSetext-style headers are \nunderlined\n using equal signs (for first-level headers) and dashes (for second-level headers). For example:\n\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n\n\n\n\nAny number of underlining \n=\ns or \n-\ns will work.\n\n\nAtx-style headers use 1-6 hash characters at the start of the line, corresponding to header levels 1-6. For example:\n\n\n# This is an H1\n\n## This is an H2\n\n###### This is an H6\n\n\n\n\n\nOptionally, you may \nclose\n atx-style headers. This is purely cosmetic \n you can use this if you think it looks better. The closing hashes don\nt even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.) :\n\n\n# This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######\n\n\n\n\n\nBlockquotes\n\n\nMarkdown uses email-style \n characters for blockquoting. If you\nre familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a \n before every line:\n\n\n This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n \n\n Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nMarkdown allows you to be lazy and only put the \n before the first line of a hard-wrapped paragraph:\n\n\n This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n\n\n Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nBlockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of \n:\n\n\n This is the first level of quoting.\n\n\n\n \n This is nested blockquote.\n\n\n\n Back to the first level.\n\n\n\n\n\nBlockquotes can contain other Markdown elements, including headers, lists, and code blocks:\n\n\n ## This is a header.\n\n \n\n 1.   This is the first list item.\n\n 2.   This is the second list item.\n\n \n\n Here\ns some example code:\n\n \n\n     return shell_exec(\necho $input | $markdown_script\n);\n\n\n\n\n\nAny decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.\n\n\nLists\n\n\nMarkdown supports ordered (numbered) and unordered (bulleted) lists.\n\n\nUnordered lists use asterisks, pluses, and hyphens \n interchangably\n\n\n as list markers:\n\n\n*   Red\n*   Green\n*   Blue\n\n\n\n\n\nis equivalent to:\n\n\n+   Red\n+   Green\n+   Blue\n\n\n\n\n\nand:\n\n\n-   Red\n-   Green\n-   Blue\n\n\n\n\n\nOrdered lists use numbers followed by periods:\n\n\n1.  Bird\n2.  McHale\n3.  Parish\n\n\n\n\n\nIt\ns important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:\n\n\nol\n\n\nli\nBird\n/li\n\n\nli\nMcHale\n/li\n\n\nli\nParish\n/li\n\n\n/ol\n\n\n\n\n\n\nIf you instead wrote the list in Markdown like this:\n\n\n1.  Bird\n1.  McHale\n1.  Parish\n\n\n\n\n\nor even:\n\n\n3. Bird\n1. McHale\n8. Parish\n\n\n\n\n\nyou\nd get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don\nt have to.\n\n\nIf you do use lazy list numbering, however, you should still start the list with the number 1. At some point in the future, Markdown may support starting ordered lists at an arbitrary number.\n\n\nList markers typically start at the left margin, but may be indented by up to three spaces. List markers must be followed by one or more spaces or a tab.\n\n\nTo make lists look nice, you can wrap items with hanging indents:\n\n\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nBut if you want to be lazy, you don\nt have to:\n\n\n*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nIf list items are separated by blank lines, Markdown will wrap the\n\nitems in \np\n tags in the HTML output. For example, this input:\n\n\n*   Bird\n*   Magic\n\n\n\n\n\nwill turn into:\n\n\nul\n\n\nli\nBird\n/li\n\n\nli\nMagic\n/li\n\n\n/ul\n\n\n\n\n\n\nBut this:\n\n\n*   Bird\n\n*   Magic\n\n\n\n\n\nwill turn into:\n\n\nul\n\n\nli\np\nBird\n/p\n/li\n\n\nli\np\nMagic\n/p\n/li\n\n\n/ul\n\n\n\n\n\n\nList items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:\n\n\n1.  This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.\n\n\n\n\n\nIt looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:\n\n\n*   This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You\nre only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n\n*   Another item in the same list.\n\n\n\n\n\nTo put a blockquote within a list item, the blockquote\ns \n delimiters need to be indented:\n\n\n*   A list item with a blockquote:\n\n    \n This is a blockquote\n    \n inside a list item.\n\n\n\n\n\nTo put a code block within a list item, the code block needs to be indented \ntwice\n \n 8 spaces or two tabs:\n\n\n*   A list item with a code block:\n\n        \ncode goes here\n\n\n\n\n\n\nIt\ns worth noting that it\ns possible to trigger an ordered list by accident, by writing something like this:\n\n\n1986. What a great season.\n\n\n\n\n\nIn other words, a \nnumber-period-space\n sequence at the beginning of a line. To avoid this, you can backslash-escape the period:\n\n\n1986\\. What a great season.\n\n\n\n\n\nCode Blocks\n\n\nPre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both \npre\n and \ncode\n tags.\n\n\nTo produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab. For example, given this input:\n\n\nThis is a normal paragraph:\n\n    This is a code block.\n\n\n\n\n\nMarkdown will generate:\n\n\np\nThis is a normal paragraph:\n/p\n\n\n\npre\ncode\nThis is a code block.\n\n/code\n/pre\n\n\n\n\n\n\nOne level of indentation \n 4 spaces or 1 tab \n is removed from each line of the code block. For example, this:\n\n\nHere is an example of AppleScript:\n\n    tell application \nFoo\n\n        beep\n    end tell\n\n\n\n\n\nwill turn into:\n\n\np\nHere is an example of AppleScript:\n/p\n\n\n\npre\ncode\ntell application \nFoo\n\n    beep\nend tell\n\n/code\n/pre\n\n\n\n\n\n\nA code block continues until it reaches a line that is not indented (or the end of the article).\n\n\nWithin a code block, ampersands (\n) and angle brackets (\n and \n) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown \n just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:\n\n\n    \ndiv class=\nfooter\n\n        \ncopy; 2004 Foo Corporation\n    \n/div\n\n\n\n\n\n\nwill turn into:\n\n\npre\ncode\nlt;div class=\nfooter\ngt;\n    \namp;copy; 2004 Foo Corporation\n\nlt;/div\ngt;\n\n/code\n/pre\n\n\n\n\n\n\nRegular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it\ns also easy to use Markdown to write about Markdown\ns own syntax.\n\n\nHorizontal Rules\n\n\nYou can produce a horizontal rule tag (\nhr /\n) by placing three or more hyphens, asterisks, or underscores on a line by themselves. If you wish, you may use spaces between the hyphens or asterisks. Each of the following lines will produce a horizontal rule:\n\n\n* * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------\n\n\n\n\n\n\n\nSpan Elements\n\n\nLinks\n\n\nMarkdown supports two style of links: \ninline\n and \nreference\n.\n\n\nIn both styles, the link text is delimited by [square brackets].\n\n\nTo create an inline link, use a set of regular parentheses immediately after the link text\ns closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an \noptional\n title for the link, surrounded in quotes. For example:\n\n\nThis is [an example](http://example.com/ \nTitle\n) inline link.\n\n[This link](http://example.net/) has no title attribute.\n\n\n\n\n\nWill produce:\n\n\np\nThis is \na href=\nhttp://example.com/\n title=\nTitle\n\nan example\n/a\n inline link.\n/p\n\n\n\np\na href=\nhttp://example.net/\nThis link\n/a\n has no\ntitle attribute.\n/p\n\n\n\n\n\n\nIf you\nre referring to a local resource on the same server, you can use relative paths:\n\n\nSee my [About](/about/) page for details.\n\n\n\n\n\nReference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:\n\n\nThis is [an example][id] reference-style link.\n\n\n\n\n\nYou can optionally use a space to separate the sets of brackets:\n\n\nThis is [an example] [id] reference-style link.\n\n\n\n\n\nThen, anywhere in the document, you define your link label like this, on a line by itself:\n\n\n[id]: http://example.com/  \nOptional Title Here\n\n\n\n\n\n\nThat is:\n\n\n\n\nSquare brackets containing the link identifier (optionally indented from the left margin using up to three spaces);\n\n\nfollowed by a colon;\n\n\nfollowed by one or more spaces (or tabs);\n\n\nfollowed by the URL for the link;\n\n\noptionally followed by a title attribute for the link, enclosed in double or single quotes, or enclosed in parentheses.\n\n\n\n\nThe following three link definitions are equivalent:\n\n\n[foo]: http://example.com/  \nOptional Title Here\n\n[foo]: http://example.com/  \nOptional Title Here\n\n[foo]: http://example.com/  (Optional Title Here)\n\n\n\n\n\nNote:\n There is a known bug in Markdown.pl 1.0.1 which prevents single quotes from being used to delimit link titles.\n\n\nThe link URL may, optionally, be surrounded by angle brackets:\n\n\n[id]: \nhttp://example.com/\n  \nOptional Title Here\n\n\n\n\n\n\nYou can put the title attribute on the next line and use extra spaces or tabs for padding, which tends to look better with longer URLs:\n\n\n[id]: http://example.com/longish/path/to/resource/here\n    \nOptional Title Here\n\n\n\n\n\n\nLink definitions are only used for creating links during Markdown processing, and are stripped from your document in the HTML output.\n\n\nLink definition names may consist of letters, numbers, spaces, and punctuation \n but they are \nnot\n case sensitive. E.g. these two links:\n\n\n[link text][a]\n[link text][A]\n\n\n\n\n\nare equivalent.\n\n\nThe \nimplicit link name\n shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets \n e.g., to link the word \nGoogle\n to the google.com web site, you could simply write:\n\n\n[Google][]\n\n\n\n\n\nAnd then define the link:\n\n\n[Google]: http://google.com/\n\n\n\n\n\nBecause link names may contain spaces, this shortcut even works for multiple words in the link text:\n\n\nVisit [Daring Fireball][] for more information.\n\n\n\n\n\nAnd then define the link:\n\n\n[Daring Fireball]: http://daringfireball.net/\n\n\n\n\n\nLink definitions can be placed anywhere in your Markdown document. I tend to put them immediately after each paragraph in which they\nre used, but if you want, you can put them all at the end of your document, sort of like footnotes.\n\n\nHere\ns an example of reference links in action:\n\n\nI get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/        \nGoogle\n\n  [2]: http://search.yahoo.com/  \nYahoo Search\n\n  [3]: http://search.msn.com/    \nMSN Search\n\n\n\n\n\n\nUsing the implicit link name shortcut, you could instead write:\n\n\nI get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/        \nGoogle\n\n  [yahoo]:  http://search.yahoo.com/  \nYahoo Search\n\n  [msn]:    http://search.msn.com/    \nMSN Search\n\n\n\n\n\n\nBoth of the above examples will produce the following HTML output:\n\n\np\nI get 10 times more traffic from \na href=\nhttp://google.com/\n\ntitle=\nGoogle\nGoogle\n/a\n than from\n\na href=\nhttp://search.yahoo.com/\n title=\nYahoo Search\nYahoo\n/a\n\nor \na href=\nhttp://search.msn.com/\n title=\nMSN Search\nMSN\n/a\n.\n/p\n\n\n\n\n\n\nFor comparison, here is the same paragraph written using Markdown\ns inline link style:\n\n\nI get 10 times more traffic from [Google](http://google.com/ \nGoogle\n)\nthan from [Yahoo](http://search.yahoo.com/ \nYahoo Search\n) or\n[MSN](http://search.msn.com/ \nMSN Search\n).\n\n\n\n\n\nThe point of reference-style links is not that they\nre easier to write. The point is that with reference-style links, your document source is vastly more readable. Compare the above examples: using reference-style links, the paragraph itself is only 81 characters long; with inline-style links, it\ns 176 characters; and as raw HTML, it\ns 234 characters. In the raw HTML, there\ns more markup than there is text.\n\n\nWith Markdown\ns reference-style links, a source document much more closely resembles the final output, as rendered in a browser. By allowing you to move the markup-related metadata out of the paragraph, you can add links without interrupting the narrative flow of your prose.\n\n\nEmphasis\n\n\nMarkdown treats asterisks (\n*\n) and underscores (\n_\n) as indicators of emphasis. Text wrapped with one \n*\n or \n_\n will be wrapped with an HTML \nem\n tag; double \n*\ns or \n_\ns will be wrapped with an HTML \nstrong\n tag. E.g., this input:\n\n\n*single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__\n\n\n\n\n\nwill produce:\n\n\nem\nsingle asterisks\n/em\n\n\n\nem\nsingle underscores\n/em\n\n\n\nstrong\ndouble asterisks\n/strong\n\n\n\nstrong\ndouble underscores\n/strong\n\n\n\n\n\n\nYou can use whichever style you prefer; the lone restriction is that the same character must be used to open and close an emphasis span.\n\n\nEmphasis can be used in the middle of a word:\n\n\nun*frigging*believable\n\n\n\n\n\nBut if you surround an \n*\n or \n_\n with spaces, it\nll be treated as a literal asterisk or underscore.\n\n\nTo produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:\n\n\n\\*this text is surrounded by literal asterisks\\*\n\n\n\n\n\nCode\n\n\nTo indicate a span of code, wrap it with backtick quotes (\n`\n). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:\n\n\nUse the `printf()` function.\n\n\n\n\n\nwill produce:\n\n\np\nUse the \ncode\nprintf()\n/code\n function.\n/p\n\n\n\n\n\n\nTo include a literal backtick character within a code span, you can use multiple backticks as the opening and closing delimiters:\n\n\n``There is a literal backtick (`) here.``\n\n\n\n\n\nwhich will produce this:\n\n\np\ncode\nThere is a literal backtick (`) here.\n/code\n/p\n\n\n\n\n\n\nThe backtick delimiters surrounding a code span may include spaces \n one after the opening, one before the closing. This allows you to place literal backtick characters at the beginning or end of a code span:\n\n\nA single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``\n\n\n\n\n\nwill produce:\n\n\np\nA single backtick in a code span: \ncode\n`\n/code\n/p\n\n\n\np\nA backtick-delimited string in a code span: \ncode\n`foo`\n/code\n/p\n\n\n\n\n\n\nWith a code span, ampersands and angle brackets are encoded as HTML entities automatically, which makes it easy to include example HTML tags. Markdown will turn this:\n\n\nPlease don\nt use any `\nblink\n` tags.\n\n\n\n\n\ninto:\n\n\np\nPlease don\nt use any \ncode\nlt;blink\ngt;\n/code\n tags.\n/p\n\n\n\n\n\n\nYou can write this:\n\n\n`\n#8212;` is the decimal-encoded equivalent of `\nmdash;`.\n\n\n\n\n\nto produce:\n\n\np\ncode\namp;#8212;\n/code\n is the decimal-encoded\nequivalent of \ncode\namp;mdash;\n/code\n.\n/p\n\n\n\n\n\n\nImages\n\n\nAdmittedly, it\ns fairly difficult to devise a \nnatural\n syntax for placing images into a plain text document format.\n\n\nMarkdown uses an image syntax that is intended to resemble the syntax for links, allowing for two styles: \ninline\n and \nreference\n.\n\n\nInline image syntax looks like this:\n\n\n![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg \nOptional title\n)\n\n\n\n\n\nThat is:\n\n\n\n\nAn exclamation mark: \n!\n;\n\n\nfollowed by a set of square brackets, containing the \nalt\n attribute text for the image;\n\n\nfollowed by a set of parentheses, containing the URL or path to the image, and an optional \ntitle\n attribute enclosed in double or single quotes.\n\n\n\n\nReference-style image syntax looks like this:\n\n\n![Alt text][id]\n\n\n\n\n\nWhere \nid\n is the name of a defined image reference. Image references are defined using syntax identical to link references:\n\n\n[id]: url/to/image  \nOptional title attribute\n\n\n\n\n\n\nAs of this writing, Markdown has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML \nimg\n tags.\n\n\n\n\nMiscellaneous\n\n\nAutomatic Links\n\n\nMarkdown supports a shortcut style for creating \nautomatic\n links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:\n\n\nhttp://example.com/\n\n\n\n\n\n\nMarkdown will turn this into:\n\n\na href=\nhttp://example.com/\nhttp://example.com/\n/a\n\n\n\n\n\n\nAutomatic links for email addresses work similarly, except that Markdown will also perform a bit of randomized decimal and hex entity-encoding to help obscure your address from address-harvesting spambots. For example, Markdown will turn this:\n\n\naddress@example.com\n\n\n\n\n\n\ninto something like this:\n\n\na href=\n#x6D;\n#x61;i\n#x6C;\n#x74;\n#x6F;:\n#x61;\n#x64;\n#x64;\n#x72;\n#x65;\n\n#115;\n#115;\n#64;\n#101;\n#120;\n#x61;\n#109;\n#x70;\n#x6C;e\n#x2E;\n#99;\n#111;\n\n#109;\n#x61;\n#x64;\n#x64;\n#x72;\n#x65;\n#115;\n#115;\n#64;\n#101;\n#120;\n#x61;\n\n#109;\n#x70;\n#x6C;e\n#x2E;\n#99;\n#111;\n#109;\n/a\n\n\n\n\n\n\nwhich will render in a browser as a clickable link to \naddress@example.com\n.\n\n\n(This sort of entity-encoding trick will indeed fool many, if not most, address-harvesting bots, but it definitely won\nt fool all of them. It\ns better than nothing, but an address published in this way will probably eventually start receiving spam.)\n\n\nBackslash Escapes\n\n\nMarkdown allows you to use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown\ns formatting syntax. For example, if you wanted to surround a word with literal asterisks (instead of an HTML \nem\n tag), you can use backslashes before the asterisks, like this:\n\n\n\\*literal asterisks\\*\n\n\n\n\n\nMarkdown provides backslash escapes for the following characters:\n\n\n\\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+   plus sign\n-   minus sign (hyphen)\n.   dot\n!   exclamation mark", 
            "title": "Markdown Syntax"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#markdown-syntax", 
            "text": "Mark Gruber s Markdown syntax.    Note  This documentation lays out the syntax of Mark Gruber s Markdown specifications.  It is taken from his  site .  The content and info is his words, but it is here for convenience.", 
            "title": "Markdown Syntax"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#philosophy", 
            "text": "Markdown is intended to be as easy-to-read and easy-to-write as is feasible.  Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it s been marked up with tags or formatting instructions. While Markdown s syntax has been influenced by several existing text-to-HTML filters   including  Setext ,  atx ,  Textile ,  reStructuredText ,  Grutatext , and  EtText    the single biggest source of inspiration for Markdown s syntax is the format of plain text email.  To this end, Markdown s syntax is comprised entirely of punctuation characters, which punctuation characters have been carefully chosen so as to look like what they mean. E.g., asterisks around a word actually look like *emphasis*. Markdown lists look like, well, lists. Even blockquotes look like quoted passages of text, assuming you ve ever used email.", 
            "title": "Philosophy"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#html", 
            "text": "Markdown s syntax is intended for one purpose: to be used as a format for  writing  for the web.  Markdown is not a replacement for HTML, or even close to it. Its syntax is very small, corresponding only to a very small subset of HTML tags. The idea is  not  to create a syntax that makes it easier to insert HTML tags. In my opinion, HTML tags are already easy to insert. The idea for Markdown is to make it easy to read, write, and edit prose. HTML is a  publishing  format; Markdown is a  writing  format. Thus, Markdown s formatting syntax only addresses issues that can be conveyed in plain text.  For any markup that is not covered by Markdown s syntax, you simply use HTML itself. There s no need to preface it or delimit it to indicate that you re switching from Markdown to HTML; you just use the tags.  The only restrictions are that block-level HTML elements   e.g.  div ,  table ,  pre ,  p , etc.   must be separated from surrounding content by blank lines, and the start and end tags of the block should not be indented with tabs or spaces. Markdown is smart enough not to add extra (unwanted)  p  tags around HTML block-level tags.  For example, to add an HTML table to a Markdown article:  This is a regular paragraph. table \n     tr \n         td Foo /td \n     /tr  /table \n\nThis is another regular paragraph.  Note that Markdown formatting syntax is not processed within block-level HTML tags. E.g., you can t use Markdown-style  *emphasis*  inside an HTML block.  Span-level HTML tags   e.g.  span ,  cite , or  del    can be used anywhere in a Markdown paragraph, list item, or header. If you want, you can even use HTML tags instead of Markdown formatting; e.g. if you d prefer to use HTML  a  or  img  tags instead of Markdown s link or image syntax, go right ahead.  Unlike block-level HTML tags, Markdown syntax  is  processed within span-level tags.", 
            "title": "Inline HTML"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#autoescape", 
            "text": "In HTML, there are two characters that demand special treatment:   and  . Left angle brackets are used to start tags; ampersands are used to denote HTML entities. If you want to use them as literal characters, you must escape them as entities, e.g.  lt; , and  amp; .  Ampersands in particular are bedeviling for web writers. If you want to write about  AT T , you need to write  AT amp;T . You even need to escape ampersands within URLs. Thus, if you want to link to:  http://images.google.com/images?num=30 q=larry+bird  you need to encode the URL as:  http://images.google.com/images?num=30 amp;q=larry+bird  in your anchor tag  href  attribute. Needless to say, this is easy to forget, and is probably the single most common source of HTML validation errors in otherwise well-marked-up web sites.  Markdown allows you to use these characters naturally, taking care of all the necessary escaping for you. If you use an ampersand as part of an HTML entity, it remains unchanged; otherwise it will be translated into  amp; .  So, if you want to include a copyright symbol in your article, you can write:  copy;  and Markdown will leave it alone. But if you write:  AT T  Markdown will translate it to:  AT amp;T  Similarly, because Markdown supports  inline HTML , if you use angle brackets as delimiters for HTML tags, Markdown will treat them as such. But if you write:  4   5  Markdown will translate it to:  4  lt; 5  However, inside Markdown code spans and blocks, angle brackets and ampersands are  always  encoded automatically. This makes it easy to use Markdown to write about HTML code. (As opposed to raw HTML, which is a terrible format for writing about HTML syntax, because every single   and   in your example code needs to be escaped.)", 
            "title": "Automatic Escaping for Special Characters"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#block", 
            "text": "", 
            "title": "Block Elements"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#p", 
            "text": "A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line   a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.  The implication of the  one or more consecutive lines of text  rule is that Markdown supports  hard-wrapped  text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type s  Convert Line Breaks  option) which translate every line break character in a paragraph into a  br /  tag.  When you  do  want to insert a  br /  break tag using Markdown, you end a line with two or more spaces, then type return.  Yes, this takes a tad more effort to create a  br / , but a simplistic  every line break is a  br /  rule wouldn t work for Markdown. Markdown s email-style  blockquoting  and multi-paragraph  list items  work best   and look better   when you format them with hard breaks.", 
            "title": "Paragraphs and Line Breaks"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#header", 
            "text": "Markdown supports two styles of headers,  Setext  and  atx .  Setext-style headers are  underlined  using equal signs (for first-level headers) and dashes (for second-level headers). For example:  This is an H1\n=============\n\nThis is an H2\n-------------  Any number of underlining  = s or  - s will work.  Atx-style headers use 1-6 hash characters at the start of the line, corresponding to header levels 1-6. For example:  # This is an H1\n\n## This is an H2\n\n###### This is an H6  Optionally, you may  close  atx-style headers. This is purely cosmetic   you can use this if you think it looks better. The closing hashes don t even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.) :  # This is an H1 #\n\n## This is an H2 ##\n\n### This is an H3 ######", 
            "title": "Headers"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#blockquote", 
            "text": "Markdown uses email-style   characters for blockquoting. If you re familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a   before every line:   This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.    Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  Markdown allows you to be lazy and only put the   before the first line of a hard-wrapped paragraph:   This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.  Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of  :   This is the first level of quoting.     This is nested blockquote.   Back to the first level.  Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:   ## This is a header.    1.   This is the first list item.  2.   This is the second list item.    Here s some example code:        return shell_exec( echo $input | $markdown_script );  Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.", 
            "title": "Blockquotes"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#list", 
            "text": "Markdown supports ordered (numbered) and unordered (bulleted) lists.  Unordered lists use asterisks, pluses, and hyphens   interchangably   as list markers:  *   Red\n*   Green\n*   Blue  is equivalent to:  +   Red\n+   Green\n+   Blue  and:  -   Red\n-   Green\n-   Blue  Ordered lists use numbers followed by periods:  1.  Bird\n2.  McHale\n3.  Parish  It s important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:  ol  li Bird /li  li McHale /li  li Parish /li  /ol   If you instead wrote the list in Markdown like this:  1.  Bird\n1.  McHale\n1.  Parish  or even:  3. Bird\n1. McHale\n8. Parish  you d get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don t have to.  If you do use lazy list numbering, however, you should still start the list with the number 1. At some point in the future, Markdown may support starting ordered lists at an arbitrary number.  List markers typically start at the left margin, but may be indented by up to three spaces. List markers must be followed by one or more spaces or a tab.  To make lists look nice, you can wrap items with hanging indents:  *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  But if you want to be lazy, you don t have to:  *   Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.  If list items are separated by blank lines, Markdown will wrap the \nitems in  p  tags in the HTML output. For example, this input:  *   Bird\n*   Magic  will turn into:  ul  li Bird /li  li Magic /li  /ul   But this:  *   Bird\n\n*   Magic  will turn into:  ul  li p Bird /p /li  li p Magic /p /li  /ul   List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:  1.  This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.  It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:  *   This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You re only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n\n*   Another item in the same list.  To put a blockquote within a list item, the blockquote s   delimiters need to be indented:  *   A list item with a blockquote:\n\n      This is a blockquote\n      inside a list item.  To put a code block within a list item, the code block needs to be indented  twice    8 spaces or two tabs:  *   A list item with a code block:\n\n         code goes here   It s worth noting that it s possible to trigger an ordered list by accident, by writing something like this:  1986. What a great season.  In other words, a  number-period-space  sequence at the beginning of a line. To avoid this, you can backslash-escape the period:  1986\\. What a great season.", 
            "title": "Lists"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#precode", 
            "text": "Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both  pre  and  code  tags.  To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab. For example, given this input:  This is a normal paragraph:\n\n    This is a code block.  Markdown will generate:  p This is a normal paragraph: /p  pre code This is a code block. /code /pre   One level of indentation   4 spaces or 1 tab   is removed from each line of the code block. For example, this:  Here is an example of AppleScript:\n\n    tell application  Foo \n        beep\n    end tell  will turn into:  p Here is an example of AppleScript: /p  pre code tell application  Foo \n    beep\nend tell /code /pre   A code block continues until it reaches a line that is not indented (or the end of the article).  Within a code block, ampersands ( ) and angle brackets (  and  ) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown   just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:       div class= footer \n         copy; 2004 Foo Corporation\n     /div   will turn into:  pre code lt;div class= footer gt;\n     amp;copy; 2004 Foo Corporation lt;/div gt; /code /pre   Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it s also easy to use Markdown to write about Markdown s own syntax.", 
            "title": "Code Blocks"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#hr", 
            "text": "You can produce a horizontal rule tag ( hr / ) by placing three or more hyphens, asterisks, or underscores on a line by themselves. If you wish, you may use spaces between the hyphens or asterisks. Each of the following lines will produce a horizontal rule:  * * *\n\n***\n\n*****\n\n- - -\n\n---------------------------------------", 
            "title": "Horizontal Rules"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#span", 
            "text": "", 
            "title": "Span Elements"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#link", 
            "text": "Markdown supports two style of links:  inline  and  reference .  In both styles, the link text is delimited by [square brackets].  To create an inline link, use a set of regular parentheses immediately after the link text s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an  optional  title for the link, surrounded in quotes. For example:  This is [an example](http://example.com/  Title ) inline link.\n\n[This link](http://example.net/) has no title attribute.  Will produce:  p This is  a href= http://example.com/  title= Title \nan example /a  inline link. /p  p a href= http://example.net/ This link /a  has no\ntitle attribute. /p   If you re referring to a local resource on the same server, you can use relative paths:  See my [About](/about/) page for details.  Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:  This is [an example][id] reference-style link.  You can optionally use a space to separate the sets of brackets:  This is [an example] [id] reference-style link.  Then, anywhere in the document, you define your link label like this, on a line by itself:  [id]: http://example.com/   Optional Title Here   That is:   Square brackets containing the link identifier (optionally indented from the left margin using up to three spaces);  followed by a colon;  followed by one or more spaces (or tabs);  followed by the URL for the link;  optionally followed by a title attribute for the link, enclosed in double or single quotes, or enclosed in parentheses.   The following three link definitions are equivalent:  [foo]: http://example.com/   Optional Title Here \n[foo]: http://example.com/   Optional Title Here \n[foo]: http://example.com/  (Optional Title Here)  Note:  There is a known bug in Markdown.pl 1.0.1 which prevents single quotes from being used to delimit link titles.  The link URL may, optionally, be surrounded by angle brackets:  [id]:  http://example.com/    Optional Title Here   You can put the title attribute on the next line and use extra spaces or tabs for padding, which tends to look better with longer URLs:  [id]: http://example.com/longish/path/to/resource/here\n     Optional Title Here   Link definitions are only used for creating links during Markdown processing, and are stripped from your document in the HTML output.  Link definition names may consist of letters, numbers, spaces, and punctuation   but they are  not  case sensitive. E.g. these two links:  [link text][a]\n[link text][A]  are equivalent.  The  implicit link name  shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets   e.g., to link the word  Google  to the google.com web site, you could simply write:  [Google][]  And then define the link:  [Google]: http://google.com/  Because link names may contain spaces, this shortcut even works for multiple words in the link text:  Visit [Daring Fireball][] for more information.  And then define the link:  [Daring Fireball]: http://daringfireball.net/  Link definitions can be placed anywhere in your Markdown document. I tend to put them immediately after each paragraph in which they re used, but if you want, you can put them all at the end of your document, sort of like footnotes.  Here s an example of reference links in action:  I get 10 times more traffic from [Google] [1] than from\n[Yahoo] [2] or [MSN] [3].\n\n  [1]: http://google.com/         Google \n  [2]: http://search.yahoo.com/   Yahoo Search \n  [3]: http://search.msn.com/     MSN Search   Using the implicit link name shortcut, you could instead write:  I get 10 times more traffic from [Google][] than from\n[Yahoo][] or [MSN][].\n\n  [google]: http://google.com/         Google \n  [yahoo]:  http://search.yahoo.com/   Yahoo Search \n  [msn]:    http://search.msn.com/     MSN Search   Both of the above examples will produce the following HTML output:  p I get 10 times more traffic from  a href= http://google.com/ \ntitle= Google Google /a  than from a href= http://search.yahoo.com/  title= Yahoo Search Yahoo /a \nor  a href= http://search.msn.com/  title= MSN Search MSN /a . /p   For comparison, here is the same paragraph written using Markdown s inline link style:  I get 10 times more traffic from [Google](http://google.com/  Google )\nthan from [Yahoo](http://search.yahoo.com/  Yahoo Search ) or\n[MSN](http://search.msn.com/  MSN Search ).  The point of reference-style links is not that they re easier to write. The point is that with reference-style links, your document source is vastly more readable. Compare the above examples: using reference-style links, the paragraph itself is only 81 characters long; with inline-style links, it s 176 characters; and as raw HTML, it s 234 characters. In the raw HTML, there s more markup than there is text.  With Markdown s reference-style links, a source document much more closely resembles the final output, as rendered in a browser. By allowing you to move the markup-related metadata out of the paragraph, you can add links without interrupting the narrative flow of your prose.", 
            "title": "Links"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#em", 
            "text": "Markdown treats asterisks ( * ) and underscores ( _ ) as indicators of emphasis. Text wrapped with one  *  or  _  will be wrapped with an HTML  em  tag; double  * s or  _ s will be wrapped with an HTML  strong  tag. E.g., this input:  *single asterisks*\n\n_single underscores_\n\n**double asterisks**\n\n__double underscores__  will produce:  em single asterisks /em  em single underscores /em  strong double asterisks /strong  strong double underscores /strong   You can use whichever style you prefer; the lone restriction is that the same character must be used to open and close an emphasis span.  Emphasis can be used in the middle of a word:  un*frigging*believable  But if you surround an  *  or  _  with spaces, it ll be treated as a literal asterisk or underscore.  To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:  \\*this text is surrounded by literal asterisks\\*", 
            "title": "Emphasis"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#code", 
            "text": "To indicate a span of code, wrap it with backtick quotes ( ` ). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:  Use the `printf()` function.  will produce:  p Use the  code printf() /code  function. /p   To include a literal backtick character within a code span, you can use multiple backticks as the opening and closing delimiters:  ``There is a literal backtick (`) here.``  which will produce this:  p code There is a literal backtick (`) here. /code /p   The backtick delimiters surrounding a code span may include spaces   one after the opening, one before the closing. This allows you to place literal backtick characters at the beginning or end of a code span:  A single backtick in a code span: `` ` ``\n\nA backtick-delimited string in a code span: `` `foo` ``  will produce:  p A single backtick in a code span:  code ` /code /p  p A backtick-delimited string in a code span:  code `foo` /code /p   With a code span, ampersands and angle brackets are encoded as HTML entities automatically, which makes it easy to include example HTML tags. Markdown will turn this:  Please don t use any ` blink ` tags.  into:  p Please don t use any  code lt;blink gt; /code  tags. /p   You can write this:  ` #8212;` is the decimal-encoded equivalent of ` mdash;`.  to produce:  p code amp;#8212; /code  is the decimal-encoded\nequivalent of  code amp;mdash; /code . /p", 
            "title": "Code"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#img", 
            "text": "Admittedly, it s fairly difficult to devise a  natural  syntax for placing images into a plain text document format.  Markdown uses an image syntax that is intended to resemble the syntax for links, allowing for two styles:  inline  and  reference .  Inline image syntax looks like this:  ![Alt text](/path/to/img.jpg)\n\n![Alt text](/path/to/img.jpg  Optional title )  That is:   An exclamation mark:  ! ;  followed by a set of square brackets, containing the  alt  attribute text for the image;  followed by a set of parentheses, containing the URL or path to the image, and an optional  title  attribute enclosed in double or single quotes.   Reference-style image syntax looks like this:  ![Alt text][id]  Where  id  is the name of a defined image reference. Image references are defined using syntax identical to link references:  [id]: url/to/image   Optional title attribute   As of this writing, Markdown has no syntax for specifying the dimensions of an image; if this is important to you, you can simply use regular HTML  img  tags.", 
            "title": "Images"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#misc", 
            "text": "", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#autolink", 
            "text": "Markdown supports a shortcut style for creating  automatic  links for URLs and email addresses: simply surround the URL or email address with angle brackets. What this means is that if you want to show the actual text of a URL or email address, and also have it be a clickable link, you can do this:  http://example.com/   Markdown will turn this into:  a href= http://example.com/ http://example.com/ /a   Automatic links for email addresses work similarly, except that Markdown will also perform a bit of randomized decimal and hex entity-encoding to help obscure your address from address-harvesting spambots. For example, Markdown will turn this:  address@example.com   into something like this:  a href= #x6D; #x61;i #x6C; #x74; #x6F;: #x61; #x64; #x64; #x72; #x65; #115; #115; #64; #101; #120; #x61; #109; #x70; #x6C;e #x2E; #99; #111; #109; #x61; #x64; #x64; #x72; #x65; #115; #115; #64; #101; #120; #x61; #109; #x70; #x6C;e #x2E; #99; #111; #109; /a   which will render in a browser as a clickable link to  address@example.com .  (This sort of entity-encoding trick will indeed fool many, if not most, address-harvesting bots, but it definitely won t fool all of them. It s better than nothing, but an address published in this way will probably eventually start receiving spam.)", 
            "title": "Automatic Links"
        }, 
        {
            "location": "/user-guide/markdown-syntax/#backslash", 
            "text": "Markdown allows you to use backslash escapes to generate literal characters which would otherwise have special meaning in Markdown s formatting syntax. For example, if you wanted to surround a word with literal asterisks (instead of an HTML  em  tag), you can use backslashes before the asterisks, like this:  \\*literal asterisks\\*  Markdown provides backslash escapes for the following characters:  \\   backslash\n`   backtick\n*   asterisk\n_   underscore\n{}  curly braces\n[]  square brackets\n()  parentheses\n#   hash mark\n+   plus sign\n-   minus sign (hyphen)\n.   dot\n!   exclamation mark", 
            "title": "Backslash Escapes"
        }, 
        {
            "location": "/user-guide/general-usage/", 
            "text": "General Usage\n\n\nUsing PyMdown.\n\n\n\n\nUsing PyMdown\n\n\nPyMdown was written to aid in batch processing Markdown files with Python Markdown and Pygments (but a JavaScript highlighter can just as easily be used).  It also adds a number of optional extensions.\n\n\nPyMdown can also optionally use a template with CSS and JavaScript for styling the Markdown outputs.  Templates, CSS, JavaScript, and extensions are all setup in a configuration file.  If for certain batches specific settings need to be tweaked, PyMdown can accept paths to specific settings file via the CLI.  The settings files can be in either JSON or YAML.  PyMdown also supports input sources with a JSON or YAML frontmatter were settings can be configured along with general meta data.\n\n\nThough PyMdown could be used to generate a site, it was mainly designed to generate static documents from Markdown for general use or previewing.  If you are looking to generate document sites, there are plenty of good tools that already do this (\nmkdocs\n is one suggestion).  But even if you don\nt directly use PyMdown, you may still find the \nPyMdown extensions\n as useful additions in other Python Markdown related projects as they can be installed and used independently.\n\n\nCommand Line Interface\n\n\nInput Files\n\n\nIn its most basic usage, PyMdown accepts a markdown file:\n\n\npymdown file.md\n\n\n\n\n\nor a file stream:\n\n\npymdown \n file.md\n\n\n\n\n\nSpecifying Output\n\n\nPyMdown allows the output to be specified with the \n--output\n or \n-o\n option:\n\n\npymdown -o file.html file.md\n\n\n\n\n\nAlternatively you can redirect the output:\n\n\npymdown -o file.md \n file.html\n\n\n\n\n\nBatch Processing\n\n\nPyMdown has a batch processing mode (\n--batch\n or \n-b\n). When the batch flag is set, PyMdown will accept multiple paths and wild-card patterns.\n\n\npymdown -b *.md documents/*md\n\n\n\n\n\nWhen in batch mode, PyMdown will simply transform the input file name: \nfile.md\n -\n \nfile.html\n. It will then save the output file in the same location as the input.\n\n\nPreviewing Markdown\n\n\nWith the \n--preview\n or \n-p\n option, PyMdown will generate a temp HTML file and open it in the default web browser.  Preview mode will work in normal and batch mode.\n\n\npymdown -p file.md\n\n\n\n\n\nBasepath\n\n\nPyMdown in various circumstances (particularly in conjunction with specific PyMdown extensions) will try and resolve image, CSS, and JS asset paths for previews, base64 encoding, and other scenarios.  In order for this to work, a base path may be required and can be specified using the \n--basepath\n option.  If no base path is given, the base path will be that of the source file or \nNone\n if the source is a file stream.\n\n\npymdown --basepath ../assets file.md\n\n\n\n\n\nRelpath\n\n\nPyMdown in various circumstances (particularly in conjunction with specific PyMdown extensions) will try to create relative paths to assets or sources such as images, CSS, and JS.  In order for this to work, a relative path is needed.  The \n--relpath\n option is used to set this.  If \n--relpath\n is not set, it defaults to the output directory.  If the output directory is also not set (when output is dumped to stdout), the relative path will not be set.\n\n\npymdown --relpath ../somedirectory file.md\n\n\n\n\n\nSettings\n\n\nPyMdown will normally look in the location of the \nconfiguration directory\n to find the settings file, but the filename and path can be redirected with the \n--settings\n or \n-s\n option.\n\n\npymdown -s ../my_settings.cfg file.md\n\n\n\n\n\nEncoding\n\n\nPyMdown can be configured to read the Markdown file(s) with a different encoding than the default \nUTF-8\n.  This is done with the \n--encoding\n or \n-e\n option.\n\n\npymdown -e utf-8 file.md\n\n\n\n\n\nBy default, the output encoding will be the same as the input, but if greater control is needed, the user can set the output encoding via the \n--output_encoding\n or \n-E\n option.\n\n\npymdown -E utf-8 file.md\n\n\n\n\n\nTitle\n\n\nPyMdown, by default, will use the source file\ns name as the title, or if the input is a file stream, it will use \nUntitled\n.  But this can be set/overridden with the \n--title\n option.  This probably isn\nt practical for batch processing.  When batch processing, it may make more sense to utilize the \nfrontmatter\n to set the title per file.\n\n\npymdown --title \nMy Awesome File\n file.md\n\n\n\n\n\nCritic\n\n\nPyMdown has a couple options from CriticMarkup.  By using the \n--accept\n or \n-a\n option, when the Markdown is parsed, the suggested changes will be accepted.\n\n\nWhen using the \n--reject\n or \n-r\n option when Markdown is parsed, the suggested changes will be rejected and the original content will be used instead.\n\n\nIf both \n--accept\n and \n--reject\n are set at the same time, PyMdown will use the view mode and convert the file to HTML and will attempt to highlight the blocks targeted with the CriticMarkup.\n\n\nLastly, the \n--critic-dump\n option, when used with either the \n--accept\n or \n--reject\n option, will take the source and output it accepting or rejecting respectively the CriticMarkup edits that were made (essentially removing the CriticMarkup from the file).\n\n\nPlain HTML\n\n\nIf a stripped down HTML output is preferred, the \n--plain-html\n or \n-P\n option will return a stripped down output with no templates, no HTML comments, and no id, style, class, or on* attributes.\n\n\npymdown -P file.md\n\n\n\n\n\nForce No Template\n\n\nIf by default the configuration file has defined a template, but it is desired to do an output without the template, the \n--force-no-template\n option can be used to disable template use.\n\n\npymdown --force-no-template file.md\n\n\n\n\n\nForce Stdout\n\n\nSometimes a file may have frontmatter that redirects its output to a file, but it may be desirable to send the output to stdout.  In this case, the \n--force-stdout\n option can be used to force a redirect to stdout.\n\n\npymdown --force-stdout file.md\n\n\n\n\n\nQuiet\n\n\nIn some situations it may be desired to hide error messages and general info from the stdout.  In this case, the \n--quiet\n or \n-q\n option may be used.\n\n\npymdown -q file.md\n\n\n\n\n\nConfiguration File\n\n\nThe configuration file is used to specify general Python Markdown settings, optional template, CSS and JS resources for templates, and extensions that will be used.\n\n\nPyMdown on the first run will unpack user files to \n~\\.PyMdown\n on Windows, \n~/.PyMdown\n on OSX and \n~/.config/PyMdown\n on Linux.  The global configuration file can found here at the root of the folder along with default CSS, JavaScript, and other resources which would be under another sub-folder called \ndefault\n.  Files under \ndefault\n will be auto-upgraded when necessary by newer versions of PyMdown and should be left unaltered.  Default files can be copied and altered outside of the \ndefault\n location for personal tweaking and usage.\n\n\nPython Markdown Settings\n\n\nPython Markdown has a number of settings that can be configured:\n\n\n# Length of tabs in source files\n\n\ntab_length\n:\n \n4\n\n\n\n# Ignore number of first item in ordered list.\n\n\n# Setting this to false will force the list to start with the\n\n\n# first specified number in the list.\n\n\nlazy_ol\n:\n \ntrue\n\n\n\n# Python Markdown by default enables smart logic for _connected_words_\n\n\n# but only on italic with the underscore character.  I find this behavior odd\n\n\n# and disable it by default for a more traditional markdown feel by default.\n\n\n# Extensions can override this.\n\n\nsmart_emphasis\n:\n \nfalse\n\n\n\n# Enable/disable attributes\n\n\nenable_attributes\n:\n \ntrue\n\n\n\n# Output format (html|html5|html5|xhtml|xhtml1|xhtml5)\n\n\n# It is recommend to use more specific versions such as: html5 or xhtml1 than\n\n\n# general html or xhtml\n\n\noutput_format\n:\n \nxhtml1\n\n\n\n\n\n\nSafe mode setting is omitted as it is pending deprecation in Python Markdown.\n\n\nPygment Settings\n\n\nThe following setting s used when it is not desired to have PyMdown inject the Pygments CSS style into the template:\n\n\n# Include the pygments css when using codehilite extension\n\n\nuse_pygments_css\n:\n \ntrue,\n\n\n\n\n\n\nIf Pygments is disabled, but the CodeHilite extension is being used, code blocks are converted to a form so that a JavaScript library like \nhighlight.js\n can process them.\n\n\nTemplate\n\n\nPyMdown allows for specifying a simple HTML template that can be used for the output.  Template files can be specified in the settings file via the \ntemplate\n keyword.\n\n\n# Your HTML template\n\n\n# PyMdown will look relative to the binary if it can\nt find the file.\n\n\ntemplate\n:\n \ndefault/template.html\n\n\n\n\n\n\nIn the template file, you can add special markup to insert certain items:\n\n\n\n\n\n\n\n\nMarkup\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n{{\nmeta\n}}\n\n\nThis is where meta data will be inserted.  Mainly the character encoding, and general user defined meta data from the frontmatter.\n\n\n\n\n\n\n{{\ncss\n}}\n\n\nWhere user defined stylesheets are inserted.\n\n\n\n\n\n\n{{\njs\n}}\n\n\nWhere user defined JavaScript is inserted.\n\n\n\n\n\n\n{{\ntitle\n}}\n\n\nThe page title will be inserted here.\n\n\n\n\n\n\n{{\ncontent\n}}\n\n\nThe parsed markdown content gets inserted here.\n\n\n\n\n\n\n{{\ngetPath(myfile/path/img.png)\n}}\n\n\nGet file paths, if local, under go conversions internally to make the paths relative or absolute as needed.  If in your template you need to point to a reference a file and want the file path to be converted to an absolute path or a relative path, you can use this to convert it in the template; the file can be preceded by a \n!\n to prevent path conversion to an absolute or relative path; this is mainly useful if you are just looking to escape the path.\n\n\n\n\n\n\n{{\ngetQuotedPath(myfile/path/img.png)\n}}\n\n\nThis is the same as \ngetPath\n above except the output is surrounded in double quotes.\n\n\n\n\n\n\n\n\nTemplate files in the settings or frontmatter can be followed by \n;encoding\n to cause the file to be opened and read with the specified encoding.\n\n\nJavascript and CSS\n\n\nJavascript and CSS can be included in the template by adding them to the following arrays:\n\n\n# Select your CSS for you output html\n\n\n# or you can have it all contained in your HTML template\n\n\n#\n\n\n# Is an array of stylesheets (path or link).\n\n\n# If it points to a physical file, it will be included.\n\n\n# PyMdown will look relative to the binary if it can\nt find the file.\n\n\n#\n\n\n# This can be overridden in a file\ns frontmatter via the \nsettings\n key word:\n\n\n#\n\n\n# ---\n\n\n# settings:\n\n\n#     css:\n\n\n#     -   somefile.css\n\n\n# ---\n\n\n#\n\n\n# but if you want to append to the list, you can use the \ninclude.css\n keyword in the\n\n\n# frontmatter:\n\n\n#\n\n\n# ---\n\n\n# include.css:\n\n\n# - somefile.css\n\n\n# ---\n\n\n#\n\n\ncss\n:\n\n\n-\n   \n^default/markdown.css\n\n\n\n# Load up js scripts (in head)\n\n\n#\n\n\n# Is an array of scripts (path or link).\n\n\n# If it points to a physical file, it will be included.\n\n\n# PyMdown will look relative to the binary if it can\nt find the file.\n\n\n#\n\n\n# This can be overridden in a file\ns frontmatter via the \nsettings\n key word:\n\n\n#\n\n\n# ---\n\n\n# settings:\n\n\n#     js:\n\n\n#     -   somefile.js\n\n\n# ---\n\n\n#\n\n\n# but if you want to append to the list, you can use the \ninclude.js\n keyword in the\n\n\n# frontmatter:\n\n\n#\n\n\n# ---\n\n\n# include.js:\n\n\n# - somefile.js\n\n\n# ---\n\n\n#\n\n\njs\n:\n \n[]\n\n\n\n\n\n\nCSS files and JavaScript files can be URLs or file paths.  When specifying a file path, a \n!\n can be used to precede the path so that PyMdown will just link the file and skip converting the file to an absolute or relative path.  If the file path is preceded by a \n^\n, the file content will be embedded in the HTML under a style or script tag depending on the source type.\n\n\nCSS and JavaScript files can also be followed by \n;encoding\n to read in the file with the specified encoding.\n\n\nJavaScript and CSS Quickload Aliases\n\n\nSometimes you may have files you occasionally want to include on the fly.  PyMdown allows for defining aliases that can be referenced in a file\ns frontmatter to include multiple JavaScript and/or CSS files.  CSS and JavaScript included in the the quick-load aliases follow the same rules as the normal \nCSS and JavaScript\n includes.\n\n\n# Quick load aliases\n\n\n#\n\n\n# This is a quick way to optionally load multiple CSS and JS files when converting a specific file.\n\n\n# It done using the file\ns frontmatter:\n\n\n#\n\n\n# ---\n\n\n# include:\n\n\n# - mathjax\n\n\n# - flow\n\n\n# ---\n\n\n#\n\n\n# You can create any key you want, but it needs to begin with \n@\n.  Then just use the include keyword\n\n\n# in your frontmatter, and provide a list of aliases you wish to load.  Each alias can have a \ncss\n and/or \njs\n keyword.\n\n\n@flow\n:\n\n    \njs\n:\n\n        \n-\n   \nhttps://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.2/raphael-min.js\n\n        \n-\n   \nflowchart-min.js\n\n        \n-\n   \ndefault/uml-converter.js\n\n        \n-\n   \ndefault/flow-loader.js\n\n\n\n@sequence\n:\n\n    \njs\n:\n\n        \n-\n   \nhttps://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.2/raphael-min.js\n\n        \n-\n   \nhttps://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0/underscore-min.js\n\n        \n-\n   \nhttps://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.4/sequence-diagram-min.js\n\n        \n-\n   \ndefault/uml-converter.js\n\n        \n-\n   \ndefault/sequence-loader.js\n\n\n\n@mathjax\n:\n\n   \njs\n:\n\n        \n-\n   \ndefault/mathjax-config.js\n\n        \n-\n   \nhttps://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\n\n\n\n\n\n\nPath Conversions\n\n\nBy default, PyMdown converts paths to be relative to the output location.  If desired, this can be changed to an absolute path:\n\n\n# By default resource paths are converted to relative file paths when possible;\n\n\n# this disables conversion.\n\n\npath_conversion_absolute\n:\n \nfalse\n\n\n\n\n\n\nIf path conversion are not wanted, and disabling them inline with the \n!\n token is not acceptable, path conversion can be completely disabled with the following setting:\n\n\n# By default resource paths are converted to relative file paths when possible;\n\n\n# this disables conversion.  Previews will still convert paths to render preview proper.\n\n\ndisable_path_conversion\n:\n \nfalse\n\n\n\n\n\n\n\n\nNote\n\n\nPyMdown utilizes the \npathconverter\n extension to convert links and references in the actual markdown content.  If \npathconverter\n is manually configured instead of letting PyMdown handle it, these settings will have no effect.\n\n\nThe other exception is with previews.  In order for links and references to work in previews, they must be paths that are relative to the preview\ns temp directory or they must be absolute paths.  For this reason, PyMdown will always enable path conversions for previews.  If you have manually set up the \npathconverter\n extension, preview\ns will overwrite the \nrelative_path\n argument to ensure it is set to \n${OUTPUT}\n which will allow the preview to display content properly by making asset paths relative to the previews location.  By default, the \nrelative_path\n is set to \n${REL_PATH}\n which is the output path by default, but can be altered via the command line option \n--relpath\n or the \nrelpath\n frontmatter option.\n\n\n\n\nPython Markdown Extensions\n\n\nExtensions to be used are defined under the \nextensions\n keyword.  \nextensions\n is an ordered key/value pair. An extension has a name followed by \n:\n in yaml format.  If you want to include settings parameters, you can include those as the extension value.  All parameters should be done as key/value pairs as shown below.\n\n\nextensions\n:\n\n    \nmarkdown.extensions.extra\n:\n\n    \nmarkdown.extensions.toc\n:\n\n        \ntitle\n:\n \nTable of Contents\n\n    \nmarkdown.extensions.codehilite\n:\n\n        \nguess_lang\n:\n \nfalse\n\n    \nmarkdown.extensions.smarty\n:\n\n    \nmarkdown.extensions.wikilinks\n:\n\n    \nmarkdown.extensions.admonition\n:\n\n    \nmarkdown.extensions.nl2br\n:\n\n    \npymdown.pymdown\n:\n\n    \npymdown.b64\n:\n\n        \nbase_path\n:\n \n${BASE_PATH}\n\n    \npymdown.critic\n:\n\n\n\n\n\n\nFrontmatter\n\n\nFrontmatter can be used at the very beginning of a Markdown file.  Frontmatter blocks begin with \n---\n and end with \n---\n.  Frontmatter must be the very beginning of the file and start on the very first line.\n\n\nPyMdown front matter content can be either YAML or JSON (JSON is modified to allow JavaScript comments).  The frontmatter is a dictionary of key value pairs which are translated into meta data for all keys except for a few \nspecial\n keywords.  For meta data, the key will become the content of the \nmeta\n tag\ns \nname\n attribute, and the value will become the data for the \ncontent\n attribute.  If an array is specified as the value, each member of the array will be converted to a string and all of them will be strung together and separated by commas.  In all other cases, the value will just be converted to a string.\n\n\nPyMdown has a few keywords that can be defined to alter the output.\n\n\n\n\n\n\n\n\nKeyword\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nThis item is used in the HTML\ns title tag.\n\n\n\n\n\n\ndestination\n\n\nThis keyword is the location and file name were the output should be placed.\n\n\n\n\n\n\nreferences\n\n\nThis can specify a separate Markdown file containing footnotes, attributes, etc. This feature could be abused to just insert normal Markdown files into other Markdown files; PyMdown currently does nothing to prevent this, but this is not really advised. References can be followed by \n;encoding\n to specify the read encoding. By default, the encoding from the command line will be used, but this can override it.\n\n\n\n\n\n\nbasepath\n\n\nThis is used to specify the path that PyMdown should use to look for reference material like CSS or JS files and even \nreferences\n defined in the frontmatter. It is also used in plugins such as \npathconverter\n and \nb64\n.  This can override the \nbasepath\n fed in at the command line.\n\n\n\n\n\n\nrelpath\n\n\nThis is used to specify the path that images and paths are relative to. It is used in plugins such as \npathconverter\n.  This can override the \nrelpath\n fed in at the command line.\n\n\n\n\n\n\ninclude\n\n\nThis keyword\ns value is an array of strings and accepts \nquickload aliases\n (the \n@\n symbol is omitted from the name). So if a quickload alias named \n@alias\n is desired, \nalias\n would be defined under the \ninclude\n keyword.\n\n\n\n\n\n\ninclude.css\n\n\nThis keyword\ns value is an array of strings denoting additional single CSS files to include.  They follow the same convention as CSS defined in the settings file: \n;encoding\n at tail will define the encoding used to access the file, paths starting with \n!\n will not have their path converted to absolute or relative paths, and \n^\n will directly embed the content in the HTML file.\n\n\n\n\n\n\ninclude.js\n\n\nThis keyword\ns value is an array of strings denoting additional single JavaScript files to include.  They follow the same convention as JavaScript defined in the settings file: \n;encoding\n at tail will define the encoding used to access the file, paths starting with \n!\n will not have their path converted to absolute or relative paths, and \n^\n will directly embed the content in the HTML file.\n\n\n\n\n\n\nsettings\n\n\nThis is a dictionary and allows the overriding of any of the settings found in the original configuration file.", 
            "title": "General Usage"
        }, 
        {
            "location": "/user-guide/general-usage/#general-usage", 
            "text": "Using PyMdown.", 
            "title": "General Usage"
        }, 
        {
            "location": "/user-guide/general-usage/#using-pymdown", 
            "text": "PyMdown was written to aid in batch processing Markdown files with Python Markdown and Pygments (but a JavaScript highlighter can just as easily be used).  It also adds a number of optional extensions.  PyMdown can also optionally use a template with CSS and JavaScript for styling the Markdown outputs.  Templates, CSS, JavaScript, and extensions are all setup in a configuration file.  If for certain batches specific settings need to be tweaked, PyMdown can accept paths to specific settings file via the CLI.  The settings files can be in either JSON or YAML.  PyMdown also supports input sources with a JSON or YAML frontmatter were settings can be configured along with general meta data.  Though PyMdown could be used to generate a site, it was mainly designed to generate static documents from Markdown for general use or previewing.  If you are looking to generate document sites, there are plenty of good tools that already do this ( mkdocs  is one suggestion).  But even if you don t directly use PyMdown, you may still find the  PyMdown extensions  as useful additions in other Python Markdown related projects as they can be installed and used independently.", 
            "title": "Using PyMdown"
        }, 
        {
            "location": "/user-guide/general-usage/#command-line-interface", 
            "text": "", 
            "title": "Command Line Interface"
        }, 
        {
            "location": "/user-guide/general-usage/#input-files", 
            "text": "In its most basic usage, PyMdown accepts a markdown file:  pymdown file.md  or a file stream:  pymdown   file.md", 
            "title": "Input Files"
        }, 
        {
            "location": "/user-guide/general-usage/#specifying-output", 
            "text": "PyMdown allows the output to be specified with the  --output  or  -o  option:  pymdown -o file.html file.md  Alternatively you can redirect the output:  pymdown -o file.md   file.html", 
            "title": "Specifying Output"
        }, 
        {
            "location": "/user-guide/general-usage/#batch-processing", 
            "text": "PyMdown has a batch processing mode ( --batch  or  -b ). When the batch flag is set, PyMdown will accept multiple paths and wild-card patterns.  pymdown -b *.md documents/*md  When in batch mode, PyMdown will simply transform the input file name:  file.md  -   file.html . It will then save the output file in the same location as the input.", 
            "title": "Batch Processing"
        }, 
        {
            "location": "/user-guide/general-usage/#previewing-markdown", 
            "text": "With the  --preview  or  -p  option, PyMdown will generate a temp HTML file and open it in the default web browser.  Preview mode will work in normal and batch mode.  pymdown -p file.md", 
            "title": "Previewing Markdown"
        }, 
        {
            "location": "/user-guide/general-usage/#basepath", 
            "text": "PyMdown in various circumstances (particularly in conjunction with specific PyMdown extensions) will try and resolve image, CSS, and JS asset paths for previews, base64 encoding, and other scenarios.  In order for this to work, a base path may be required and can be specified using the  --basepath  option.  If no base path is given, the base path will be that of the source file or  None  if the source is a file stream.  pymdown --basepath ../assets file.md", 
            "title": "Basepath"
        }, 
        {
            "location": "/user-guide/general-usage/#relpath", 
            "text": "PyMdown in various circumstances (particularly in conjunction with specific PyMdown extensions) will try to create relative paths to assets or sources such as images, CSS, and JS.  In order for this to work, a relative path is needed.  The  --relpath  option is used to set this.  If  --relpath  is not set, it defaults to the output directory.  If the output directory is also not set (when output is dumped to stdout), the relative path will not be set.  pymdown --relpath ../somedirectory file.md", 
            "title": "Relpath"
        }, 
        {
            "location": "/user-guide/general-usage/#settings", 
            "text": "PyMdown will normally look in the location of the  configuration directory  to find the settings file, but the filename and path can be redirected with the  --settings  or  -s  option.  pymdown -s ../my_settings.cfg file.md", 
            "title": "Settings"
        }, 
        {
            "location": "/user-guide/general-usage/#encoding", 
            "text": "PyMdown can be configured to read the Markdown file(s) with a different encoding than the default  UTF-8 .  This is done with the  --encoding  or  -e  option.  pymdown -e utf-8 file.md  By default, the output encoding will be the same as the input, but if greater control is needed, the user can set the output encoding via the  --output_encoding  or  -E  option.  pymdown -E utf-8 file.md", 
            "title": "Encoding"
        }, 
        {
            "location": "/user-guide/general-usage/#title", 
            "text": "PyMdown, by default, will use the source file s name as the title, or if the input is a file stream, it will use  Untitled .  But this can be set/overridden with the  --title  option.  This probably isn t practical for batch processing.  When batch processing, it may make more sense to utilize the  frontmatter  to set the title per file.  pymdown --title  My Awesome File  file.md", 
            "title": "Title"
        }, 
        {
            "location": "/user-guide/general-usage/#critic", 
            "text": "PyMdown has a couple options from CriticMarkup.  By using the  --accept  or  -a  option, when the Markdown is parsed, the suggested changes will be accepted.  When using the  --reject  or  -r  option when Markdown is parsed, the suggested changes will be rejected and the original content will be used instead.  If both  --accept  and  --reject  are set at the same time, PyMdown will use the view mode and convert the file to HTML and will attempt to highlight the blocks targeted with the CriticMarkup.  Lastly, the  --critic-dump  option, when used with either the  --accept  or  --reject  option, will take the source and output it accepting or rejecting respectively the CriticMarkup edits that were made (essentially removing the CriticMarkup from the file).", 
            "title": "Critic"
        }, 
        {
            "location": "/user-guide/general-usage/#plain-html", 
            "text": "If a stripped down HTML output is preferred, the  --plain-html  or  -P  option will return a stripped down output with no templates, no HTML comments, and no id, style, class, or on* attributes.  pymdown -P file.md", 
            "title": "Plain HTML"
        }, 
        {
            "location": "/user-guide/general-usage/#force-no-template", 
            "text": "If by default the configuration file has defined a template, but it is desired to do an output without the template, the  --force-no-template  option can be used to disable template use.  pymdown --force-no-template file.md", 
            "title": "Force No Template"
        }, 
        {
            "location": "/user-guide/general-usage/#force-stdout", 
            "text": "Sometimes a file may have frontmatter that redirects its output to a file, but it may be desirable to send the output to stdout.  In this case, the  --force-stdout  option can be used to force a redirect to stdout.  pymdown --force-stdout file.md", 
            "title": "Force Stdout"
        }, 
        {
            "location": "/user-guide/general-usage/#quiet", 
            "text": "In some situations it may be desired to hide error messages and general info from the stdout.  In this case, the  --quiet  or  -q  option may be used.  pymdown -q file.md", 
            "title": "Quiet"
        }, 
        {
            "location": "/user-guide/general-usage/#configuration-file", 
            "text": "The configuration file is used to specify general Python Markdown settings, optional template, CSS and JS resources for templates, and extensions that will be used.  PyMdown on the first run will unpack user files to  ~\\.PyMdown  on Windows,  ~/.PyMdown  on OSX and  ~/.config/PyMdown  on Linux.  The global configuration file can found here at the root of the folder along with default CSS, JavaScript, and other resources which would be under another sub-folder called  default .  Files under  default  will be auto-upgraded when necessary by newer versions of PyMdown and should be left unaltered.  Default files can be copied and altered outside of the  default  location for personal tweaking and usage.", 
            "title": "Configuration File"
        }, 
        {
            "location": "/user-guide/general-usage/#python-markdown-settings", 
            "text": "Python Markdown has a number of settings that can be configured:  # Length of tabs in source files  tab_length :   4  # Ignore number of first item in ordered list.  # Setting this to false will force the list to start with the  # first specified number in the list.  lazy_ol :   true  # Python Markdown by default enables smart logic for _connected_words_  # but only on italic with the underscore character.  I find this behavior odd  # and disable it by default for a more traditional markdown feel by default.  # Extensions can override this.  smart_emphasis :   false  # Enable/disable attributes  enable_attributes :   true  # Output format (html|html5|html5|xhtml|xhtml1|xhtml5)  # It is recommend to use more specific versions such as: html5 or xhtml1 than  # general html or xhtml  output_format :   xhtml1   Safe mode setting is omitted as it is pending deprecation in Python Markdown.", 
            "title": "Python Markdown Settings"
        }, 
        {
            "location": "/user-guide/general-usage/#pygment-settings", 
            "text": "The following setting s used when it is not desired to have PyMdown inject the Pygments CSS style into the template:  # Include the pygments css when using codehilite extension  use_pygments_css :   true,   If Pygments is disabled, but the CodeHilite extension is being used, code blocks are converted to a form so that a JavaScript library like  highlight.js  can process them.", 
            "title": "Pygment Settings"
        }, 
        {
            "location": "/user-guide/general-usage/#template", 
            "text": "PyMdown allows for specifying a simple HTML template that can be used for the output.  Template files can be specified in the settings file via the  template  keyword.  # Your HTML template  # PyMdown will look relative to the binary if it can t find the file.  template :   default/template.html   In the template file, you can add special markup to insert certain items:     Markup  Description      {{ meta }}  This is where meta data will be inserted.  Mainly the character encoding, and general user defined meta data from the frontmatter.    {{ css }}  Where user defined stylesheets are inserted.    {{ js }}  Where user defined JavaScript is inserted.    {{ title }}  The page title will be inserted here.    {{ content }}  The parsed markdown content gets inserted here.    {{ getPath(myfile/path/img.png) }}  Get file paths, if local, under go conversions internally to make the paths relative or absolute as needed.  If in your template you need to point to a reference a file and want the file path to be converted to an absolute path or a relative path, you can use this to convert it in the template; the file can be preceded by a  !  to prevent path conversion to an absolute or relative path; this is mainly useful if you are just looking to escape the path.    {{ getQuotedPath(myfile/path/img.png) }}  This is the same as  getPath  above except the output is surrounded in double quotes.     Template files in the settings or frontmatter can be followed by  ;encoding  to cause the file to be opened and read with the specified encoding.", 
            "title": "Template"
        }, 
        {
            "location": "/user-guide/general-usage/#javascript-and-css", 
            "text": "Javascript and CSS can be included in the template by adding them to the following arrays:  # Select your CSS for you output html  # or you can have it all contained in your HTML template  #  # Is an array of stylesheets (path or link).  # If it points to a physical file, it will be included.  # PyMdown will look relative to the binary if it can t find the file.  #  # This can be overridden in a file s frontmatter via the  settings  key word:  #  # ---  # settings:  #     css:  #     -   somefile.css  # ---  #  # but if you want to append to the list, you can use the  include.css  keyword in the  # frontmatter:  #  # ---  # include.css:  # - somefile.css  # ---  #  css :  -     ^default/markdown.css  # Load up js scripts (in head)  #  # Is an array of scripts (path or link).  # If it points to a physical file, it will be included.  # PyMdown will look relative to the binary if it can t find the file.  #  # This can be overridden in a file s frontmatter via the  settings  key word:  #  # ---  # settings:  #     js:  #     -   somefile.js  # ---  #  # but if you want to append to the list, you can use the  include.js  keyword in the  # frontmatter:  #  # ---  # include.js:  # - somefile.js  # ---  #  js :   []   CSS files and JavaScript files can be URLs or file paths.  When specifying a file path, a  !  can be used to precede the path so that PyMdown will just link the file and skip converting the file to an absolute or relative path.  If the file path is preceded by a  ^ , the file content will be embedded in the HTML under a style or script tag depending on the source type.  CSS and JavaScript files can also be followed by  ;encoding  to read in the file with the specified encoding.", 
            "title": "Javascript and CSS"
        }, 
        {
            "location": "/user-guide/general-usage/#javascript-and-css-quickload-aliases", 
            "text": "Sometimes you may have files you occasionally want to include on the fly.  PyMdown allows for defining aliases that can be referenced in a file s frontmatter to include multiple JavaScript and/or CSS files.  CSS and JavaScript included in the the quick-load aliases follow the same rules as the normal  CSS and JavaScript  includes.  # Quick load aliases  #  # This is a quick way to optionally load multiple CSS and JS files when converting a specific file.  # It done using the file s frontmatter:  #  # ---  # include:  # - mathjax  # - flow  # ---  #  # You can create any key you want, but it needs to begin with  @ .  Then just use the include keyword  # in your frontmatter, and provide a list of aliases you wish to load.  Each alias can have a  css  and/or  js  keyword.  @flow : \n     js : \n         -     https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.2/raphael-min.js \n         -     flowchart-min.js \n         -     default/uml-converter.js \n         -     default/flow-loader.js  @sequence : \n     js : \n         -     https://cdnjs.cloudflare.com/ajax/libs/raphael/2.1.2/raphael-min.js \n         -     https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0/underscore-min.js \n         -     https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.4/sequence-diagram-min.js \n         -     default/uml-converter.js \n         -     default/sequence-loader.js  @mathjax : \n    js : \n         -     default/mathjax-config.js \n         -     https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML", 
            "title": "JavaScript and CSS Quickload Aliases"
        }, 
        {
            "location": "/user-guide/general-usage/#path-conversions", 
            "text": "By default, PyMdown converts paths to be relative to the output location.  If desired, this can be changed to an absolute path:  # By default resource paths are converted to relative file paths when possible;  # this disables conversion.  path_conversion_absolute :   false   If path conversion are not wanted, and disabling them inline with the  !  token is not acceptable, path conversion can be completely disabled with the following setting:  # By default resource paths are converted to relative file paths when possible;  # this disables conversion.  Previews will still convert paths to render preview proper.  disable_path_conversion :   false    Note  PyMdown utilizes the  pathconverter  extension to convert links and references in the actual markdown content.  If  pathconverter  is manually configured instead of letting PyMdown handle it, these settings will have no effect.  The other exception is with previews.  In order for links and references to work in previews, they must be paths that are relative to the preview s temp directory or they must be absolute paths.  For this reason, PyMdown will always enable path conversions for previews.  If you have manually set up the  pathconverter  extension, preview s will overwrite the  relative_path  argument to ensure it is set to  ${OUTPUT}  which will allow the preview to display content properly by making asset paths relative to the previews location.  By default, the  relative_path  is set to  ${REL_PATH}  which is the output path by default, but can be altered via the command line option  --relpath  or the  relpath  frontmatter option.", 
            "title": "Path Conversions"
        }, 
        {
            "location": "/user-guide/general-usage/#python-markdown-extensions", 
            "text": "Extensions to be used are defined under the  extensions  keyword.   extensions  is an ordered key/value pair. An extension has a name followed by  :  in yaml format.  If you want to include settings parameters, you can include those as the extension value.  All parameters should be done as key/value pairs as shown below.  extensions : \n     markdown.extensions.extra : \n     markdown.extensions.toc : \n         title :   Table of Contents \n     markdown.extensions.codehilite : \n         guess_lang :   false \n     markdown.extensions.smarty : \n     markdown.extensions.wikilinks : \n     markdown.extensions.admonition : \n     markdown.extensions.nl2br : \n     pymdown.pymdown : \n     pymdown.b64 : \n         base_path :   ${BASE_PATH} \n     pymdown.critic :", 
            "title": "Python Markdown Extensions"
        }, 
        {
            "location": "/user-guide/general-usage/#frontmatter", 
            "text": "Frontmatter can be used at the very beginning of a Markdown file.  Frontmatter blocks begin with  ---  and end with  --- .  Frontmatter must be the very beginning of the file and start on the very first line.  PyMdown front matter content can be either YAML or JSON (JSON is modified to allow JavaScript comments).  The frontmatter is a dictionary of key value pairs which are translated into meta data for all keys except for a few  special  keywords.  For meta data, the key will become the content of the  meta  tag s  name  attribute, and the value will become the data for the  content  attribute.  If an array is specified as the value, each member of the array will be converted to a string and all of them will be strung together and separated by commas.  In all other cases, the value will just be converted to a string.  PyMdown has a few keywords that can be defined to alter the output.     Keyword  Description      title  This item is used in the HTML s title tag.    destination  This keyword is the location and file name were the output should be placed.    references  This can specify a separate Markdown file containing footnotes, attributes, etc. This feature could be abused to just insert normal Markdown files into other Markdown files; PyMdown currently does nothing to prevent this, but this is not really advised. References can be followed by  ;encoding  to specify the read encoding. By default, the encoding from the command line will be used, but this can override it.    basepath  This is used to specify the path that PyMdown should use to look for reference material like CSS or JS files and even  references  defined in the frontmatter. It is also used in plugins such as  pathconverter  and  b64 .  This can override the  basepath  fed in at the command line.    relpath  This is used to specify the path that images and paths are relative to. It is used in plugins such as  pathconverter .  This can override the  relpath  fed in at the command line.    include  This keyword s value is an array of strings and accepts  quickload aliases  (the  @  symbol is omitted from the name). So if a quickload alias named  @alias  is desired,  alias  would be defined under the  include  keyword.    include.css  This keyword s value is an array of strings denoting additional single CSS files to include.  They follow the same convention as CSS defined in the settings file:  ;encoding  at tail will define the encoding used to access the file, paths starting with  !  will not have their path converted to absolute or relative paths, and  ^  will directly embed the content in the HTML file.    include.js  This keyword s value is an array of strings denoting additional single JavaScript files to include.  They follow the same convention as JavaScript defined in the settings file:  ;encoding  at tail will define the encoding used to access the file, paths starting with  !  will not have their path converted to absolute or relative paths, and  ^  will directly embed the content in the HTML file.    settings  This is a dictionary and allows the overriding of any of the settings found in the original configuration file.", 
            "title": "Frontmatter"
        }, 
        {
            "location": "/user-guide/pygments-customization/", 
            "text": "Pygments Customization\n\n\nAdding Pygments themes.\n\n\n\n\nOverview\n\n\nPygments allows for people to write their own lexers and styles, but they need to have an entry point of \npygments.lexers\n or \npygments.styles\n for the respective plugin type.  This can only be done by either directly adding your plugin to the Pygments package, or creating and installing your own package that defines the entry points as mentioned.  If you know how to create your own package and install it, PyMdown should be able to use it.  If you are compiling a binary with pyinstaller, you will have to \nmodify\n the \nbuild_vars.py\n file.\n\n\nCreate Your Own Pygments Styles and Lexers\n\n\nPyMdown comes with a couple of optional \nstyles\n and \nlexers\n that can be included.  They don\nt offer anything that is \nneeded\n, but you can use these two repositories as an example.\n\n\nOnce the lexer or style is written, you have to edit the \n__init__.py\n file and expose your module (style example shown below):\n\n\nfrom\n \n.tomorrow\n \nimport\n \nTomorrowStyle\n\n\nfrom\n \n.tomorrownight\n \nimport\n \nTomorrownightStyle\n\n\nfrom\n \n.tomorrownightblue\n \nimport\n \nTomorrownightblueStyle\n\n\nfrom\n \n.tomorrownightbright\n \nimport\n \nTomorrownightbrightStyle\n\n\nfrom\n \n.tomorrownighteighties\n \nimport\n \nTomorrownighteightiesStyle\n\n\nfrom\n \n.github\n \nimport\n \nGithubStyle\n\n\nfrom\n \n.github2\n \nimport\n \nGithub2Style\n\n\n\n\n\n\nThen edit the \nsetup.py\n file and define the entry point (style example shown below):\n\n\nfrom\n \nsetuptools\n \nimport\n \nsetup\n,\n \nfind_packages\n\n\n\nentry_points\n \n=\n \n\n\n[pygments.styles]\n\n\ngithub=pymdown_styles:GithubStyle\n\n\ngithub2=pymdown_styles:Github2Style\n\n\ntomorrow=pymdown_styles:TomorrowStyle\n\n\ntomorrownight=pymdown_styles:TomorrownightStyle\n\n\ntomorrownightblue=pymdown_styles:TomorrownightblueStyle\n\n\ntomorrownightbright=pymdown_styles:TomorrownightbrightStyle\n\n\ntomorrownighteighties=pymdown_styles:TomorrownighteightiesStyle\n\n\n\n\n\nsetup\n(\n\n    \nname\n=\npymdown-styles\n,\n\n    \nversion\n=\n1.0\n,\n\n    \npackages\n=\nfind_packages\n(),\n\n    \nentry_points\n=\nentry_points\n,\n\n    \nzip_safe\n=\nTrue\n\n\n)\n\n\n\n\n\n\nModify Pyinstaller Build\n\n\nIf you are building with a binary with Pyinstaller, and you want your custom package to be included, you can add the package name in \nbuild_vars.py\n under the \nhidden_imports_to_crawl\n list.\n\n\n\n\nNote\n\n\nIn your custom packages, it is recommended to not specify dependencies in your python \nsetup.py\n file as doing so may cause the PyMdown binary to fail when checking the package dependencies.\n\n\n\n\nhidden_imports_to_crawl\n \n=\n \n[\n\n    \npymdown_styles\n,\n\n    \npymdown_lexers\n\n\n]", 
            "title": "Pygments Customization"
        }, 
        {
            "location": "/user-guide/pygments-customization/#pygments-customization", 
            "text": "Adding Pygments themes.", 
            "title": "Pygments Customization"
        }, 
        {
            "location": "/user-guide/pygments-customization/#overview", 
            "text": "Pygments allows for people to write their own lexers and styles, but they need to have an entry point of  pygments.lexers  or  pygments.styles  for the respective plugin type.  This can only be done by either directly adding your plugin to the Pygments package, or creating and installing your own package that defines the entry points as mentioned.  If you know how to create your own package and install it, PyMdown should be able to use it.  If you are compiling a binary with pyinstaller, you will have to  modify  the  build_vars.py  file.", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/pygments-customization/#create-your-own-pygments-styles-and-lexers", 
            "text": "PyMdown comes with a couple of optional  styles  and  lexers  that can be included.  They don t offer anything that is  needed , but you can use these two repositories as an example.  Once the lexer or style is written, you have to edit the  __init__.py  file and expose your module (style example shown below):  from   .tomorrow   import   TomorrowStyle  from   .tomorrownight   import   TomorrownightStyle  from   .tomorrownightblue   import   TomorrownightblueStyle  from   .tomorrownightbright   import   TomorrownightbrightStyle  from   .tomorrownighteighties   import   TomorrownighteightiesStyle  from   .github   import   GithubStyle  from   .github2   import   Github2Style   Then edit the  setup.py  file and define the entry point (style example shown below):  from   setuptools   import   setup ,   find_packages  entry_points   =    [pygments.styles]  github=pymdown_styles:GithubStyle  github2=pymdown_styles:Github2Style  tomorrow=pymdown_styles:TomorrowStyle  tomorrownight=pymdown_styles:TomorrownightStyle  tomorrownightblue=pymdown_styles:TomorrownightblueStyle  tomorrownightbright=pymdown_styles:TomorrownightbrightStyle  tomorrownighteighties=pymdown_styles:TomorrownighteightiesStyle   setup ( \n     name = pymdown-styles , \n     version = 1.0 , \n     packages = find_packages (), \n     entry_points = entry_points , \n     zip_safe = True  )", 
            "title": "Create Your Own Pygments Styles and Lexers"
        }, 
        {
            "location": "/user-guide/pygments-customization/#modify-pyinstaller-build", 
            "text": "If you are building with a binary with Pyinstaller, and you want your custom package to be included, you can add the package name in  build_vars.py  under the  hidden_imports_to_crawl  list.   Note  In your custom packages, it is recommended to not specify dependencies in your python  setup.py  file as doing so may cause the PyMdown binary to fail when checking the package dependencies.   hidden_imports_to_crawl   =   [ \n     pymdown_styles , \n     pymdown_lexers  ]", 
            "title": "Modify Pyinstaller Build"
        }, 
        {
            "location": "/user-guide/pymdown-extensions/", 
            "text": "Extensions\n\n\nPyMdown extensions.\n\n\n\n\nAvailable Extensions\n\n\nA number of extensions where made specifically for the PyMdown tool.  They are collectively found at the PyMdown extensions \nrepository\n.  And though the PyMdown extensions were created to be used with PyMdown, you can use them freely as normal Python Markdown extensions outside of the PyMdown tool.  Keep in mind, the PyMdown extensions were designed to work with the default extensions.  Your mileage may vary when paired with other 3\nrd\n party extensions.  If using a compiled version of PyMdown, you will have to ensure they get compiled in.\n\n\nCheck out the individual extension document pages for more info on the available PyMdown extensions.\n\n\n\n\n\n\n\n\nExtension\n\n\nName\n\n\n\n\n\n\n\n\n\n\npymdown\n\n\npymdownx.pymdown\n\n\n\n\n\n\nbetterem\n\n\npymdownx.betterem\n\n\n\n\n\n\ncaret\n\n\npymdownx.caret\n\n\n\n\n\n\ngithubemoji\n\n\npymdownx.githubemoji\n\n\n\n\n\n\nheaderanchor\n\n\npymdownx.headeranchor\n\n\n\n\n\n\ninlinehilite\n\n\npymdownx.inlinehilite\n\n\n\n\n\n\nmagiclink\n\n\npymdownx.magiclink\n\n\n\n\n\n\nmark\n\n\npymdownx.mark\n\n\n\n\n\n\nmath\n\n\npymdownx.math\n\n\n\n\n\n\nprogressbar\n\n\npymdownx.progressbar\n\n\n\n\n\n\nsmartsymbols\n\n\npymdownx.smartsymbols\n\n\n\n\n\n\nsuperfences\n\n\npymdownx.superfences\n\n\n\n\n\n\ntasklist\n\n\npymdownx.tasklist\n\n\n\n\n\n\ntilde\n\n\npymdownx.tilde\n\n\n\n\n\n\npathconverter\n\n\npymdownx.pathconverter\n\n\n\n\n\n\nb64\n\n\npymdownx.b64\n\n\n\n\n\n\ncritic\n\n\npymdownx.critic\n\n\n\n\n\n\ngithub\n\n\npymdownx.github\n\n\n\n\n\n\nplainhtml\n\n\npymdownx.plainhtml", 
            "title": "PyMdown Extensions"
        }, 
        {
            "location": "/user-guide/pymdown-extensions/#extensions", 
            "text": "PyMdown extensions.", 
            "title": "Extensions"
        }, 
        {
            "location": "/user-guide/pymdown-extensions/#available-extensions", 
            "text": "A number of extensions where made specifically for the PyMdown tool.  They are collectively found at the PyMdown extensions  repository .  And though the PyMdown extensions were created to be used with PyMdown, you can use them freely as normal Python Markdown extensions outside of the PyMdown tool.  Keep in mind, the PyMdown extensions were designed to work with the default extensions.  Your mileage may vary when paired with other 3 rd  party extensions.  If using a compiled version of PyMdown, you will have to ensure they get compiled in.  Check out the individual extension document pages for more info on the available PyMdown extensions.     Extension  Name      pymdown  pymdownx.pymdown    betterem  pymdownx.betterem    caret  pymdownx.caret    githubemoji  pymdownx.githubemoji    headeranchor  pymdownx.headeranchor    inlinehilite  pymdownx.inlinehilite    magiclink  pymdownx.magiclink    mark  pymdownx.mark    math  pymdownx.math    progressbar  pymdownx.progressbar    smartsymbols  pymdownx.smartsymbols    superfences  pymdownx.superfences    tasklist  pymdownx.tasklist    tilde  pymdownx.tilde    pathconverter  pymdownx.pathconverter    b64  pymdownx.b64    critic  pymdownx.critic    github  pymdownx.github    plainhtml  pymdownx.plainhtml", 
            "title": "Available Extensions"
        }, 
        {
            "location": "/extensions/b64/", 
            "text": "B64\n\n\nImages to base64.\n\n\n\n\nOverview\n\n\nIn the current iteration, B64 allows for embedding images with base64 encoding.  It simply needs a base path to resolve relative links, and it will embed the images as base64 resources.  This is useful if you would like to distribute a Markdown output without having to also distribute the images separately.  In a normal website, this would probably not be desired.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbase_path\n\n\nstring\n\n\n\n\nA string indicating a base path to be used to resolve relative links.", 
            "title": "B64"
        }, 
        {
            "location": "/extensions/b64/#b64", 
            "text": "Images to base64.", 
            "title": "B64"
        }, 
        {
            "location": "/extensions/b64/#overview", 
            "text": "In the current iteration, B64 allows for embedding images with base64 encoding.  It simply needs a base path to resolve relative links, and it will embed the images as base64 resources.  This is useful if you would like to distribute a Markdown output without having to also distribute the images separately.  In a normal website, this would probably not be desired.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/b64/#options", 
            "text": "Option  Type  Default  Description      base_path  string   A string indicating a base path to be used to resolve relative links.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/betterem/", 
            "text": "BetterEm\n\n\nBetter Emphasis.\n\n\n\n\nOverview\n\n\nBetterEm is an extension that aims to improve emphasis (bold and italic) handling.  It provides two modes for both asterisk and underscore bold and italics: \nsmart\n when \nsmart_enable\n is turned on and normal if \nsmart_enable\n is turned off.  BetterEm overrides all the current bold and italic rules in Python Markdown with its own.  When \nsmart\n is enabled for either asterisks and/or underscores, it is enabled for all variants: single, double, and triple.  When \nsmart\n is enabled, the behavior will be very similar in feel to \nGFM\n bold and italic (but not necessarily exact).\n\n\nDifferences\n\n\n\n\nNote\n\n\nFor all examples on this page, underscores are \nsmart\n and asterisks are not.\n\n\n\n\nBetterEm requires that non-whitespace characters follow the opening token(s) and precede the closing token(s).\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n* Won't highlight *\n\n\n* Won\nt be italic *\n\n\n\n\n\n\n*Will highlight*\n\n\nWill be italic\n\n\n\n\n\n\n\n\nBetterEm allows for a more natural nested token feel.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n***I'm italic and bold* I am just bold.**\n\n\nI\nm italic and bold\n I am just bold.\n\n\n\n\n\n\n***I'm bold and italic!** I am just italic.*\n\n\nI\nm bold and italic!\n I am just italic.\n\n\n\n\n\n\n\n\nBetterEm will ensure smart mode doesn\nt terminate in scenarios where there are a large amount of consecutive tokens inside.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n___A lot of underscores____________is okay___\n\n\nA lot of underscores____________is okay\n\n\n\n\n\n\n\n\nBetterEm will also ensure that smart mode breaks proper when an inner like token signifies an end.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n__This will all be bold __because of the placement of the center underscores.__\n\n\nThis will all be bold __because of the placement of the center underscores.\n\n\n\n\n\n\n__This will all be bold __ because of the placement of the center underscores.__\n\n\nThis will all be bold __ because of the placement of the center asterisks.\n\n\n\n\n\n\n__This will NOT all be bold__ because of the placement of the center underscores.__\n\n\nThis will NOT all be bold\n because of the placement of the center underscores.__\n\n\n\n\n\n\n__This will all be bold_ because of the token is less than that of the surrounding.__\n\n\nThis will all be bold_ because the token count is less than that of the surrounding.\n\n\n\n\n\n\n\n\nBetterEm will allow non-smart emphasis to contain \nfloating\n like tokens.\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n*All will * be italic*\n\n\nAll will * be italic\n\n\n\n\n\n\n*All will *be italic*\n\n\nAll will *be italic\n\n\n\n\n\n\n*All not all will* be italic*\n\n\nAll will not\n be italic*\n\n\n\n\n\n\n*All not all will ** be italic*\n\n\nAll will not *\n be italic*\n\n\n\n\n\n\n**All will * be bold**\n\n\nAll will * be bold\n\n\n\n\n\n\n*All will *be bold**\n\n\nAll will *be bold\n\n\n\n\n\n\n**All will not*** be bold**\n\n\nAll will not\n* be bold**\n\n\n\n\n\n\n**All will not *** be bold**\n\n\nAll will not *\nbe bold**\n\n\n\n\n\n\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_enable\n\n\nstring\n\n\nunderscore\n\n\nA string that specifies whether smart should be enabled for \nall\n, \nasterisk\n, \nunderscore\n, or \nnone\n.\n\n\n\n\n\n\n\n\nExamples\n\n\nUsage is the __same__ as usual.  Just keep in mind the _differences_.  Markdown is un**freaking**believable :smile:.\n\n\n\n\n\nUsage is the \nsame\n as usual.  Just keep in mind the \ndifferences\n.  Markdown is un\nfreaking\nbelievable \n.", 
            "title": "BetterEm"
        }, 
        {
            "location": "/extensions/betterem/#betterem", 
            "text": "Better Emphasis.", 
            "title": "BetterEm"
        }, 
        {
            "location": "/extensions/betterem/#overview", 
            "text": "BetterEm is an extension that aims to improve emphasis (bold and italic) handling.  It provides two modes for both asterisk and underscore bold and italics:  smart  when  smart_enable  is turned on and normal if  smart_enable  is turned off.  BetterEm overrides all the current bold and italic rules in Python Markdown with its own.  When  smart  is enabled for either asterisks and/or underscores, it is enabled for all variants: single, double, and triple.  When  smart  is enabled, the behavior will be very similar in feel to  GFM  bold and italic (but not necessarily exact).", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/betterem/#differences", 
            "text": "Note  For all examples on this page, underscores are  smart  and asterisks are not.   BetterEm requires that non-whitespace characters follow the opening token(s) and precede the closing token(s).     Test  Result      * Won't highlight *  * Won t be italic *    *Will highlight*  Will be italic     BetterEm allows for a more natural nested token feel.     Test  Result      ***I'm italic and bold* I am just bold.**  I m italic and bold  I am just bold.    ***I'm bold and italic!** I am just italic.*  I m bold and italic!  I am just italic.     BetterEm will ensure smart mode doesn t terminate in scenarios where there are a large amount of consecutive tokens inside.     Test  Result      ___A lot of underscores____________is okay___  A lot of underscores____________is okay     BetterEm will also ensure that smart mode breaks proper when an inner like token signifies an end.     Test  Result      __This will all be bold __because of the placement of the center underscores.__  This will all be bold __because of the placement of the center underscores.    __This will all be bold __ because of the placement of the center underscores.__  This will all be bold __ because of the placement of the center asterisks.    __This will NOT all be bold__ because of the placement of the center underscores.__  This will NOT all be bold  because of the placement of the center underscores.__    __This will all be bold_ because of the token is less than that of the surrounding.__  This will all be bold_ because the token count is less than that of the surrounding.     BetterEm will allow non-smart emphasis to contain  floating  like tokens.     Test  Result      *All will * be italic*  All will * be italic    *All will *be italic*  All will *be italic    *All not all will* be italic*  All will not  be italic*    *All not all will ** be italic*  All will not *  be italic*    **All will * be bold**  All will * be bold    *All will *be bold**  All will *be bold    **All will not*** be bold**  All will not * be bold**    **All will not *** be bold**  All will not * be bold**", 
            "title": "Differences"
        }, 
        {
            "location": "/extensions/betterem/#options", 
            "text": "Option  Type  Default  Description      smart_enable  string  underscore  A string that specifies whether smart should be enabled for  all ,  asterisk ,  underscore , or  none .     Examples  Usage is the __same__ as usual.  Just keep in mind the _differences_.  Markdown is un**freaking**believable :smile:.   Usage is the  same  as usual.  Just keep in mind the  differences .  Markdown is un freaking believable  .", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/caret/", 
            "text": "Caret\n\n\nAdditional caret based syntax.\n\n\n\n\nOverview\n\n\nCaret optionally adds two different features which are syntactically built around the \n^\n character: \ninsert\n which inserts \nins\n/ins\n tags and \nsuperscript\n which inserts \nsup\n/sup\n tags.  Syntax behavior for smart and non-smart variants of \ninsert\n models that of \nbetterem\n.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_insert\n\n\nbool\n\n\nTrue\n\n\nUse smart logic with insert characters: \n^^underline^^me^^\n \n \nunderline^^me\n.\n\n\n\n\n\n\ninsert\n\n\nbool\n\n\nTrue\n\n\nEnable insert feature.\n\n\n\n\n\n\nsuperscript\n\n\nbool\n\n\nTrue\n\n\nEnable superscript feature.\n\n\n\n\n\n\n\n\nExamples\n\n\nThe first feature adds underline emphasis (\nins\n tags) when inline text is surrounded by double carets: \n^^underline me^^\n \n \nunderline me\n.  It can optionally be configured to use smart logic: \n^^underline^^me^^\n \n \nunderline^^me\n.\n\n\nThe second feature adds superscript using single carets: \nH^2^0\n \n H\n2\n0.  It uses Pandoc style logic, so if your superscript needs to have spaces, you must escape the spaces: \ntext^a\\ superscript^\n \n text\na superscript\n.", 
            "title": "Caret"
        }, 
        {
            "location": "/extensions/caret/#caret", 
            "text": "Additional caret based syntax.", 
            "title": "Caret"
        }, 
        {
            "location": "/extensions/caret/#overview", 
            "text": "Caret optionally adds two different features which are syntactically built around the  ^  character:  insert  which inserts  ins /ins  tags and  superscript  which inserts  sup /sup  tags.  Syntax behavior for smart and non-smart variants of  insert  models that of  betterem .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/caret/#options", 
            "text": "Option  Type  Default  Description      smart_insert  bool  True  Use smart logic with insert characters:  ^^underline^^me^^     underline^^me .    insert  bool  True  Enable insert feature.    superscript  bool  True  Enable superscript feature.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/caret/#examples", 
            "text": "The first feature adds underline emphasis ( ins  tags) when inline text is surrounded by double carets:  ^^underline me^^     underline me .  It can optionally be configured to use smart logic:  ^^underline^^me^^     underline^^me .  The second feature adds superscript using single carets:  H^2^0    H 2 0.  It uses Pandoc style logic, so if your superscript needs to have spaces, you must escape the spaces:  text^a\\ superscript^    text a superscript .", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/critic/", 
            "text": "Critic\n\n\nProcess and visualize Critic Markup.\n\n\n\n\nOverview\n\n\nCritic is an extension that adds handling and support of \nCritic Markup\n.  This extension runs before all other extensions to parse the critic edits.  It allows for the stripping or accepting of critic modifications and modifies the source to reflect the rejection or accepting of the edits (mark wrappers and comments are stripped in both cases).  It also allows for visually displaying the changes in HTML output (\nmileage may vary\n).\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nstring\n\n\nview\n\n\nview\n just parses the markup and displays it in its HTML equivalent rendering.  \naccept\n strips out the critic markup and replacing them with the suggested changes.  \nreject\n rejects all the suggestions and strips the critic markup out replacing it with the original.\n\n\n\n\n\n\n\n\nLimitations with Previewing Critic Markup\n\n\nCriticMarkup, in general works very well.  Parsing the critic marks is very straight forward.  If you need to reject critic marks or accept them, the critic extension will work quite well.  But when trying to render the edits visually \nand\n trying to convert the document to HTML, things can get ugly.  I think this is really a design flaw with CriticMarkup.  The existence of the critic edits can alter the actual source.  Its a fantastic idea, but it should be understood that when using CriticMarkup beyond inline or block paragraphs, there is a possibility that invalid HTML will be created when viewing (especially in relation to lists or if breaking up Markdown syntax).  I think Fletcher said it best here: \nhttp://fletcher.github.io/MultiMarkdown-4/criticmarkup\n.\n\n\nThe critic extension does its best by employing a preprocessor to inject the critic tags before all other parsing and a post-processor to clean up some the weird side effects of the injection (only selected odd cases as others are more difficult to fix).  It injects some classes into the edit region\ns HTML output to allow for CSS styling to render them as well.  There is probably a lot more post-processing that could be done to fix more issues, but I am not yet sure how much further down that road I am willing to go.\n\n\nExamples\n\n\n\n\n\n\n\n\nMarkup\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n{--delete--}\n\n\ndelete\n\n\n\n\n\n\n{++delete++}\n\n\ninsert\n\n\n\n\n\n\n{~~delete and replace~\nsubstitutions~~}\n\n\ndelete and replace\nsubstitutions\n\n\n\n\n\n\n{==highlight==}\n\n\nhighlight\n\n\n\n\n\n\n{\ncomment\n}\n\n\ntext\ncomment\n\n\n\n\n\n\n\n\nHere they are in action:\n\n\nHere\n \nis\n \nsome\n \n{--*incorrect*--}\n \nMarkdown.\n  \nI\n \nam\n \nadding\n \nthis\n{++ here.++}\n.\n  \nHere\n \nis\n \nsome\n \nmore\n \n{--text\n\n\nthat I am removing--}\ntext.\n  \nAnd\n \nhere\n \nis\n \neven\n \nmore\n \n{++text that I\n\n\nam ++}\nadding.\n{~~\n\n\n\n~\n  ~~}\nParagraph\n \nwas\n \ndeleted\n \nand\n \nreplaced\n \nwith\n \nsome\n \nspaces.\n{~~  ~\n\n\n\n~~}\nSpaces\n \nwere\n \nremoved\n \nand\n \na\n \nparagraph\n \nwas\n \nadded.\n\nAnd\n \nhere\n \nis\n \na\n \ncomment\n \non\n \n{==some\n\n\n==text== ==}{\nThis works quite well. I just wanted to comment on it.\n}\n.\n \nSubstitutions\n \n{~~is~\nare~~}\n \ngreat!\n\nEscape\n \n\\{\nThis text is preserved\n}.\n\nGeneral\n \nblock\n \nhandling.\n\n\n{--\n\n\n\n* test\n\n\n* test\n\n\n* test\n\n\n    * test\n\n\n* test\n\n\n\n--}\n\n\n\n{++\n\n\n\n* test\n\n\n* test\n\n\n* test\n\n\n    * test\n\n\n* test\n\n\n\n++}\n\n\n\n\n\n\nHere is some \nincorrect\n Markdown.  I am adding this\n here.\n.  Here is some more \ntext\n\nthat I am removing\ntext.  And here is even more \ntext that I\n\nam \nadding.\n  \nParagraph was deleted and replaced with some spaces.\n  \n\n\n\n\nSpaces were removed and a paragraph was added.\n\n\nAnd here is a comment on \nsome\n\n\ntext\n \nThis works quite well. I just wanted to comment on it.\n. Substitutions \nis\nare\n great!\n\n\nEscape {\nThis text is preserved\n}.\n\n\nGeneral block handling.\n\n\n\n\n\n\ntest\n\n\ntest\n\n\ntest\n\n\ntest\n\n\n\n\n\n\ntest\n\n\n\n\n\n\n\n\n\n\ntest\n\n\ntest\n\n\ntest\n\n\ntest\n\n\n\n\n\n\ntest\n\n\n\n\n\n\nCSS\n\n\nCritic renders the CriticMarkup with the following classes.\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncritic\n\n\nThis is applied to all critic edits.\n\n\n\n\n\n\nbreak\n\n\nThis is applied to critic inserts or deletes that encompass \nonly\n 2+ newlines.\n\n\n\n\n\n\nblock\n\n\nApplied to critic HTML tags that are detected as surrounding a block region.\n\n\n\n\n\n\ncomment\n\n\nA CriticMarkup comment.\n\n\n\n\n\n\n\n\nThis is the CSS used for this page.\n\n\n/* Critic Markup */\n\n\n.markdown-body\n \n.critic\n \n{\n\n  \nfont-family\n:\n \ninherit\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder-style\n:\n \nsolid\n;\n\n  \nborder-width\n:\n \n1px\n;\n\n  \npadding-top\n:\n \n0.1em\n;\n\n  \npadding-bottom\n:\n \n0.1em\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \n.critic\n:before\n,\n\n\n.markdown-body\n \n.critic\n:after\n \n{\n\n  \ncontent\n:\n \n\\00a0\n;\n\n  \npadding-top\n:\n \n0.1em\n;\n\n  \npadding-bottom\n:\n \n0.1em\n;\n\n  \nfont-size\n:\n \ninitial\n;\n\n\n}\n\n\n\n.markdown-body\n \n.block\n:before\n,\n\n\n.markdown-body\n \n.block\n:after\n \n{\n\n  \ncontent\n:\n \n;\n\n\n}\n\n\n\n.markdown-body\n \nmark\n.critic\n \n{\n\n  \nborder-color\n:\n \n#ff8600\n;\n\n  \nbackground\n:\n \n#ffddaa\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.critic\n \n{\n\n  \nborder-color\n:\n \n#00bb00\n;\n\n  \nbackground\n:\n \n#ddffdd\n;\n\n\n}\n\n\n\n.markdown-body\n \ndel\n.critic\n \n{\n\n  \nborder-color\n:\n \n#dd0000\n;\n\n  \nbackground\n:\n \n#ffdddd\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.break\n,\n\n\n.markdown-body\n \ndel\n.break\n \n{\n\n  \nfont-size\n:\n \n0\n;\n\n  \nborder\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.break\n:before\n,\n\n\n.markdown-body\n \ndel\n.break\n:before\n \n{\n\n  \ncontent\n:\n \n\\00a0\\b6\\00a0\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.after\n,\n\n\n.markdown-body\n \ndel\n.after\n \n{\n\n  \ncontent\n:\n \n;\n\n\n}\n\n\n\n.markdown-body\n \nins\n.break\n:before\n \n{\n\n  \ncolor\n:\n \n#00bb00\n;\n\n  \nborder\n:\n \n1px\n \nsolid\n \n#00bb00\n;\n\n  \nbackground\n:\n \n#ddffdd\n;\n\n\n}\n\n\n\n.markdown-body\n \ndel\n.break\n:before\n \n{\n\n  \ncolor\n:\n \n#bb0000\n;\n\n  \nborder\n:\n \n1px\n \nsolid\n \n#bb0000\n;\n\n  \nbackground\n:\n \n#ffdddd\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n \n{\n\n  \nbackground\n:\n \n#ddddff\n;\n\n  \nborder\n:\n \n0\n;\n\n  \nborder-top\n:\n \n1px\n \nsolid\n \n#0000bb\n;\n\n  \nborder-bottom\n:\n \n1px\n \nsolid\n \n#0000bb\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n:before\n,\n\n\n.markdown-body\n \nspan\n.critic\n:after\n \n{\n\n  \nfont-size\n:\n \ninherit\n;\n\n  \nbackground\n:\n \n#ddddff\n;\n\n  \nborder\n:\n \n1px\n \nsolid\n \n#0000bb\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n:before\n \n{\n\n  \ncontent\n:\n \n\\00a0\\bb\n;\n\n  \nborder-right\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\nborder-top\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-top\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \nborder-top\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \n-\nwebkit\n-\nborder-bottom\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-bottom\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n  \nborder-bottom\n-\nleft\n-\nradius\n:\n \n3px\n;\n\n\n}\n\n\n\n.markdown-body\n \nspan\n.critic\n:after\n \n{\n\n  \ncontent\n:\n \n\\ab\\00a0\n;\n\n  \nborder-left\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\nborder-top\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-top\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \nborder-top\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \n-\nwebkit\n-\nborder-bottom\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder-bottom\n-\nright\n-\nradius\n:\n \n3px\n;\n\n  \nborder-bottom\n-\nright\n-\nradius\n:\n \n3px\n;\n\n\n}\n\n\n\n.markdown-body\n \n.block\n \n{\n\n  \ndisplay\n:\n \nblock\n;\n\n  \npadding\n:\n \n.02em\n;\n\n\n}", 
            "title": "Critic"
        }, 
        {
            "location": "/extensions/critic/#critic", 
            "text": "Process and visualize Critic Markup.", 
            "title": "Critic"
        }, 
        {
            "location": "/extensions/critic/#overview", 
            "text": "Critic is an extension that adds handling and support of  Critic Markup .  This extension runs before all other extensions to parse the critic edits.  It allows for the stripping or accepting of critic modifications and modifies the source to reflect the rejection or accepting of the edits (mark wrappers and comments are stripped in both cases).  It also allows for visually displaying the changes in HTML output ( mileage may vary ).", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/critic/#options", 
            "text": "Option  Type  Default  Description      mode  string  view  view  just parses the markup and displays it in its HTML equivalent rendering.   accept  strips out the critic markup and replacing them with the suggested changes.   reject  rejects all the suggestions and strips the critic markup out replacing it with the original.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/critic/#limitations-with-previewing-critic-markup", 
            "text": "CriticMarkup, in general works very well.  Parsing the critic marks is very straight forward.  If you need to reject critic marks or accept them, the critic extension will work quite well.  But when trying to render the edits visually  and  trying to convert the document to HTML, things can get ugly.  I think this is really a design flaw with CriticMarkup.  The existence of the critic edits can alter the actual source.  Its a fantastic idea, but it should be understood that when using CriticMarkup beyond inline or block paragraphs, there is a possibility that invalid HTML will be created when viewing (especially in relation to lists or if breaking up Markdown syntax).  I think Fletcher said it best here:  http://fletcher.github.io/MultiMarkdown-4/criticmarkup .  The critic extension does its best by employing a preprocessor to inject the critic tags before all other parsing and a post-processor to clean up some the weird side effects of the injection (only selected odd cases as others are more difficult to fix).  It injects some classes into the edit region s HTML output to allow for CSS styling to render them as well.  There is probably a lot more post-processing that could be done to fix more issues, but I am not yet sure how much further down that road I am willing to go.", 
            "title": "Limitations with Previewing Critic Markup"
        }, 
        {
            "location": "/extensions/critic/#examples", 
            "text": "Markup  Example      {--delete--}  delete    {++delete++}  insert    {~~delete and replace~ substitutions~~}  delete and replace substitutions    {==highlight==}  highlight    { comment }  text comment     Here they are in action:  Here   is   some   {--*incorrect*--}   Markdown.    I   am   adding   this {++ here.++} .    Here   is   some   more   {--text  that I am removing--} text.    And   here   is   even   more   {++text that I  am ++} adding. {~~  ~   ~~} Paragraph   was   deleted   and   replaced   with   some   spaces. {~~  ~  ~~} Spaces   were   removed   and   a   paragraph   was   added.\n\nAnd   here   is   a   comment   on   {==some  ==text== ==}{ This works quite well. I just wanted to comment on it. } .   Substitutions   {~~is~ are~~}   great!\n\nEscape   \\{ This text is preserved }.\n\nGeneral   block   handling. {--  * test  * test  * test      * test  * test  --}  {++  * test  * test  * test      * test  * test  ++}   Here is some  incorrect  Markdown.  I am adding this  here. .  Here is some more  text \nthat I am removing text.  And here is even more  text that I \nam  adding.    Paragraph was deleted and replaced with some spaces.      Spaces were removed and a paragraph was added.  And here is a comment on  some  text   This works quite well. I just wanted to comment on it. . Substitutions  is are  great!  Escape { This text is preserved }.  General block handling.    test  test  test  test    test      test  test  test  test    test", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/critic/#css", 
            "text": "Critic renders the CriticMarkup with the following classes.     Classes  Description      critic  This is applied to all critic edits.    break  This is applied to critic inserts or deletes that encompass  only  2+ newlines.    block  Applied to critic HTML tags that are detected as surrounding a block region.    comment  A CriticMarkup comment.     This is the CSS used for this page.  /* Critic Markup */  .markdown-body   .critic   { \n   font-family :   inherit ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ; \n   border-style :   solid ; \n   border-width :   1px ; \n   padding-top :   0.1em ; \n   padding-bottom :   0.1em ; \n   text-decoration :   none ;  }  .markdown-body   .critic :before ,  .markdown-body   .critic :after   { \n   content :   \\00a0 ; \n   padding-top :   0.1em ; \n   padding-bottom :   0.1em ; \n   font-size :   initial ;  }  .markdown-body   .block :before ,  .markdown-body   .block :after   { \n   content :   ;  }  .markdown-body   mark .critic   { \n   border-color :   #ff8600 ; \n   background :   #ffddaa ;  }  .markdown-body   ins .critic   { \n   border-color :   #00bb00 ; \n   background :   #ddffdd ;  }  .markdown-body   del .critic   { \n   border-color :   #dd0000 ; \n   background :   #ffdddd ;  }  .markdown-body   ins .break ,  .markdown-body   del .break   { \n   font-size :   0 ; \n   border :   none ;  }  .markdown-body   ins .break :before ,  .markdown-body   del .break :before   { \n   content :   \\00a0\\b6\\00a0 ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ;  }  .markdown-body   ins .after ,  .markdown-body   del .after   { \n   content :   ;  }  .markdown-body   ins .break :before   { \n   color :   #00bb00 ; \n   border :   1px   solid   #00bb00 ; \n   background :   #ddffdd ;  }  .markdown-body   del .break :before   { \n   color :   #bb0000 ; \n   border :   1px   solid   #bb0000 ; \n   background :   #ffdddd ;  }  .markdown-body   span .critic   { \n   background :   #ddddff ; \n   border :   0 ; \n   border-top :   1px   solid   #0000bb ; \n   border-bottom :   1px   solid   #0000bb ;  }  .markdown-body   span .critic :before ,  .markdown-body   span .critic :after   { \n   font-size :   inherit ; \n   background :   #ddddff ; \n   border :   1px   solid   #0000bb ;  }  .markdown-body   span .critic :before   { \n   content :   \\00a0\\bb ; \n   border-right :   none ; \n   - webkit - border-top - left - radius :   3px ; \n   - moz - border-top - left - radius :   3px ; \n   border-top - left - radius :   3px ; \n   - webkit - border-bottom - left - radius :   3px ; \n   - moz - border-bottom - left - radius :   3px ; \n   border-bottom - left - radius :   3px ;  }  .markdown-body   span .critic :after   { \n   content :   \\ab\\00a0 ; \n   border-left :   none ; \n   - webkit - border-top - right - radius :   3px ; \n   - moz - border-top - right - radius :   3px ; \n   border-top - right - radius :   3px ; \n   - webkit - border-bottom - right - radius :   3px ; \n   - moz - border-bottom - right - radius :   3px ; \n   border-bottom - right - radius :   3px ;  }  .markdown-body   .block   { \n   display :   block ; \n   padding :   .02em ;  }", 
            "title": "CSS"
        }, 
        {
            "location": "/extensions/github/", 
            "text": "Github\n\n\nSimulation of Github Flavored Markdown.\n\n\n\n\nOverview\n\n\nThe Github extension is a convenience extension to load up and configure the minimum extensions needed to get a \nGFM\n feel.  It is not a 1:1 emulation, but some aspects are pretty close.  I don\nt really have a desire to to make it exact, but the feel is nice if you like \nGFM\n feel; some things may differ slightly.\n\n\n\n\nReminder\n\n\nBe mindful of which extensions are being loaded here.  If you load \npymdown.github\n and \nmarkdown.extensions.extra\n, you will be loading some extensions multiple times.\n\n\nYou will also need to load the \nmarkdown.extensions.codehilite\n extension yourself as well with \nguess_lang=False\n and your preferred Pygments style (if available) or use some other JavaScript highlighter.  Though there is no Github style included with the extension, the PyModwn tool comes with the original Pygments Github style (github) and the Github 2014 style (github2014) which they Github used before they ditched Pygments for their own in-house highlighter.\n\n\n\n\nExtensions that get loaded:\n\n\n\n\n\n\n\n\nExtension\n\n\nOptions\n\n\nName\n\n\n\n\n\n\n\n\n\n\nTables\n\n\n\n\nmarkdown.extensions.tables\n\n\n\n\n\n\nNew\nLine\nto\nBreak\n\n\n\n\nmarkdown.extensions.nl2b\n\n\n\n\n\n\nmagiclink\n\n\n\n\npymdownx.magiclink\n\n\n\n\n\n\nbetterem\n\n\n\n\npymdownx.betterem\n\n\n\n\n\n\ntilde\n\n\n{\nsubscript\n:\n \nFalse\n}\n\n\npymdownx.tilde\n\n\n\n\n\n\ngithubemoji\n\n\n\n\npymdownx.githubemoji\n\n\n\n\n\n\ntasklist\n\n\n\n\npymdownx.tasklist\n\n\n\n\n\n\nheaderanchor\n\n\n\n\npymdownx.headeranchor\n\n\n\n\n\n\nsuperfences\n\n\n\n\npymdownx.superfences", 
            "title": "Github"
        }, 
        {
            "location": "/extensions/github/#github", 
            "text": "Simulation of Github Flavored Markdown.", 
            "title": "Github"
        }, 
        {
            "location": "/extensions/github/#overview", 
            "text": "The Github extension is a convenience extension to load up and configure the minimum extensions needed to get a  GFM  feel.  It is not a 1:1 emulation, but some aspects are pretty close.  I don t really have a desire to to make it exact, but the feel is nice if you like  GFM  feel; some things may differ slightly.   Reminder  Be mindful of which extensions are being loaded here.  If you load  pymdown.github  and  markdown.extensions.extra , you will be loading some extensions multiple times.  You will also need to load the  markdown.extensions.codehilite  extension yourself as well with  guess_lang=False  and your preferred Pygments style (if available) or use some other JavaScript highlighter.  Though there is no Github style included with the extension, the PyModwn tool comes with the original Pygments Github style (github) and the Github 2014 style (github2014) which they Github used before they ditched Pygments for their own in-house highlighter.   Extensions that get loaded:     Extension  Options  Name      Tables   markdown.extensions.tables    New Line to Break   markdown.extensions.nl2b    magiclink   pymdownx.magiclink    betterem   pymdownx.betterem    tilde  { subscript :   False }  pymdownx.tilde    githubemoji   pymdownx.githubemoji    tasklist   pymdownx.tasklist    headeranchor   pymdownx.headeranchor    superfences   pymdownx.superfences", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/githubemoji/", 
            "text": "GithubEmoji\n\n\nGithub Emoji syntax.\n\n\n\n\nOverview\n\n\nGithubEmoji adds support for \nGFM\n emojis.  Using \nGFM\ns emoji syntax, this extension will create image links to Github\ns emoji assets: \n:octocat:\n \n \n.  It adds support for all of Github\ns supported emojis (at the time of writing this).\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncss_class\n\n\nstring\n\n\nemoji\n\n\nInsert the given class name into the img tag.  To disable class name insertion, provide an empty string.\n\n\n\n\n\n\n\n\nExamples\n\n\nGithub :octocat: emojis are very useful :thumbsup:.\n\n\n\n\n\nGithub \n emojis are very useful \n.", 
            "title": "GithubEmoji"
        }, 
        {
            "location": "/extensions/githubemoji/#githubemoji", 
            "text": "Github Emoji syntax.", 
            "title": "GithubEmoji"
        }, 
        {
            "location": "/extensions/githubemoji/#overview", 
            "text": "GithubEmoji adds support for  GFM  emojis.  Using  GFM s emoji syntax, this extension will create image links to Github s emoji assets:  :octocat:     .  It adds support for all of Github s supported emojis (at the time of writing this).", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/githubemoji/#options", 
            "text": "Option  Type  Default  Description      css_class  string  emoji  Insert the given class name into the img tag.  To disable class name insertion, provide an empty string.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/githubemoji/#examples", 
            "text": "Github :octocat: emojis are very useful :thumbsup:.  Github   emojis are very useful  .", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/headeranchor/", 
            "text": "HeaderAnchor\n\n\nGithub style header anchors.\n\n\n\n\nOverview\n\n\nHeaderAnchor adds anchors to headers in the style of \nGFM\ns header anchors. The header anchors in this document were all generated with this extension.\n\n\nOptions\n\n\nBy default, HeaderAnchor will use \nToc\ns\n settings (if \nToc\n is being used), but HeaderAnchor can be run without \nToc\n.  HeaderAnchor can also be run along side \nToc\n and ignore \nToc\ns settings; though it is advised to keep \nToc\n and HeaderAnchor\ns settings in sync to ensure header links properly link.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nseparator\n\n\nstring\n\n\n-\n\n\nIf ignoring \nToc\ns settings, this will specify the word separator used.\n\n\n\n\n\n\nslugify\n\n\nfunction\n\n\nDefault method\n\n\nIf ignoring \nToc\ns settings, this will specify the function to generate anchors based on header text.  By Default, this will use \nToc\ns default, fallback slugify method, but if for any reason \nToc\n is not installed, HeaderAnchor will fall back to an equivalent method.\n\n\n\n\n\n\nuse_toc_settings\n\n\nbool\n\n\nTrue\n\n\nThis specifies whether HeaderAnchor should get its settings from \nToc\n.  This affects \nslugify\n and \nseparator\n.\n\n\n\n\n\n\n\n\nCSS\n\n\nThis is the CSS used for rendering the header anchors in this document. While Font Awesome is used, you can substitute it with \nOcticons\n for even more of a \nGFM\n feel, or use something else entirely.\n\n\nThe HTML tags with classes are set like this:\n\n\nh1\n \nid=\ncss\n\n    \na\n \nname=\nuser-content-css\n \nhref=\n#css\n \nclass=\nheaderanchor-link\n \naria-hidden=\ntrue\n\n        \nspan\n \nclass=\nheaderanchor\n/span\n\n    \n/a\n\n    CSS\n\n/h1\n\n\n\n\n\n\nWe have two classes to work with:\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nheaderanchor-link\n\n\nThis is attached to the actual anchor tag that links to the header.\n\n\n\n\n\n\nheaderanchor\n\n\nThis is the header anchor character you see.  In this case, it is the \nlink characer from Font Awesome\n.\n\n\n\n\n\n\n\n\nThe CSS below sets the header tags to be \nrelative\n, and the \nheaderanchor-link\n class to be \nabsolute\n.  We then attach a \n:before\n pseudo element to the \nheaderanchor\n class with the desired character and position.  We play a little bit with padding and margin so when you hover over the header or where the link is supposed to be, the link appears and is accessible without causing the header position to change.\n\n\n/* Header Anchors */\n\n\n.markdown-body\n \n.headeranchor-link\n \n{\n\n  \nposition\n:\n \nabsolute\n;\n\n  \ntop\n:\n \n0\n;\n\n  \nbottom\n:\n \n0\n;\n\n  \nleft\n:\n \n0\n;\n\n  \ndisplay\n:\n \nblock\n;\n\n  \npadding-right\n:\n \n6px\n;\n\n  \npadding-left\n:\n \n30px\n;\n\n  \nmargin-left\n:\n \n-30px\n;\n\n\n}\n\n\n\n.markdown-body\n \n.headeranchor-link\n:focus\n \n{\n\n  \noutline\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \nh1\n,\n\n\n.markdown-body\n \nh2\n,\n\n\n.markdown-body\n \nh3\n,\n\n\n.markdown-body\n \nh4\n,\n\n\n.markdown-body\n \nh5\n,\n\n\n.markdown-body\n \nh6\n \n{\n\n  \nposition\n:\n \nrelative\n;\n\n\n}\n\n\n\n.markdown-body\n \nh1\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh2\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh3\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh4\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh5\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh6\n \n.headeranchor\n \n{\n\n  \ndisplay\n:\n \nnone\n;\n\n  \ncolor\n:\n \n#000\n;\n\n  \nvertical-align\n:\n \nmiddle\n;\n\n\n}\n\n\n\n.markdown-body\n \nh1\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh2\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh3\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh4\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh5\n:hover\n \n.headeranchor-link\n,\n\n\n.markdown-body\n \nh6\n:hover\n \n.headeranchor-link\n \n{\n\n  \nheight\n:\n \n1em\n;\n\n  \npadding-left\n:\n \n8px\n;\n\n  \nmargin-left\n:\n \n-30px\n;\n\n  \nline-height\n:\n \n1\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \nh1\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh2\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh3\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh4\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh5\n:hover\n \n.headeranchor-link\n \n.headeranchor\n,\n\n\n.markdown-body\n \nh6\n:hover\n \n.headeranchor-link\n \n.headeranchor\n \n{\n\n  \ndisplay\n:\n \ninline\n-\nblock\n;\n\n\n}\n\n\n\n.markdown-body\n \n.headeranchor\n \n{\n\n  \nfont\n:\n \nnormal\n \nnormal\n \n16px\n \nFontAwesome\n;\n\n  \nline-height\n:\n \n1\n;\n\n  \ndisplay\n:\n \ninline\n-\nblock\n;\n\n  \ntext-decoration\n:\n \nnone\n;\n\n  \n-\nwebkit\n-\nfont\n-\nsmoothing\n:\n \nantialiased\n;\n\n  \n-\nmoz\n-\nosx\n-\nfont\n-\nsmoothing\n:\n \ngrayscale\n;\n\n  \n-\nwebkit\n-\nuser\n-\nselect\n:\n \nnone\n;\n\n  \n-\nmoz\n-\nuser\n-\nselect\n:\n \nnone\n;\n\n  \n-\nms\n-\nuser\n-\nselect\n:\n \nnone\n;\n\n  \nuser\n-\nselect\n:\n \nnone\n;\n\n\n}\n\n\n\n.headeranchor\n:before\n \n{\n\n  \ncontent\n:\n \n\\f0c1\n;\n\n\n}", 
            "title": "HeaderAnchor"
        }, 
        {
            "location": "/extensions/headeranchor/#headeranchor", 
            "text": "Github style header anchors.", 
            "title": "HeaderAnchor"
        }, 
        {
            "location": "/extensions/headeranchor/#overview", 
            "text": "HeaderAnchor adds anchors to headers in the style of  GFM s header anchors. The header anchors in this document were all generated with this extension.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/headeranchor/#options", 
            "text": "By default, HeaderAnchor will use  Toc s  settings (if  Toc  is being used), but HeaderAnchor can be run without  Toc .  HeaderAnchor can also be run along side  Toc  and ignore  Toc s settings; though it is advised to keep  Toc  and HeaderAnchor s settings in sync to ensure header links properly link.     Option  Type  Default  Description      separator  string  -  If ignoring  Toc s settings, this will specify the word separator used.    slugify  function  Default method  If ignoring  Toc s settings, this will specify the function to generate anchors based on header text.  By Default, this will use  Toc s default, fallback slugify method, but if for any reason  Toc  is not installed, HeaderAnchor will fall back to an equivalent method.    use_toc_settings  bool  True  This specifies whether HeaderAnchor should get its settings from  Toc .  This affects  slugify  and  separator .", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/headeranchor/#css", 
            "text": "This is the CSS used for rendering the header anchors in this document. While Font Awesome is used, you can substitute it with  Octicons  for even more of a  GFM  feel, or use something else entirely.  The HTML tags with classes are set like this:  h1   id= css \n     a   name= user-content-css   href= #css   class= headeranchor-link   aria-hidden= true \n         span   class= headeranchor /span \n     /a \n    CSS /h1   We have two classes to work with:     Classes  Description      headeranchor-link  This is attached to the actual anchor tag that links to the header.    headeranchor  This is the header anchor character you see.  In this case, it is the  link characer from Font Awesome .     The CSS below sets the header tags to be  relative , and the  headeranchor-link  class to be  absolute .  We then attach a  :before  pseudo element to the  headeranchor  class with the desired character and position.  We play a little bit with padding and margin so when you hover over the header or where the link is supposed to be, the link appears and is accessible without causing the header position to change.  /* Header Anchors */  .markdown-body   .headeranchor-link   { \n   position :   absolute ; \n   top :   0 ; \n   bottom :   0 ; \n   left :   0 ; \n   display :   block ; \n   padding-right :   6px ; \n   padding-left :   30px ; \n   margin-left :   -30px ;  }  .markdown-body   .headeranchor-link :focus   { \n   outline :   none ;  }  .markdown-body   h1 ,  .markdown-body   h2 ,  .markdown-body   h3 ,  .markdown-body   h4 ,  .markdown-body   h5 ,  .markdown-body   h6   { \n   position :   relative ;  }  .markdown-body   h1   .headeranchor ,  .markdown-body   h2   .headeranchor ,  .markdown-body   h3   .headeranchor ,  .markdown-body   h4   .headeranchor ,  .markdown-body   h5   .headeranchor ,  .markdown-body   h6   .headeranchor   { \n   display :   none ; \n   color :   #000 ; \n   vertical-align :   middle ;  }  .markdown-body   h1 :hover   .headeranchor-link ,  .markdown-body   h2 :hover   .headeranchor-link ,  .markdown-body   h3 :hover   .headeranchor-link ,  .markdown-body   h4 :hover   .headeranchor-link ,  .markdown-body   h5 :hover   .headeranchor-link ,  .markdown-body   h6 :hover   .headeranchor-link   { \n   height :   1em ; \n   padding-left :   8px ; \n   margin-left :   -30px ; \n   line-height :   1 ; \n   text-decoration :   none ;  }  .markdown-body   h1 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h2 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h3 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h4 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h5 :hover   .headeranchor-link   .headeranchor ,  .markdown-body   h6 :hover   .headeranchor-link   .headeranchor   { \n   display :   inline - block ;  }  .markdown-body   .headeranchor   { \n   font :   normal   normal   16px   FontAwesome ; \n   line-height :   1 ; \n   display :   inline - block ; \n   text-decoration :   none ; \n   - webkit - font - smoothing :   antialiased ; \n   - moz - osx - font - smoothing :   grayscale ; \n   - webkit - user - select :   none ; \n   - moz - user - select :   none ; \n   - ms - user - select :   none ; \n   user - select :   none ;  }  .headeranchor :before   { \n   content :   \\f0c1 ;  }", 
            "title": "CSS"
        }, 
        {
            "location": "/extensions/inlinehilite/", 
            "text": "InlineHilite\n\n\nInline syntax highlighting.\n\n\n\n\nOverview\n\n\nInlineHilite extends \nCodeHilite\n to add inline code highlighting.  Borrowing from CodeHilite\ns existing syntax, InlineHilite utilizes the following syntax to insert inline  highlighted code: \n`:::language mycode`\n or \n`#!language mycode`\n.  We will call these specifiers mock shebangs.\n\n\nWhen using the colon mock shebang, 3 or more colons can be used.  Mock shebangs must come \nimmediately\n after the opening backtick(s) and must be followed by at least one space.  If you need to escape a mock shebang at the start of a code block, just put a space before it and it will be treated as part of the code.\n\n\n\n\nTip\n\n\nIf using Pygments, the elements should be highlighted just fine, but you may need to adjust CSS to get the general style of the inline block the way you like it.\n\n\nIf you are using a JavaScript highlighter such as \nhighlight.js\n you will most likely need to construct a JavaScript method to target the inline blocks.  You may also find it useful to tag inline blocks with a different class than the normal highlighted blocks so you can also target and style them with CSS differently.  InlineHilite allows you to have a different \ncss_class\n than what is used by \nCodeHilite\n.\n\n\n\n\nOptions\n\n\nBy default, InlineHilite will use CodeHilite\ns settings if it is being used, but InlineHilite can be run without CodeHilite, and if desired, it can be run along side it and ignore CodeHilite\ns settings.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstyle_plain_text\n\n\nbool\n\n\nFalse\n\n\nBy default, InlineHilite will ignore a code block with no language specified or the \ntext\n language specified.  No classes or style will be applied, the code block will be styled as normal.  If this is set true, text blocks will be processed and have classes injected into them even though only the plain text lexer is applied.\n\n\n\n\n\n\nuse_codehilite_settings\n\n\nbool\n\n\nTrue\n\n\nDetermine whether CodeHilite\ns settings should be used, or if InlineHilite should use a different set.\n\n\n\n\n\n\nguess_lang\n\n\nbool\n\n\nTrue\n\n\nIf ignoring CodeHilite\ns settings, determine whether InlineHilite should try to guess a code block\ns language if not specified.\n\n\n\n\n\n\ncss_class\n\n\nstring\n\n\ninlinehilite\n\n\nIf ignoring CodeHilite\ns settings, this is the class name that will be injected into code tags when they are processed.\n\n\n\n\n\n\npygments_style\n\n\nstring\n\n\ndefault\n\n\nIf ignoring CodeHilite\ns settings, this is the pygments style to use.  When using Python Markdown, this really only has an effect when using \nnoclasses\n.  But when paired with the PyMdown tool, PyMdown will actually include the relevant CSS.\n\n\n\n\n\n\nnoclasses\n\n\nbool\n\n\nFalse\n\n\nIf ignoring CodeHilite\ns settings, this will cause the styles to directly be written to the tag\ns style attribute instead of requiring a stylesheet.\n\n\n\n\n\n\nuse_pygments\n\n\nbool\n\n\nTrue\n\n\nIf Pygments is available, and if ignoring CodeHilite\ns settings, this will control whether Pygements is used on the code block, or if the block\ns content will just be escaped and prepped for a JavaScript syntax highlighter.\n\n\n\n\n\n\n\n\nExample\n\n\nHere is some code: `#!js function pad(v){return (\n0\n+v).split(\n).reverse().splice(0,2).reverse().join(\n)}`.\n\nThe mock shebang will be treated like text here: ` #!js var test = 0; `.\n\n\n\n\n\nHere is some code: \nfunction\n \npad\n(\nv\n){\nreturn\n \n(\n0\n+\nv\n).\nsplit\n(\n).\nreverse\n().\nsplice\n(\n0\n,\n2\n).\nreverse\n().\njoin\n(\n)}\n\n\nThe mock shebang will be treated like text here: \n#!js var test = 0;\n.", 
            "title": "InlineHilite"
        }, 
        {
            "location": "/extensions/inlinehilite/#inlinehilite", 
            "text": "Inline syntax highlighting.", 
            "title": "InlineHilite"
        }, 
        {
            "location": "/extensions/inlinehilite/#overview", 
            "text": "InlineHilite extends  CodeHilite  to add inline code highlighting.  Borrowing from CodeHilite s existing syntax, InlineHilite utilizes the following syntax to insert inline  highlighted code:  `:::language mycode`  or  `#!language mycode` .  We will call these specifiers mock shebangs.  When using the colon mock shebang, 3 or more colons can be used.  Mock shebangs must come  immediately  after the opening backtick(s) and must be followed by at least one space.  If you need to escape a mock shebang at the start of a code block, just put a space before it and it will be treated as part of the code.   Tip  If using Pygments, the elements should be highlighted just fine, but you may need to adjust CSS to get the general style of the inline block the way you like it.  If you are using a JavaScript highlighter such as  highlight.js  you will most likely need to construct a JavaScript method to target the inline blocks.  You may also find it useful to tag inline blocks with a different class than the normal highlighted blocks so you can also target and style them with CSS differently.  InlineHilite allows you to have a different  css_class  than what is used by  CodeHilite .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/inlinehilite/#options", 
            "text": "By default, InlineHilite will use CodeHilite s settings if it is being used, but InlineHilite can be run without CodeHilite, and if desired, it can be run along side it and ignore CodeHilite s settings.     Option  Type  Default  Description      style_plain_text  bool  False  By default, InlineHilite will ignore a code block with no language specified or the  text  language specified.  No classes or style will be applied, the code block will be styled as normal.  If this is set true, text blocks will be processed and have classes injected into them even though only the plain text lexer is applied.    use_codehilite_settings  bool  True  Determine whether CodeHilite s settings should be used, or if InlineHilite should use a different set.    guess_lang  bool  True  If ignoring CodeHilite s settings, determine whether InlineHilite should try to guess a code block s language if not specified.    css_class  string  inlinehilite  If ignoring CodeHilite s settings, this is the class name that will be injected into code tags when they are processed.    pygments_style  string  default  If ignoring CodeHilite s settings, this is the pygments style to use.  When using Python Markdown, this really only has an effect when using  noclasses .  But when paired with the PyMdown tool, PyMdown will actually include the relevant CSS.    noclasses  bool  False  If ignoring CodeHilite s settings, this will cause the styles to directly be written to the tag s style attribute instead of requiring a stylesheet.    use_pygments  bool  True  If Pygments is available, and if ignoring CodeHilite s settings, this will control whether Pygements is used on the code block, or if the block s content will just be escaped and prepped for a JavaScript syntax highlighter.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/inlinehilite/#example", 
            "text": "Here is some code: `#!js function pad(v){return ( 0 +v).split( ).reverse().splice(0,2).reverse().join( )}`.\n\nThe mock shebang will be treated like text here: ` #!js var test = 0; `.  Here is some code:  function   pad ( v ){ return   ( 0 + v ). split ( ). reverse (). splice ( 0 , 2 ). reverse (). join ( )}  The mock shebang will be treated like text here:  #!js var test = 0; .", 
            "title": "Example"
        }, 
        {
            "location": "/extensions/magiclink/", 
            "text": "MagicLink\n\n\nURL and email address auto-linking.\n\n\n\n\nOverview\n\n\nGFM\n has a nice feature that detects and auto-generates links.  This extension adds similar functionality to Python Markdown allowing you to just type or paste links; no special syntax required.  It auto-links HTML, FTP, and email links.\n\n\nExamples\n\n\nThis requires no special syntax.\n\nJust paste links directly in the document like this: https://github.com/facelessuser/PyMdown.\n\nOr even an email address fake.email@email.com.\n\n\n\n\n\nThis requires no special syntax.\n\n\nJust paste links directly in the document like this: \nhttps://github.com/facelessuser/PyMdown\n.\n\n\nOr even an email address \nfake.email@email.com\n.", 
            "title": "MagicLink"
        }, 
        {
            "location": "/extensions/magiclink/#magiclink", 
            "text": "URL and email address auto-linking.", 
            "title": "MagicLink"
        }, 
        {
            "location": "/extensions/magiclink/#overview", 
            "text": "GFM  has a nice feature that detects and auto-generates links.  This extension adds similar functionality to Python Markdown allowing you to just type or paste links; no special syntax required.  It auto-links HTML, FTP, and email links.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/magiclink/#examples", 
            "text": "This requires no special syntax.\n\nJust paste links directly in the document like this: https://github.com/facelessuser/PyMdown.\n\nOr even an email address fake.email@email.com.  This requires no special syntax.  Just paste links directly in the document like this:  https://github.com/facelessuser/PyMdown .  Or even an email address  fake.email@email.com .", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/mark/", 
            "text": "Mark\n\n\nMark syntax.\n\n\n\n\nOverview\n\n\nMark adds the ability to insert \nmark\n/mark\n tags.  The syntax requires the text to be surrounded by double equal signs.  Syntax behavior for smart and non-smart variants of \nmark\n models that of \nbetterem\n.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_mark\n\n\nbool\n\n\nTrue\n\n\nUse smart logic with mark characters: \n==mark==me==\n \n \nmark==me\n.\n\n\n\n\n\n\n\n\nExamples\n\n\nMark adds \nmark\n tags when inline text is surrounded by double equal signs: \n==mark me==\n \n \nmark me\n.  It can optionally be configured to use smart logic: \n==mark==me==\n \n \nmark==me\n.", 
            "title": "Mark"
        }, 
        {
            "location": "/extensions/mark/#mark", 
            "text": "Mark syntax.", 
            "title": "Mark"
        }, 
        {
            "location": "/extensions/mark/#overview", 
            "text": "Mark adds the ability to insert  mark /mark  tags.  The syntax requires the text to be surrounded by double equal signs.  Syntax behavior for smart and non-smart variants of  mark  models that of  betterem .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/mark/#options", 
            "text": "Option  Type  Default  Description      smart_mark  bool  True  Use smart logic with mark characters:  ==mark==me==     mark==me .", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/mark/#examples", 
            "text": "Mark adds  mark  tags when inline text is surrounded by double equal signs:  ==mark me==     mark me .  It can optionally be configured to use smart logic:  ==mark==me==     mark==me .", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/math/", 
            "text": "Math\n\n\nSyntax for MathJax support.\n\n\n\n\nOverview\n\n\nThe math extension searches for \n$\n...\n$\n or \n$$\n...\n$$\n and formats them so that \nMathJax\n can detect them in the HTML output.\n\n\n$\n...\n$\n is the inline form and requires the opening token (\n$\n) to be followed by a non-whitespace character, and the closing to be preceded by a non-whitespace character.  This is to help avoid false positives when using the dollar sign in traditional ways such as: I have $2.00 and Bob has $10.00.  The previous statement required no escaping of the \n$\n character.  But when needed, the \n$\n character can be escaped using \n\\$\n.\n\n\n$$\n...\n$$\n is the \ndisplay\n or \nblock\n form.  When using \n$$\n, the block must start with \n$$\n and end with \n$$\n; a block contains no empty lines.\n\n\nThe math extension actually converts the dollar notation to a more reliable notation in the HTML.  So the conversion is as follows: \n$\n...\n$\n -\n \n\\(\n...\n\\)\n and \n$$\n...\n$$\n -\n \n\\[\n...\n\\]\n.  Keep this in mind when configuring MathJax for your document.\n\n\nMath requires you to point the HTML at the MathJax library and provide the necessary configuration.  If using the PyMdown application, and not \njust\n the extension, PyMdown provides a script \nmathjax-loader.js\n for quick setup, though you still need to actually configure your settings to use the script and also point it at the library or cdn: \nhttps://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\n.  The PyMdown loader script does not have to be used, but is provided for quick startup and as an example.  Please see the \nMathJax\n site form more info on using MathJax.\n\n\nExamples\n\n\nSome Equations:\n\n\n$$\n\n\nE\n(\n\\mathbf\n{v}, \n\\mathbf\n{h}\n)\n \n=\n \n-\n\\sum\n_{i,j}w_{ij}v_i h_j \n-\n \n\\sum\n_i b_i v_i \n-\n \n\\sum\n_j c_j h_j\n\n\n$$\n\n\n- Here are some more equations:\n\n    \n$$\n\n\n        \n\\begin\n{align}\n\n\n            p\n(\nv_i\n=\n1\n|\n\\mathbf\n{h}\n)\n \n \n=\n \n\\sigma\\left\n(\n\\sum\n_j w_{ij}h_j \n+\n b_i\n\\right\n)\n \n\\\\\n\n\n            p\n(\nh_j\n=\n1\n|\n\\mathbf\n{v}\n)\n \n \n=\n \n\\sigma\\left\n(\n\\sum\n_i w_{ij}v_i \n+\n c_j\n\\right\n)\n\n\n        \n\\end\n{align}\n\n\n    \n$$\n\n\n- Inline equations: \n$\np\n(\nx|y\n)\n \n=\n \n\\frac\n{p\n(\ny|x\n)\np\n(\nx\n)\n}{p\n(\ny\n)\n}\n$\n.\n\n\n\n\n\nSome Equations:\n\n\n\\[\nE(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j\n\\]\n\n\n\n\n\n\nHere are some more equations:\n\n\n\\[\n    \\begin{align}\n        p(v_i=1|\\mathbf{h}) \n = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\\n        p(h_j=1|\\mathbf{v}) \n = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right)\n    \\end{align}\n\\]\n\n\n\n\n\n\nInline equations: \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).", 
            "title": "Math"
        }, 
        {
            "location": "/extensions/math/#math", 
            "text": "Syntax for MathJax support.", 
            "title": "Math"
        }, 
        {
            "location": "/extensions/math/#overview", 
            "text": "The math extension searches for  $ ... $  or  $$ ... $$  and formats them so that  MathJax  can detect them in the HTML output.  $ ... $  is the inline form and requires the opening token ( $ ) to be followed by a non-whitespace character, and the closing to be preceded by a non-whitespace character.  This is to help avoid false positives when using the dollar sign in traditional ways such as: I have $2.00 and Bob has $10.00.  The previous statement required no escaping of the  $  character.  But when needed, the  $  character can be escaped using  \\$ .  $$ ... $$  is the  display  or  block  form.  When using  $$ , the block must start with  $$  and end with  $$ ; a block contains no empty lines.  The math extension actually converts the dollar notation to a more reliable notation in the HTML.  So the conversion is as follows:  $ ... $  -   \\( ... \\)  and  $$ ... $$  -   \\[ ... \\] .  Keep this in mind when configuring MathJax for your document.  Math requires you to point the HTML at the MathJax library and provide the necessary configuration.  If using the PyMdown application, and not  just  the extension, PyMdown provides a script  mathjax-loader.js  for quick setup, though you still need to actually configure your settings to use the script and also point it at the library or cdn:  https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML .  The PyMdown loader script does not have to be used, but is provided for quick startup and as an example.  Please see the  MathJax  site form more info on using MathJax.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/math/#examples", 
            "text": "Some Equations: $$  E ( \\mathbf {v},  \\mathbf {h} )   =   - \\sum _{i,j}w_{ij}v_i h_j  -   \\sum _i b_i v_i  -   \\sum _j c_j h_j  $$ \n\n- Here are some more equations:\n\n     $$           \\begin {align}              p ( v_i = 1 | \\mathbf {h} )     =   \\sigma\\left ( \\sum _j w_{ij}h_j  +  b_i \\right )   \\\\              p ( h_j = 1 | \\mathbf {v} )     =   \\sigma\\left ( \\sum _i w_{ij}v_i  +  c_j \\right )           \\end {align}       $$ \n\n- Inline equations:  $ p ( x|y )   =   \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ .  Some Equations:  \\[\nE(\\mathbf{v}, \\mathbf{h}) = -\\sum_{i,j}w_{ij}v_i h_j - \\sum_i b_i v_i - \\sum_j c_j h_j\n\\]    Here are some more equations:  \\[\n    \\begin{align}\n        p(v_i=1|\\mathbf{h})   = \\sigma\\left(\\sum_j w_{ij}h_j + b_i\\right) \\\\\n        p(h_j=1|\\mathbf{v})   = \\sigma\\left(\\sum_i w_{ij}v_i + c_j\\right)\n    \\end{align}\n\\]    Inline equations: \\(p(x|y) = \\frac{p(y|x)p(x)}{p(y)}\\).", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/pathconverter/", 
            "text": "PathConverter\n\n\nRelative and absolute path conversion.\n\n\n\n\nOverview\n\n\nPathConverter is an extension that can convert paths to absolute or relative paths for links and images.  PathConverter takes a base path (an absolute path used as a reference for locating images and referenced files) and a relative path (an absolute path that the links will be relative to after conversion if not running in absolute mode) and then converts paths for the \nhref\n and/or \nsrc\n attributes in \na\n, \nscript\n, \nimg\n, and \nlink\n tags.\n\n\nPathConverter will only operate on file paths that can be confirmed to exist on the system it is run on.  Absolute mode is mostly useful for PyMdown tool to render previews.  Relative mode is the more useful mode as it can be used to render HTML for use in an actual website.  This entire documentation site was created using the this extension in relative mode.\n\n\nPathConverter is also intelligent enough to only operate on the file portion of the a path link.  Consider the following scenario:  \npath/to/file.html#header-to-jump-to\n.  In the example, \npath/to/file.html\n will be converted, but \n#header-to-jump-to\n will be left unaltered.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbase_path\n\n\nstring\n\n\n\n\nA string indicating an absolute base path to be used to find referenced files.\n\n\n\n\n\n\nrelative_path\n\n\nstring\n\n\n\n\nA string indicating an absolute path that the references are to be relative to (not used when \nabsolute\n is set \nTrue\n).\n\n\n\n\n\n\nabsolute\n\n\nbool\n\n\nTrue\n\n\nDetermines whether paths are converted to absolute or relative.\n\n\n\n\n\n\ntags\n\n\nstring\n\n\na script img link\n\n\nTags (separated by spaces) that are searched to find \nhref\n and \nsrc\n attributes.", 
            "title": "PathConverter"
        }, 
        {
            "location": "/extensions/pathconverter/#pathconverter", 
            "text": "Relative and absolute path conversion.", 
            "title": "PathConverter"
        }, 
        {
            "location": "/extensions/pathconverter/#overview", 
            "text": "PathConverter is an extension that can convert paths to absolute or relative paths for links and images.  PathConverter takes a base path (an absolute path used as a reference for locating images and referenced files) and a relative path (an absolute path that the links will be relative to after conversion if not running in absolute mode) and then converts paths for the  href  and/or  src  attributes in  a ,  script ,  img , and  link  tags.  PathConverter will only operate on file paths that can be confirmed to exist on the system it is run on.  Absolute mode is mostly useful for PyMdown tool to render previews.  Relative mode is the more useful mode as it can be used to render HTML for use in an actual website.  This entire documentation site was created using the this extension in relative mode.  PathConverter is also intelligent enough to only operate on the file portion of the a path link.  Consider the following scenario:   path/to/file.html#header-to-jump-to .  In the example,  path/to/file.html  will be converted, but  #header-to-jump-to  will be left unaltered.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/pathconverter/#options", 
            "text": "Option  Type  Default  Description      base_path  string   A string indicating an absolute base path to be used to find referenced files.    relative_path  string   A string indicating an absolute path that the references are to be relative to (not used when  absolute  is set  True ).    absolute  bool  True  Determines whether paths are converted to absolute or relative.    tags  string  a script img link  Tags (separated by spaces) that are searched to find  href  and  src  attributes.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/plainhtml/", 
            "text": "PlainHtml\n\n\nStrip down to plain HTML.\n\n\n\n\nOverview\n\n\nPlainHtml is a simple extension that is run at the end of post-processing.  It searches the final output stripping things like \nstyle\n, \nid\n, \nclass\n, and \non\nname\n attributes from HTML tags.  It also removes HTML comments.  If you have no desire to see these, this can strip them out.  Though it does its best to be loaded at the very end of the process, it helps to include this one last when loading up your extensions.  If needed, plain HTML can also be configured to just strip out just comments or just attributes etc.\n\n\n\n\nWarning\n\n\nThis is not meant to be a sanitizer for HTML.  This is just meant to try and strip out style, script, classes, etc. to provide a plain HTML output for the times this is desired; this is not meant as a security extension.  If you want something to secure the output, you should consider running a sanitizer like \nbleach\n.\n\n\n\n\nOptions\n\n\nBy default, PlainHtml strips the following attributes: \nstyle\n, \nid\n, \nclass\n, and \non\nname\n.  PlainHtml also strips HTML comments. If desired, its behavior can be configured to strip less or even more, but it is limited to attributes and comments.  If you are using the PyMdown app, and you want to control what gets strip, you may want to forgo using the \n--plain-html\n option laid out in the \nuser guide\n and just configure the plugin manually; the \n--plain-html\n option runs with the defaults only.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstrip_comments\n\n\nbool\n\n\nTrue\n\n\nStrip HTML comments during post process.\n\n\n\n\n\n\nstrip_js_on_attributes\n\n\nbool\n\n\nTrue\n\n\nStrip JavaScript script attributes with the pattern on* during post process.\n\n\n\n\n\n\nstrip_attributes\n\n\nstring\n\n\nid class style\n\n\nA string attribute names separated by spaces.", 
            "title": "PlainHtml"
        }, 
        {
            "location": "/extensions/plainhtml/#plainhtml", 
            "text": "Strip down to plain HTML.", 
            "title": "PlainHtml"
        }, 
        {
            "location": "/extensions/plainhtml/#overview", 
            "text": "PlainHtml is a simple extension that is run at the end of post-processing.  It searches the final output stripping things like  style ,  id ,  class , and  on name  attributes from HTML tags.  It also removes HTML comments.  If you have no desire to see these, this can strip them out.  Though it does its best to be loaded at the very end of the process, it helps to include this one last when loading up your extensions.  If needed, plain HTML can also be configured to just strip out just comments or just attributes etc.   Warning  This is not meant to be a sanitizer for HTML.  This is just meant to try and strip out style, script, classes, etc. to provide a plain HTML output for the times this is desired; this is not meant as a security extension.  If you want something to secure the output, you should consider running a sanitizer like  bleach .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/plainhtml/#options", 
            "text": "By default, PlainHtml strips the following attributes:  style ,  id ,  class , and  on name .  PlainHtml also strips HTML comments. If desired, its behavior can be configured to strip less or even more, but it is limited to attributes and comments.  If you are using the PyMdown app, and you want to control what gets strip, you may want to forgo using the  --plain-html  option laid out in the  user guide  and just configure the plugin manually; the  --plain-html  option runs with the defaults only.     Option  Type  Default  Description      strip_comments  bool  True  Strip HTML comments during post process.    strip_js_on_attributes  bool  True  Strip JavaScript script attributes with the pattern on* during post process.    strip_attributes  string  id class style  A string attribute names separated by spaces.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/progressbar/", 
            "text": "ProgressBar\n\n\nSyntax for progress bars.\n\n\n\n\nOverview\n\n\nProgressBar is an extension that adds support for progress/status bars.  It can take percentages or fractions, and it can optionally generate classes for percentages at 20% levels.  It also works with Python Markdown\ns built in \nattr_list\n extension.  Though progress bars are rendered as block items, it accepts attr_list\ns inline format.\n\n\nThe basic syntax for progress bars is: \n[= \npercentage or fraction\n \noptional single or double quoted title\n]\n.  The opening \n[\n can be followed by one or more \n=\n characters. After the \n=\n char(s) the percentage is specified as either a fraction or percentage and can optionally be followed by a title surrounded in either double quotes or single quotes.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlevel_class\n\n\nbool\n\n\nTrue\n\n\nEnables or disables the level class feature.  The level class feature adds level classes in increments of 20.\n\n\n\n\n\n\nadd_classes\n\n\nstring\n\n\n\n\nThis option accepts a string of classes separated by spaces.\n\n\n\n\n\n\n\n\nExamples\n\n\n| Test               | Result                                         |\n|--------------------|------------------------------------------------|\n|Animated: 0%        |[=0% \n0%\n]{: .candystripe-animate}              |\n|Animated: 5%        |[=5% \n5%\n]{: .candystripe-animate}              |\n|Animated: 25%       |[=25% \n25%\n]{: .candystripe-animate}            |\n|Animated: 45%       |[=45% \n45%\n]{: .candystripe-animate}            |\n|Animated: 65%       |[=65% \n65%\n]{: .candystripe-animate}            |\n|Animated: 85%       |[=85% \n85%\n]{: .candystripe-animate}            |\n|Animated: 100%      |[=100% \n100%\n]{: .candystripe-animate}          |\n|Division Percentage |[= 212.2/537 \n212.2/537 Testing division\n]      |\n|No Label            |[=== 50%]                                       |\n|Inline              |Before[= 50% \nI\nm a block!\n]After               |\n|Animated with Gloss |[= 50% \nGlossy\n]{: .candystripe-animate .gloss} |\n\n\n\n\n\n\n\n\n\n\n\nTest\n\n\nResult\n\n\n\n\n\n\n\n\n\n\nAnimated: 0%\n\n\n\n\n\n\n\n\n0%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 5%\n\n\n\n\n\n\n\n\n5%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 25%\n\n\n\n\n\n\n\n\n25%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 45%\n\n\n\n\n\n\n\n\n45%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 65%\n\n\n\n\n\n\n\n\n65%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 85%\n\n\n\n\n\n\n\n\n85%\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated: 100%\n\n\n\n\n\n\n\n\n100%\n\n\n\n\n\n\n\n\n\n\n\n\nDivision Percentage\n\n\n\n\n\n\n\n\n212.2/537 Testing division\n\n\n\n\n\n\n\n\n\n\n\n\nNo Label\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInline\n\n\nBefore\n\n\n\n\nI\nm a block!\n\n\n\n\nAfter\n\n\n\n\n\n\nAnimated with Gloss\n\n\n\n\n\n\n\n\nGlossy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCSS\n\n\nThe general HTML structure of the progress bar is as follows:\n\n\ndiv\n \nclass=\nprogress progress-100plus\n\n    \ndiv\n \nclass=\nprogress-bar\n \nstyle=\nwidth:100.00%\n\n        \np\n \nclass=\nprogress-label\n100%\n/p\n\n    \n/div\n\n\n/div\n\n\n\n\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprogress\n\n\nThis is attached to the outer \ndiv\n container of the progress bar.\n\n\n\n\n\n\nprogress-bar\n\n\nThis is attached to the inner \ndiv\n whose width is adjusted to give the visual appearance of a bar at the desired percentage.\n\n\n\n\n\n\nprogress-label\n\n\nThis is attached to the \np\n element that will contain the desired label.\n\n\n\n\n\n\nprogress-\ninteger>plus\n\n\nThis is an optional class that indicates the percentage of the progress bar by increments of 20.\n\n\n\n\n\n\n\n\n/* Progress Bars */\n\n\n.markdown-body\n \n.progress\n \n{\n\n  \ndisplay\n:\n \nblock\n;\n\n  \nwidth\n:\n \n300px\n;\n\n  \nmargin\n:\n \n10px\n \n0\n;\n\n  \nheight\n:\n \n24px\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n  \nbackground-color\n:\n \n#ededed\n;\n\n  \nposition\n:\n \nrelative\n;\n\n  \nbox\n-\nshadow\n:\n \ninset\n \n-1px\n \n1px\n \n3px\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n.\n1\n);\n\n\n}\n\n\n\n.markdown-body\n \n.progress-label\n \n{\n\n  \nposition\n:\n \nabsolute\n;\n\n  \ntext-align\n:\n \ncenter\n;\n\n  \nfont-weight\n:\n \nbold\n;\n\n  \nwidth\n:\n \n100%\n;\n \nmargin\n:\n \n0\n;\n\n  \nline-height\n:\n \n24px\n \n!important\n;\n\n  \ncolor\n:\n \n#333\n;\n\n  \ntext-shadow\n:\n \n1px\n \n1px\n \n0\n \n#fefefe\n,\n \n-1px\n \n-1px\n \n0\n \n#fefefe\n,\n \n-1px\n \n1px\n \n0\n \n#fefefe\n,\n \n1px\n \n-1px\n \n0\n \n#fefefe\n,\n \n0\n \n1px\n \n0\n \n#fefefe\n,\n \n0\n \n-1px\n \n0\n \n#fefefe\n,\n \n1px\n \n0\n \n0\n \n#fefefe\n,\n \n-1px\n \n0\n \n0\n \n#fefefe\n,\n \n1px\n \n1px\n \n2px\n \n#000\n;\n\n  \n-\nwebkit\n-\nfont\n-\nsmoothing\n:\n \nantialiased\n \n!important\n;\n\n  \nwhite-space\n:\n \nnowrap\n;\n\n  \noverflow\n:\n \nhidden\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-bar\n \n{\n\n  \nheight\n:\n \n24px\n;\n\n  \nfloat\n:\n \nleft\n;\n\n  \n-\nwebkit\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \n-\nmoz\n-\nborder\n-\nradius\n:\n \n3px\n;\n\n  \nborder\n-\nradius\n:\n \n3px\n;\n\n  \nbackground-color\n:\n \n#96c6d7\n;\n\n  \nbox\n-\nshadow\n:\n \ninset\n \n0\n \n1px\n \n0\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n5\n)\n,\n \ninset\n \n0\n \n-1px\n \n0\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n.\n1\n);\n\n  \nbackground\n-\nsize\n:\n \n30px\n \n30px\n;\n\n  \nbackground-image\n:\n \n-\nwebkit\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n\n    \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n\n    \ntransparent\n \n77%\n,\n \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \n-\nmoz\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \n-\nms\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \n-\no\n-\nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n  \nbackground-image\n:\n \nlinear\n-\ngradient\n(\n\n    \n135\ndeg\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n27%\n,\n \ntransparent\n \n27%\n,\n\n    \ntransparent\n \n52%\n,\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n52%\n,\n\n    \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n4\n)\n \n77%\n,\n \ntransparent\n \n77%\n,\n\n    \ntransparent\n\n  \n);\n\n\n}\n\n\n\n.markdown-body\n \n.progress-100plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#a6d796\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-80plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#c6d796\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-60plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#d7c896\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-40plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#d7a796\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-20plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#d796a6\n;\n\n\n}\n\n\n\n.markdown-body\n \n.progress-0plus\n \n.progress-bar\n \n{\n\n  \nbackground-color\n:\n \n#c25f77\n;\n\n\n}\n\n\n\n.markdown-body\n \n.candystripe-animate\n \n.progress-bar\n{\n\n  \n-\nwebkit\n-\nanimation\n:\n \nanimate\n-\nstripes\n \n3s\n \nlinear\n \ninfinite\n;\n\n  \n-\nmoz\n-\nanimation\n:\n \nanimate\n-\nstripes\n \n3s\n \nlinear\n \ninfinite\n;\n\n  \nanimation\n:\n \nanimate\n-\nstripes\n \n3s\n \nlinear\n \ninfinite\n;\n\n\n}\n\n\n\n@-webkit-keyframes\n \nanimate-stripes\n \n{\n\n  \n0\n%\n \n{\n\n    \nbackground-position\n:\n \n0\n \n0\n;\n\n  \n}\n\n\n  \n100\n%\n \n{\n\n    \nbackground-position\n:\n \n60px\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n@-moz-keyframes\n \nanimate-stripes\n \n{\n\n  \n0\n%\n \n{\n\n    \nbackground-position\n:\n \n0\n \n0\n;\n\n  \n}\n\n\n  \n100\n%\n \n{\n\n    \nbackground-position\n:\n \n60px\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n@keyframes\n \nanimate-stripes\n \n{\n\n  \n0\n%\n \n{\n\n    \nbackground-position\n:\n \n0\n \n0\n;\n\n  \n}\n\n\n  \n100\n%\n \n{\n\n    \nbackground-position\n:\n \n60px\n \n0\n;\n\n  \n}\n\n\n}\n\n\n\n.markdown-body\n \n.gloss\n \n.progress-bar\n \n{\n\n  \nbox\n-\nshadow\n:\n\n    \ninset\n \n0\n \n4px\n \n12px\n \nrgba\n(\n255\n,\n \n255\n,\n \n255\n,\n \n.\n7\n)\n,\n\n    \ninset\n \n0\n \n-12px\n \n0\n \nrgba\n(\n0\n,\n \n0\n,\n \n0\n,\n \n.\n05\n);\n\n\n}\n\n\n\n@media\n \nprint\n \n{\n\n  \n.markdown-body\n \n.progress\n,\n\n  \n.markdown-body\n \n.progress-bar\n \n{\n\n    \n-\nmoz\n-\nbox\n-\nshadow\n:\n \nnone\n;\n\n    \n-\nwebkit\n-\nbox\n-\nshadow\n:\n \nnone\n;\n\n    \nbox\n-\nshadow\n:\n \nnone\n;\n\n  \n}\n\n\n  \n.markdown-body\n \n.progress\n \n{\n\n    \nborder\n:\n \n1px\n \nsolid\n \n#ddd\n;\n\n  \n}\n\n\n  \n.markdown-body\n \n.progress-bar\n \n{\n\n    \nheight\n:\n \n22px\n;\n\n    \nborder-right\n:\n \n1px\n \nsolid\n \n#ddd\n;\n\n  \n}\n\n\n}", 
            "title": "ProgressBar"
        }, 
        {
            "location": "/extensions/progressbar/#progressbar", 
            "text": "Syntax for progress bars.", 
            "title": "ProgressBar"
        }, 
        {
            "location": "/extensions/progressbar/#overview", 
            "text": "ProgressBar is an extension that adds support for progress/status bars.  It can take percentages or fractions, and it can optionally generate classes for percentages at 20% levels.  It also works with Python Markdown s built in  attr_list  extension.  Though progress bars are rendered as block items, it accepts attr_list s inline format.  The basic syntax for progress bars is:  [=  percentage or fraction   optional single or double quoted title ] .  The opening  [  can be followed by one or more  =  characters. After the  =  char(s) the percentage is specified as either a fraction or percentage and can optionally be followed by a title surrounded in either double quotes or single quotes.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/progressbar/#options", 
            "text": "Option  Type  Default  Description      level_class  bool  True  Enables or disables the level class feature.  The level class feature adds level classes in increments of 20.    add_classes  string   This option accepts a string of classes separated by spaces.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/progressbar/#examples", 
            "text": "| Test               | Result                                         |\n|--------------------|------------------------------------------------|\n|Animated: 0%        |[=0%  0% ]{: .candystripe-animate}              |\n|Animated: 5%        |[=5%  5% ]{: .candystripe-animate}              |\n|Animated: 25%       |[=25%  25% ]{: .candystripe-animate}            |\n|Animated: 45%       |[=45%  45% ]{: .candystripe-animate}            |\n|Animated: 65%       |[=65%  65% ]{: .candystripe-animate}            |\n|Animated: 85%       |[=85%  85% ]{: .candystripe-animate}            |\n|Animated: 100%      |[=100%  100% ]{: .candystripe-animate}          |\n|Division Percentage |[= 212.2/537  212.2/537 Testing division ]      |\n|No Label            |[=== 50%]                                       |\n|Inline              |Before[= 50%  I m a block! ]After               |\n|Animated with Gloss |[= 50%  Glossy ]{: .candystripe-animate .gloss} |     Test  Result      Animated: 0%     0%       Animated: 5%     5%       Animated: 25%     25%       Animated: 45%     45%       Animated: 65%     65%       Animated: 85%     85%       Animated: 100%     100%       Division Percentage     212.2/537 Testing division       No Label           Inline  Before   I m a block!   After    Animated with Gloss     Glossy", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/progressbar/#css", 
            "text": "The general HTML structure of the progress bar is as follows:  div   class= progress progress-100plus \n     div   class= progress-bar   style= width:100.00% \n         p   class= progress-label 100% /p \n     /div  /div      Classes  Description      progress  This is attached to the outer  div  container of the progress bar.    progress-bar  This is attached to the inner  div  whose width is adjusted to give the visual appearance of a bar at the desired percentage.    progress-label  This is attached to the  p  element that will contain the desired label.    progress- integer>plus  This is an optional class that indicates the percentage of the progress bar by increments of 20.     /* Progress Bars */  .markdown-body   .progress   { \n   display :   block ; \n   width :   300px ; \n   margin :   10px   0 ; \n   height :   24px ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ; \n   background-color :   #ededed ; \n   position :   relative ; \n   box - shadow :   inset   -1px   1px   3px   rgba ( 0 ,   0 ,   0 ,   . 1 );  }  .markdown-body   .progress-label   { \n   position :   absolute ; \n   text-align :   center ; \n   font-weight :   bold ; \n   width :   100% ;   margin :   0 ; \n   line-height :   24px   !important ; \n   color :   #333 ; \n   text-shadow :   1px   1px   0   #fefefe ,   -1px   -1px   0   #fefefe ,   -1px   1px   0   #fefefe ,   1px   -1px   0   #fefefe ,   0   1px   0   #fefefe ,   0   -1px   0   #fefefe ,   1px   0   0   #fefefe ,   -1px   0   0   #fefefe ,   1px   1px   2px   #000 ; \n   - webkit - font - smoothing :   antialiased   !important ; \n   white-space :   nowrap ; \n   overflow :   hidden ;  }  .markdown-body   .progress-bar   { \n   height :   24px ; \n   float :   left ; \n   - webkit - border - radius :   3px ; \n   - moz - border - radius :   3px ; \n   border - radius :   3px ; \n   background-color :   #96c6d7 ; \n   box - shadow :   inset   0   1px   0   rgba ( 255 ,   255 ,   255 ,   . 5 ) ,   inset   0   -1px   0   rgba ( 0 ,   0 ,   0 ,   . 1 ); \n   background - size :   30px   30px ; \n   background-image :   - webkit - linear - gradient ( \n     135 deg ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   27% , \n     transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% , \n     transparent   77% ,   transparent \n   ); \n   background-image :   - moz - linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   ); \n   background-image :   - ms - linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   ); \n   background-image :   - o - linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   ); \n   background-image :   linear - gradient ( \n     135 deg , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   27% ,   transparent   27% , \n     transparent   52% ,   rgba ( 255 ,   255 ,   255 ,   . 4 )   52% , \n     rgba ( 255 ,   255 ,   255 ,   . 4 )   77% ,   transparent   77% , \n     transparent \n   );  }  .markdown-body   .progress-100plus   .progress-bar   { \n   background-color :   #a6d796 ;  }  .markdown-body   .progress-80plus   .progress-bar   { \n   background-color :   #c6d796 ;  }  .markdown-body   .progress-60plus   .progress-bar   { \n   background-color :   #d7c896 ;  }  .markdown-body   .progress-40plus   .progress-bar   { \n   background-color :   #d7a796 ;  }  .markdown-body   .progress-20plus   .progress-bar   { \n   background-color :   #d796a6 ;  }  .markdown-body   .progress-0plus   .progress-bar   { \n   background-color :   #c25f77 ;  }  .markdown-body   .candystripe-animate   .progress-bar { \n   - webkit - animation :   animate - stripes   3s   linear   infinite ; \n   - moz - animation :   animate - stripes   3s   linear   infinite ; \n   animation :   animate - stripes   3s   linear   infinite ;  }  @-webkit-keyframes   animate-stripes   { \n   0 %   { \n     background-position :   0   0 ; \n   } \n\n   100 %   { \n     background-position :   60px   0 ; \n   }  }  @-moz-keyframes   animate-stripes   { \n   0 %   { \n     background-position :   0   0 ; \n   } \n\n   100 %   { \n     background-position :   60px   0 ; \n   }  }  @keyframes   animate-stripes   { \n   0 %   { \n     background-position :   0   0 ; \n   } \n\n   100 %   { \n     background-position :   60px   0 ; \n   }  }  .markdown-body   .gloss   .progress-bar   { \n   box - shadow : \n     inset   0   4px   12px   rgba ( 255 ,   255 ,   255 ,   . 7 ) , \n     inset   0   -12px   0   rgba ( 0 ,   0 ,   0 ,   . 05 );  }  @media   print   { \n   .markdown-body   .progress , \n   .markdown-body   .progress-bar   { \n     - moz - box - shadow :   none ; \n     - webkit - box - shadow :   none ; \n     box - shadow :   none ; \n   } \n\n   .markdown-body   .progress   { \n     border :   1px   solid   #ddd ; \n   } \n\n   .markdown-body   .progress-bar   { \n     height :   22px ; \n     border-right :   1px   solid   #ddd ; \n   }  }", 
            "title": "CSS"
        }, 
        {
            "location": "/extensions/pymdown/", 
            "text": "PyMdown\n\n\nPyMdown extensions.\n\n\n\n\nOverview\n\n\nThe PyMdown extension is a convenience extension to load up the following extensions with their default settings. It currently provides no other additional features.\n\n\nExtensions:\n\n\n\n\n\n\n\n\nExtension\n\n\nOptions\n\n\nName\n\n\n\n\n\n\n\n\n\n\nmagiclink\n\n\n\n\npymdownx.magiclink\n\n\n\n\n\n\nbetterem\n\n\n\n\npymdownx.betterem\n\n\n\n\n\n\ntilde\n\n\n\n\npymdownx.tilde\n\n\n\n\n\n\ncaret\n\n\n\n\npymdownx.caret\n\n\n\n\n\n\nmark\n\n\n\n\npymdownx.mark\n\n\n\n\n\n\nsmartsymbols\n\n\n\n\npymdownx.smartsymbols\n\n\n\n\n\n\ngithubemoji\n\n\n\n\npymdownx.githubemoji\n\n\n\n\n\n\ntasklist\n\n\n\n\npymdownx.tasklist\n\n\n\n\n\n\nprogressbar\n\n\n\n\npymdownx.progressbar\n\n\n\n\n\n\nheaderanchor\n\n\n\n\npymdownx.headeranchor\n\n\n\n\n\n\nsuperfences\n\n\n\n\npymdownx.superfences\n\n\n\n\n\n\ninlinehilite\n\n\n\n\npymdownx.inlinehilite\n\n\n\n\n\n\nmath\n\n\n\n\npymdownx.math", 
            "title": "PyMdown"
        }, 
        {
            "location": "/extensions/pymdown/#pymdown", 
            "text": "PyMdown extensions.", 
            "title": "PyMdown"
        }, 
        {
            "location": "/extensions/pymdown/#overview", 
            "text": "The PyMdown extension is a convenience extension to load up the following extensions with their default settings. It currently provides no other additional features.  Extensions:     Extension  Options  Name      magiclink   pymdownx.magiclink    betterem   pymdownx.betterem    tilde   pymdownx.tilde    caret   pymdownx.caret    mark   pymdownx.mark    smartsymbols   pymdownx.smartsymbols    githubemoji   pymdownx.githubemoji    tasklist   pymdownx.tasklist    progressbar   pymdownx.progressbar    headeranchor   pymdownx.headeranchor    superfences   pymdownx.superfences    inlinehilite   pymdownx.inlinehilite    math   pymdownx.math", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/smartsymbols/", 
            "text": "SmartSymbols\n\n\nAuto-convert special symbols.\n\n\n\n\nOverview\n\n\nSmartSymbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc.  It basically allows for more \nsmarty-pants\n type replacements.  It is meant to be used along side the Python Markdown\ns \nsmarty\n extension.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrademark\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for tradmark symbol.\n\n\n\n\n\n\ncopyright\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for copyright symbol.\n\n\n\n\n\n\nregistered\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for registered symbol.\n\n\n\n\n\n\ncare_of\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for care / of.\n\n\n\n\n\n\nplusminus\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for plus / minus.\n\n\n\n\n\n\narrows\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for creating arrows.\n\n\n\n\n\n\nnotequal\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for not equal symbol.\n\n\n\n\n\n\nfractions\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for common fractions.\n\n\n\n\n\n\nordinal_numbers\n\n\nbool\n\n\nTrue\n\n\nAdd syntax for ordinal numbers.\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nMarkdown\n\n\nResult\n\n\n\n\n\n\n\n\n\n\n(tm)\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\n\n\n(r)\n\n\n\n\n\n\n\n\nc/o\n\n\n\n\n\n\n\n\n+/-\n\n\n\n\n\n\n\n\n--\n\n\n\n\n\n\n\n\n--\n\n\n\n\n\n\n\n\n--\n\n\n\n\n\n\n\n\n!=\n\n\n\n\n\n\n\n\n1/4, etc.\n\n\n, etc.\n\n\n\n\n\n\n1st 2nd etc.\n\n\n1\nst\n 2\nnd\n etc.", 
            "title": "SmartSymbols"
        }, 
        {
            "location": "/extensions/smartsymbols/#smartsymbols", 
            "text": "Auto-convert special symbols.", 
            "title": "SmartSymbols"
        }, 
        {
            "location": "/extensions/smartsymbols/#overview", 
            "text": "SmartSymbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc.  It basically allows for more  smarty-pants  type replacements.  It is meant to be used along side the Python Markdown s  smarty  extension.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/smartsymbols/#options", 
            "text": "Option  Type  Default  Description      trademark  bool  True  Add syntax for tradmark symbol.    copyright  bool  True  Add syntax for copyright symbol.    registered  bool  True  Add syntax for registered symbol.    care_of  bool  True  Add syntax for care / of.    plusminus  bool  True  Add syntax for plus / minus.    arrows  bool  True  Add syntax for creating arrows.    notequal  bool  True  Add syntax for not equal symbol.    fractions  bool  True  Add syntax for common fractions.    ordinal_numbers  bool  True  Add syntax for ordinal numbers.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/smartsymbols/#examples", 
            "text": "Markdown  Result      (tm)     (c)     (r)     c/o     +/-     --     --     --     !=     1/4, etc.  , etc.    1st 2nd etc.  1 st  2 nd  etc.", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/superfences/", 
            "text": "SuperFences\n\n\nBetter fenced blocks.\n\n\n\n\nOverview\n\n\nSuperFences provides 4 features:\n\n\n\n\nThe ability to nest fences under blockquotes, lists, or other block elements (this feature is provided as a workaround until a more official and better implementation is provided by the Python Markdown team; see \nLimitations\n for more info).\n\n\nSpecial UML flowchart fence via the \nflow\n language specifier.\n\n\nSpecial UML sequence diagram via the \nsequence\n language specifier.\n\n\nThe ability to disable indented code blocks in favor of only using the fenced variant (off by default).\n\n\n\n\nAll features can be turned on or off.\n\n\nSuperFences relies on the \nCodeHilite\n extension for syntax highlighting, so CodeHilite is expected to be installed and configured if syntax highlighting desired.  If CodeHilite is not configured or installed, SuperFences will just escape in such a way that a JavaScript highlighter could be used.\n\n\nNested Fenced Blocks\n\n\nFenced blocks requires all nested fence content to be at least at the indentation levels of the fences (blank lines excluded).  The opening and closing fence markers must be indented at the same level.  If you are using a fenced block inside a blockquote, at least the first line of the fenced block needs to have the appropriate number of \n characters signifying the quote depth.\n\n\n ```\n  a fenced block\n  ```\n\n\n\n\n\nKeep in mind that too many blank lines will cause a blockquote to terminate, so remember to use \n markers accordingly if not marking every line.\n\n\n ```\n  a fenced block\n\n\n with blank lines\n  ```\n\n\n\n\n\nIf using a fenced block as the first line of a list, you will have to leave the first line blank, but remember that the list marker must be followed by a space.\n\n\n-\nspace\n\n    ```\n    a fenced block\n    ```\n\nDefinition\n:\nspace\n\n    ```\n    a fenced block\n    ```\n\n\n\n\n\nUML Diagrams\n\n\nWhen using the UML diagram features, you must provide the necessary JavaScript files for the HTML output.  The requirements are listed below:\n\n\nflowcharts:\n\n\n\n\nraphael.js\n\n\nflowchart.js\n\n\n\n\nsequence diagrams:\n\n\n\n\nraphael.js\n\n\nunderscore.js\n\n\nsequece-diagram.js\n\n\n\n\nSimply including the libraries above is not enough as these libraries need to be pointed at the elements they need to convert.  If using the PyMdown application, and not just the extension, PyMdown provides scripts \numl-converter.js\n, \nflow-loader.js\n, and \nsequence-loader.js\n that can be used to target the HTML elements and execute the appropriate library on their content to create the desired diagrams.  The scripts do not have to be used, and you can modify them or write your own to suite your needs; it is provided for convenience.\n\n\n/* uml-converter.js */\n\n\n(\nfunction\n \n(\nwin\n,\n \ndoc\n)\n \n{\n\n  \nwin\n.\nconvertUML\n \n=\n \nfunction\n(\nclassName\n,\n \nconverter\n,\n \nsettings\n)\n \n{\n\n    \nvar\n \ncharts\n \n=\n \ndoc\n.\nquerySelectorAll\n(\npre.\n \n+\n \nclassName\n),\n\n        \narr\n \n=\n \n[],\n\n        \ni\n,\n \nj\n,\n \nmaxItem\n,\n \ndiagaram\n,\n \ntext\n,\n \ncurNode\n;\n\n\n    \n// Is there a settings object?\n\n    \nif\n \n(\nsettings\n \n===\n \nvoid\n \n0\n)\n \n{\n\n        \nsettings\n \n=\n \n{};\n\n    \n}\n\n\n    \n// Make sure we are dealing with an array\n\n    \nfor\n(\ni\n \n=\n \n0\n,\n \nmaxItem\n \n=\n \ncharts\n.\nlength\n;\n \ni\n \n \nmaxItem\n;\n \ni\n++\n)\n \narr\n.\npush\n(\ncharts\n[\ni\n])\n\n\n    \n// Find the UML source element and get the text\n\n    \nfor\n \n(\ni\n \n=\n \n0\n,\n \nmaxItem\n \n=\n \narr\n.\nlength\n;\n \ni\n \n \nmaxItem\n;\n \ni\n++\n)\n \n{\n\n        \nchildEl\n \n=\n \narr\n[\ni\n].\nfirstChild\n;\n\n        \nparentEl\n \n=\n \nchildEl\n.\nparentNode\n;\n\n        \ntext\n \n=\n \n;\n\n        \nfor\n \n(\nj\n \n=\n \n0\n;\n \nj\n \n \nchildEl\n.\nchildNodes\n.\nlength\n;\n \nj\n++\n)\n \n{\n\n            \ncurNode\n \n=\n \nchildEl\n.\nchildNodes\n[\nj\n];\n\n            \nwhitespace\n \n=\n \n/^\\s*$/\n;\n\n            \nif\n \n(\ncurNode\n.\nnodeName\n \n===\n \n#text\n \n \n!\n(\nwhitespace\n.\ntest\n(\ncurNode\n.\nnodeValue\n)))\n \n{\n\n                \ntext\n \n=\n \ncurNode\n.\nnodeValue\n;\n\n                \nbreak\n;\n\n            \n}\n\n        \n}\n\n\n        \n// Do UML conversion and replace source\n\n        \nel\n \n=\n \ndoc\n.\ncreateElement\n(\ndiv\n);\n\n        \nel\n.\nclassName\n \n=\n \nclassName\n;\n\n        \nparentEl\n.\nparentNode\n.\ninsertBefore\n(\nel\n,\n \nparentEl\n);\n\n        \nparentEl\n.\nparentNode\n.\nremoveChild\n(\nparentEl\n);\n\n        \ndiagram\n \n=\n \nconverter\n.\nparse\n(\ntext\n);\n\n        \ndiagram\n.\ndrawSVG\n(\nel\n,\n \nsettings\n);\n\n    \n}\n\n  \n}\n\n\n})(\nwindow\n,\n \ndocument\n)\n\n\n\n\n\n\n/* flow-loader.js */\n\n\n(\nfunction\n \n(\ndoc\n)\n \n{\n\n  \nfunction\n \nonReady\n(\nfn\n)\n \n{\n\n    \nif\n \n(\ndoc\n.\naddEventListener\n)\n \n{\n\n      \ndoc\n.\naddEventListener\n(\nDOMContentLoaded\n,\n \nfn\n);\n\n    \n}\n \nelse\n \n{\n\n      \ndoc\n.\nattachEvent\n(\nonreadystatechange\n,\n \nfunction\n()\n \n{\n\n        \nif\n \n(\ndoc\n.\nreadyState\n \n===\n \ninteractive\n)\n\n          \nfn\n();\n\n      \n});\n\n    \n}\n\n  \n}\n\n\n  \nonReady\n(\nfunction\n(){\nconvertUML\n(\numl-flowchart\n,\n \nflowchart\n);});\n\n\n})(\ndocument\n)\n\n\n\n\n\n\n/* sequence-loader.js */\n\n\n(\nfunction\n \n(\ndoc\n)\n \n{\n\n  \nfunction\n \nonReady\n(\nfn\n)\n \n{\n\n    \nif\n \n(\ndoc\n.\naddEventListener\n)\n \n{\n\n      \ndoc\n.\naddEventListener\n(\nDOMContentLoaded\n,\n \nfn\n);\n\n    \n}\n \nelse\n \n{\n\n      \ndoc\n.\nattachEvent\n(\nonreadystatechange\n,\n \nfunction\n()\n \n{\n\n        \nif\n \n(\ndoc\n.\nreadyState\n \n===\n \ninteractive\n)\n\n          \nfn\n();\n\n      \n});\n\n    \n}\n\n  \n}\n\n\n  \nonReady\n(\nfunction\n(){\nconvertUML\n(\numl-sequence-diagram\n,\n \nDiagram\n,\n \n{\ntheme\n:\n \nsimple\n});});\n\n\n})(\ndocument\n)\n\n\n\n\n\n\nUML flowcharts and sequence diagrams will be rendered as HTML \npre\ncode\n tags before the JavaScript libraries are run on them.  They will be assigned CSS classes \numl-flowchart\n and \numl-sequence-diagram\n respectively for flowcharts and sequence diagrams.\n\n\nLimitations\n\n\nThis extension suffers from the same issues that the original fenced block extension suffers from.  Normally Python Markdown does not parse content inside HTML tags unless they are marked with the attribute \nmarkdown='1'\n etc.  But since this is run as a preprocessor, it is not aware of the HTML blocks.  So be aware of this.\n\n\nSuperFences is made to work with the default extensions out of the box.  It will probably not work with other extensions such as Grid Tables since that extension allows for characters to obscure the blocks like blockquote syntax does (though this has been designed to work with blockquotes).  Ideally fenced blocks needs to be handled as a block parser, but there is much work to be done on Python Markdown\ns internal block handlers before this is possible.\n\n\nSuperFences works best when following the guidelines.  If the guidelines are not followed, odd results may be encountered.\n\n\nFor the reasons above, the nested fences feature really is just a workaround.  But for a lot of people (including myself), this functionality is more than sufficient.\n\n\nOptions\n\n\nGeneral syntax highlighting settings are configured via CodeHilite which should be installed and configured.\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndisable_indented_code_blocks\n\n\nbool\n\n\nFalse\n\n\nDisables Python Markdown\ns indented code block parsing.  This is nice if you only ever use fenced blocks.\n\n\n\n\n\n\nnested\n\n\nbool\n\n\nTrue\n\n\nUse nested fences.\n\n\n\n\n\n\numl_flow\n\n\nbool\n\n\nTrue\n\n\nEnable flowcharts.\n\n\n\n\n\n\numl_sequence\n\n\nbool\n\n\nTrue\n\n\nEnable sequence diagrams.\n\n\n\n\n\n\n\n\nExamples\n\n\nThis highlights the special features of this extension except for \ndisable_indented_code_blocks\n.\n\n\nNested Fences:\n\n\n    ```\n    This will still be parsed\n    as a normal indented code block.\n    ```\n\n```\nThis will still be parsed\nas a fenced code block.\n```\n\n- This is a list that contains multiple code blocks.\n\n    - Here is an indented block\n\n            ```\n            This will still be parsed\n            as a normal indented code block.\n            ```\n\n    - Here is a fenced code block:\n\n        ```\n        This will still be parsed\n        as a fenced code block.\n        ```\n\n        \n ```\n        \n Blockquotes?\n        \n Not a problem!\n        \n ```\n\n\n\n\n\n```\nThis will still be parsed\nas a normal indented code block.\n```\n\n\n\n\n\nThis will still be parsed\nas a fenced code block.\n\n\n\n\n\n\n\n\n\nThis is a list that contains multiple code blocks.\n\n\n\n\n\n\nHere is an indented block\n\n\n```\nThis will still be parsed\nas a normal indented code block.\n```\n\n\n\n\n\n\n\n\n\nHere is a fenced code block:\n\n\nThis will still be parsed\nas a fenced code block.\n\n\n\n\n\n\n\nBlockquotes?\nNot a problem!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUML Flow Charts\n\n\n```flow\nst=\nstart: Start:\nhttp://www.google.com[blank]\ne=\nend:\nhttp://www.google.com\nop1=\noperation: My Operation\nsub1=\nsubroutine: My Subroutine\ncond=\ncondition: Yes\nor No?:\nhttp://www.google.com\nio=\ninputoutput: catch something...\n\nst-\nop1-\ncond\ncond(yes)-\nio-\ne\ncond(no)-\nsub1(right)-\nop1\n```\n\n\n\n\n\nst=\nstart: Start:\nhttp://www.google.com[blank]\ne=\nend:\nhttp://www.google.com\nop1=\noperation: My Operation\nsub1=\nsubroutine: My Subroutine\ncond=\ncondition: Yes\nor No?:\nhttp://www.google.com\nio=\ninputoutput: catch something...\n\nst-\nop1-\ncond\ncond(yes)-\nio-\ne\ncond(no)-\nsub1(right)-\nop1\n\n\n\n\nUML Sequence Diagrams\n\n\n```sequence\nTitle: Here is a title\nA-\nB: Normal line\nB--\nC: Dashed line\nC-\nD: Open arrow\nD--\nA: Dashed open arrow\n```\n\n\n\n\n\nTitle: Here is a title\nA-\nB: Normal line\nB--\nC: Dashed line\nC-\nD: Open arrow\nD--\nA: Dashed open arrow", 
            "title": "SuperFences"
        }, 
        {
            "location": "/extensions/superfences/#superfences", 
            "text": "Better fenced blocks.", 
            "title": "SuperFences"
        }, 
        {
            "location": "/extensions/superfences/#overview", 
            "text": "SuperFences provides 4 features:   The ability to nest fences under blockquotes, lists, or other block elements (this feature is provided as a workaround until a more official and better implementation is provided by the Python Markdown team; see  Limitations  for more info).  Special UML flowchart fence via the  flow  language specifier.  Special UML sequence diagram via the  sequence  language specifier.  The ability to disable indented code blocks in favor of only using the fenced variant (off by default).   All features can be turned on or off.  SuperFences relies on the  CodeHilite  extension for syntax highlighting, so CodeHilite is expected to be installed and configured if syntax highlighting desired.  If CodeHilite is not configured or installed, SuperFences will just escape in such a way that a JavaScript highlighter could be used.", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/superfences/#nested-fenced-blocks", 
            "text": "Fenced blocks requires all nested fence content to be at least at the indentation levels of the fences (blank lines excluded).  The opening and closing fence markers must be indented at the same level.  If you are using a fenced block inside a blockquote, at least the first line of the fenced block needs to have the appropriate number of   characters signifying the quote depth.   ```\n  a fenced block\n  ```  Keep in mind that too many blank lines will cause a blockquote to terminate, so remember to use   markers accordingly if not marking every line.   ```\n  a fenced block  with blank lines\n  ```  If using a fenced block as the first line of a list, you will have to leave the first line blank, but remember that the list marker must be followed by a space.  - space \n    ```\n    a fenced block\n    ```\n\nDefinition\n: space \n    ```\n    a fenced block\n    ```", 
            "title": "Nested Fenced Blocks"
        }, 
        {
            "location": "/extensions/superfences/#uml-diagrams", 
            "text": "When using the UML diagram features, you must provide the necessary JavaScript files for the HTML output.  The requirements are listed below:  flowcharts:   raphael.js  flowchart.js   sequence diagrams:   raphael.js  underscore.js  sequece-diagram.js   Simply including the libraries above is not enough as these libraries need to be pointed at the elements they need to convert.  If using the PyMdown application, and not just the extension, PyMdown provides scripts  uml-converter.js ,  flow-loader.js , and  sequence-loader.js  that can be used to target the HTML elements and execute the appropriate library on their content to create the desired diagrams.  The scripts do not have to be used, and you can modify them or write your own to suite your needs; it is provided for convenience.  /* uml-converter.js */  ( function   ( win ,   doc )   { \n   win . convertUML   =   function ( className ,   converter ,   settings )   { \n     var   charts   =   doc . querySelectorAll ( pre.   +   className ), \n         arr   =   [], \n         i ,   j ,   maxItem ,   diagaram ,   text ,   curNode ; \n\n     // Is there a settings object? \n     if   ( settings   ===   void   0 )   { \n         settings   =   {}; \n     } \n\n     // Make sure we are dealing with an array \n     for ( i   =   0 ,   maxItem   =   charts . length ;   i     maxItem ;   i ++ )   arr . push ( charts [ i ]) \n\n     // Find the UML source element and get the text \n     for   ( i   =   0 ,   maxItem   =   arr . length ;   i     maxItem ;   i ++ )   { \n         childEl   =   arr [ i ]. firstChild ; \n         parentEl   =   childEl . parentNode ; \n         text   =   ; \n         for   ( j   =   0 ;   j     childEl . childNodes . length ;   j ++ )   { \n             curNode   =   childEl . childNodes [ j ]; \n             whitespace   =   /^\\s*$/ ; \n             if   ( curNode . nodeName   ===   #text     ! ( whitespace . test ( curNode . nodeValue )))   { \n                 text   =   curNode . nodeValue ; \n                 break ; \n             } \n         } \n\n         // Do UML conversion and replace source \n         el   =   doc . createElement ( div ); \n         el . className   =   className ; \n         parentEl . parentNode . insertBefore ( el ,   parentEl ); \n         parentEl . parentNode . removeChild ( parentEl ); \n         diagram   =   converter . parse ( text ); \n         diagram . drawSVG ( el ,   settings ); \n     } \n   }  })( window ,   document )   /* flow-loader.js */  ( function   ( doc )   { \n   function   onReady ( fn )   { \n     if   ( doc . addEventListener )   { \n       doc . addEventListener ( DOMContentLoaded ,   fn ); \n     }   else   { \n       doc . attachEvent ( onreadystatechange ,   function ()   { \n         if   ( doc . readyState   ===   interactive ) \n           fn (); \n       }); \n     } \n   } \n\n   onReady ( function (){ convertUML ( uml-flowchart ,   flowchart );});  })( document )   /* sequence-loader.js */  ( function   ( doc )   { \n   function   onReady ( fn )   { \n     if   ( doc . addEventListener )   { \n       doc . addEventListener ( DOMContentLoaded ,   fn ); \n     }   else   { \n       doc . attachEvent ( onreadystatechange ,   function ()   { \n         if   ( doc . readyState   ===   interactive ) \n           fn (); \n       }); \n     } \n   } \n\n   onReady ( function (){ convertUML ( uml-sequence-diagram ,   Diagram ,   { theme :   simple });});  })( document )   UML flowcharts and sequence diagrams will be rendered as HTML  pre code  tags before the JavaScript libraries are run on them.  They will be assigned CSS classes  uml-flowchart  and  uml-sequence-diagram  respectively for flowcharts and sequence diagrams.", 
            "title": "UML Diagrams"
        }, 
        {
            "location": "/extensions/superfences/#limitations", 
            "text": "This extension suffers from the same issues that the original fenced block extension suffers from.  Normally Python Markdown does not parse content inside HTML tags unless they are marked with the attribute  markdown='1'  etc.  But since this is run as a preprocessor, it is not aware of the HTML blocks.  So be aware of this.  SuperFences is made to work with the default extensions out of the box.  It will probably not work with other extensions such as Grid Tables since that extension allows for characters to obscure the blocks like blockquote syntax does (though this has been designed to work with blockquotes).  Ideally fenced blocks needs to be handled as a block parser, but there is much work to be done on Python Markdown s internal block handlers before this is possible.  SuperFences works best when following the guidelines.  If the guidelines are not followed, odd results may be encountered.  For the reasons above, the nested fences feature really is just a workaround.  But for a lot of people (including myself), this functionality is more than sufficient.", 
            "title": "Limitations"
        }, 
        {
            "location": "/extensions/superfences/#options", 
            "text": "General syntax highlighting settings are configured via CodeHilite which should be installed and configured.     Option  Type  Default  Description      disable_indented_code_blocks  bool  False  Disables Python Markdown s indented code block parsing.  This is nice if you only ever use fenced blocks.    nested  bool  True  Use nested fences.    uml_flow  bool  True  Enable flowcharts.    uml_sequence  bool  True  Enable sequence diagrams.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/superfences/#examples", 
            "text": "This highlights the special features of this extension except for  disable_indented_code_blocks .", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/superfences/#nested-fences", 
            "text": "```\n    This will still be parsed\n    as a normal indented code block.\n    ```\n\n```\nThis will still be parsed\nas a fenced code block.\n```\n\n- This is a list that contains multiple code blocks.\n\n    - Here is an indented block\n\n            ```\n            This will still be parsed\n            as a normal indented code block.\n            ```\n\n    - Here is a fenced code block:\n\n        ```\n        This will still be parsed\n        as a fenced code block.\n        ```\n\n          ```\n          Blockquotes?\n          Not a problem!\n          ```  ```\nThis will still be parsed\nas a normal indented code block.\n```  This will still be parsed\nas a fenced code block.    This is a list that contains multiple code blocks.    Here is an indented block  ```\nThis will still be parsed\nas a normal indented code block.\n```    Here is a fenced code block:  This will still be parsed\nas a fenced code block.   Blockquotes?\nNot a problem!", 
            "title": "Nested Fences:"
        }, 
        {
            "location": "/extensions/superfences/#uml-flow-charts", 
            "text": "```flow\nst= start: Start: http://www.google.com[blank]\ne= end: http://www.google.com\nop1= operation: My Operation\nsub1= subroutine: My Subroutine\ncond= condition: Yes\nor No?: http://www.google.com\nio= inputoutput: catch something...\n\nst- op1- cond\ncond(yes)- io- e\ncond(no)- sub1(right)- op1\n```  st= start: Start: http://www.google.com[blank]\ne= end: http://www.google.com\nop1= operation: My Operation\nsub1= subroutine: My Subroutine\ncond= condition: Yes\nor No?: http://www.google.com\nio= inputoutput: catch something...\n\nst- op1- cond\ncond(yes)- io- e\ncond(no)- sub1(right)- op1", 
            "title": "UML Flow Charts"
        }, 
        {
            "location": "/extensions/superfences/#uml-sequence-diagrams", 
            "text": "```sequence\nTitle: Here is a title\nA- B: Normal line\nB-- C: Dashed line\nC- D: Open arrow\nD-- A: Dashed open arrow\n```  Title: Here is a title\nA- B: Normal line\nB-- C: Dashed line\nC- D: Open arrow\nD-- A: Dashed open arrow", 
            "title": "UML Sequence Diagrams"
        }, 
        {
            "location": "/extensions/tasklist/", 
            "text": "Tasklist\n\n\nGithub style tasklists.\n\n\n\n\nOverview\n\n\nThe Tasklist extension adds \nGFM\n style checkbox lists.  They follow the same syntax as \nGFM\n.\n\n\nExamples\n\n\nTask List\n\n- [X] item 1\n    * [X] item A\n    * [ ] item B\n        more text\n        + [x] item a\n        + [ ] item b\n        + [x] item c\n    * [X] item C\n- [ ] item 2\n- [ ] item 3\n\n\n\n\n\nTask List\n\n\n\n\n item 1\n\n\n item A\n\n\n item B\n\n    more text\n\n\n item a\n\n\n item b\n\n\n item c\n\n\n\n\n\n\n item C\n\n\n\n\n\n\n item 2\n\n\n item 3\n\n\n\n\nCSS\n\n\nThe HTML structure of tasklists is as follows:\n\n\nul\n \nclass=\ntask-list\n\n    \nli\n \nclass=\ntask-list-item\n\n        \ninput\n \ntype=\ncheckbox\n \ndisabled=\n \nchecked=\n\n        item 1\n    \n/li\n\n\n/ul\n\n\n\n\n\n\n\n\n\n\n\n\nClasses\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntask-list\n\n\nAttached to either the \nul\n or \nol\n tag and represents the entire list element.\n\n\n\n\n\n\ntask-list-item\n\n\nThis is attached the \nli\n tag and represents a an item in the list.\n\n\n\n\n\n\n\n\nIn order to style these we mainly remove the list type style and adjust the margins to align with normal list styles.\n\n\n.markdown-body\n \n.task-list-item\n \n{\n\n  \nlist-style-type\n:\n \nnone\n;\n\n\n}\n\n\n\n.markdown-body\n \n.task-list-item\n \ninput\n \n{\n\n  \nmargin\n:\n \n0\n \n4px\n \n0.25em\n \n-20px\n;\n\n  \nvertical-align\n:\n \nmiddle\n;\n\n\n}", 
            "title": "Tasklist"
        }, 
        {
            "location": "/extensions/tasklist/#tasklist", 
            "text": "Github style tasklists.", 
            "title": "Tasklist"
        }, 
        {
            "location": "/extensions/tasklist/#overview", 
            "text": "The Tasklist extension adds  GFM  style checkbox lists.  They follow the same syntax as  GFM .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/tasklist/#examples", 
            "text": "Task List\n\n- [X] item 1\n    * [X] item A\n    * [ ] item B\n        more text\n        + [x] item a\n        + [ ] item b\n        + [x] item c\n    * [X] item C\n- [ ] item 2\n- [ ] item 3  Task List    item 1   item A   item B \n    more text   item a   item b   item c     item C     item 2   item 3", 
            "title": "Examples"
        }, 
        {
            "location": "/extensions/tasklist/#css", 
            "text": "The HTML structure of tasklists is as follows:  ul   class= task-list \n     li   class= task-list-item \n         input   type= checkbox   disabled=   checked= \n        item 1\n     /li  /ul      Classes  Description      task-list  Attached to either the  ul  or  ol  tag and represents the entire list element.    task-list-item  This is attached the  li  tag and represents a an item in the list.     In order to style these we mainly remove the list type style and adjust the margins to align with normal list styles.  .markdown-body   .task-list-item   { \n   list-style-type :   none ;  }  .markdown-body   .task-list-item   input   { \n   margin :   0   4px   0.25em   -20px ; \n   vertical-align :   middle ;  }", 
            "title": "CSS"
        }, 
        {
            "location": "/extensions/tilde/", 
            "text": "Extensions\n\n\nAdditional tilde based syntax.\n\n\n\n\nOverview\n\n\nTilde optionally adds two different features which are syntactically built around the \n~\n character: \ndelete\n which inserts \ndel\n/del\n tags and \nsubscript\n which inserts \nsub\n/sub\n tags.  Syntax behavior for smart and non-smart variants of \ndelete\n models that of \nbetterem\n.\n\n\nOptions\n\n\n\n\n\n\n\n\nOption\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsmart_delete\n\n\nbool\n\n\nTrue\n\n\nUse smart logic with delete characters: \n~~delete~~me~~\n \n \ndelete~~me\n.\n\n\n\n\n\n\ndelete\n\n\nbool\n\n\nTrue\n\n\nEnable delete feature.\n\n\n\n\n\n\nsubscript\n\n\nbool\n\n\nTrue\n\n\nEnable subscript feature.\n\n\n\n\n\n\n\n\nExamples\n\n\nThe first feature adds delete emphasis (\ndel\n tags) when inline text is surrounded by double tildes: \n~~delete me~~\n \n \ndelete me\n.  It can optionally be configured to use smart logic: \n~~delete~~me~~\n \n \ndelete~~me\n.\n\n\nThe second feature adds subscripts using single tildes: \nCH~3~CH~2~OH\n \n CH\n3\nCH\n2\nOH.  It uses Pandoc style logic, so if your subscript needs to have spaces, you must escape the spaces: \ntext~a\\ subscript~\n \n text\na subscript\n.", 
            "title": "Tilde"
        }, 
        {
            "location": "/extensions/tilde/#extensions", 
            "text": "Additional tilde based syntax.", 
            "title": "Extensions"
        }, 
        {
            "location": "/extensions/tilde/#overview", 
            "text": "Tilde optionally adds two different features which are syntactically built around the  ~  character:  delete  which inserts  del /del  tags and  subscript  which inserts  sub /sub  tags.  Syntax behavior for smart and non-smart variants of  delete  models that of  betterem .", 
            "title": "Overview"
        }, 
        {
            "location": "/extensions/tilde/#options", 
            "text": "Option  Type  Default  Description      smart_delete  bool  True  Use smart logic with delete characters:  ~~delete~~me~~     delete~~me .    delete  bool  True  Enable delete feature.    subscript  bool  True  Enable subscript feature.", 
            "title": "Options"
        }, 
        {
            "location": "/extensions/tilde/#examples", 
            "text": "The first feature adds delete emphasis ( del  tags) when inline text is surrounded by double tildes:  ~~delete me~~     delete me .  It can optionally be configured to use smart logic:  ~~delete~~me~~     delete~~me .  The second feature adds subscripts using single tildes:  CH~3~CH~2~OH    CH 3 CH 2 OH.  It uses Pandoc style logic, so if your subscript needs to have spaces, you must escape the spaces:  text~a\\ subscript~    text a subscript .", 
            "title": "Examples"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nMIT license.\n\n\nCopyright \n 2014 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n3\nrd\n Party Licenses\n\n\nSee \nlicenses\n.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "MIT license.  Copyright   2014 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#3rd-party-licenses", 
            "text": "See  licenses .", 
            "title": "3rd Party Licenses"
        }
    ]
}